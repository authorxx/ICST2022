import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2021-09-30T11:39:52.821+02:00[Europe/Berlin]
 * <br>
 * The generated test suite contains 20 tests
 * <br>
 * Covered targets: 60
 * <br>
 * Used time: 1h 29m 35s
 * <br>
 * Needed budget for current results: 96%
 * <br>
 * 
 */
public class EM_bbExp_False_rate_60_1_Test {

    
    private static String baseUrlOfSut = "http://api.catalysis-hub.org/graphql";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test
    public void test_0() throws Exception {
        
        try{
            given().accept("application/json")
                    .contentType("application/json")
                    .body(" { " + 
                        " \"query\": \"  { reactionSystems  (aseId : \\\"w_bf\\\",energyCorrection : 0.13439828,id : 47,name : \\\"h\\\",distinct : false,op : \\\"kB4tENf3N\\\",search : \\\"\\\",jsonkey : \\\"ZZN5K38gFGp\\\",order : \\\"5mlX88B_\\\",before : \\\"C6xPovOJYUVA\\\",after : \\\"bYv2VF2e7Zb\\\",first : 710,last : 720742638,before : \\\"dOEDSJf\\\",after : \\\"fLbP\\\",first : 750,last : 277)  {pageInfo{hasPreviousPage,startCursor}}       } \" " + 
                        " } ")
                    .post(baseUrlOfSut);
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_1() throws Exception {
        
        try{
            given().accept("application/json")
                    .contentType("application/json")
                    .body(" { " + 
                        " \"query\": \"  { information  (name : \\\"OaWbFku\\\",value : \\\"psXwTV78AV3f\\\",distinct : false,op : \\\"VvaZ98JbppElW1Pe\\\",search : \\\"rpTicKPJsOSUDY3\\\",jsonkey : \\\"16iI_zTvXwIie\\\",order : \\\"aUuJphrHcsOgv\\\",before : \\\"TStAmOr7k\\\",after : \\\"weJ\\\",first : 803,last : 82)  {pageInfo{hasPreviousPage,endCursor},edges{node{name}},totalCount}       } \" " + 
                        " } ")
                    .post(baseUrlOfSut);
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_2() throws Exception {
        
        try{
            given().accept("application/json")
                    .contentType("application/json")
                    .body(" { " + 
                        " \"query\": \"  { textKeys  (id : 685,key : \\\"U\\\",value : \\\"Y\\\",distinct : false,op : \\\"JTJV0CA\\\",search : \\\"MZ\\\",jsonkey : \\\"jyO\\\",order : \\\"6Z\\\",before : \\\"CTCh\\\",after : \\\"YCs7ZCwjP1XV9i\\\",first : 535,last : 965,before : \\\"r76qRDgry0xhI\\\",after : \\\"6oNDQWZAW8e\\\",first : 975,last : 950)  {pageInfo{hasNextPage,startCursor,endCursor}}       } \" " + 
                        " } ")
                    .post(baseUrlOfSut);
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_3() throws Exception {
        
        try{
            given().accept("application/json")
                    .contentType("application/json")
                    .body(" { " + 
                        " \"query\": \"  { numberKeys  (id : 346,key : \\\"\\\",value : 0.054543078,distinct : false,op : \\\"1oDwV\\\",search : \\\"A75_xYsQ2vsbCEZC\\\",jsonkey : \\\"zAEuUSOU\\\",order : \\\"WGrpB2ZKR\\\",before : \\\"QP\\\",after : \\\"r1ENlJq2aR\\\",first : 74,last : 461,before : \\\"wYGGCgYIcq30ovM\\\",after : \\\"maqzE\\\",first : 43,last : 810)  {pageInfo{hasNextPage,endCursor},totalCount}       } \" " + 
                        " } ")
                    .post(baseUrlOfSut);
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_4() throws Exception {
        
        try{
            given().accept("application/json")
                    .contentType("application/json")
                    .body(" { " + 
                        " \"query\": \"  { publications  (authors : \\\"kOLbmIkbn_\\\",doi : \\\"rbWOaxKs8MIOIls\\\",id : 675,journal : \\\"dNMTzdOCx08k\\\",number : \\\"\\\",pages : \\\"g4c0gfphBF7n\\\",pubId : \\\"kZScFDjRNvd3Uq\\\",publisher : \\\"nVmC7g3W0eKNns\\\",pubtextsearch : \\\"\\\",stime : 0.31228232,tags : \\\"\\\",title : \\\"v1S6aXlzr\\\",volume : \\\"Up9mgAvaPf\\\",year : 459,distinct : true,op : \\\"su9YNThNB\\\",search : \\\"flzHnaiAD9jhHKLz\\\",jsonkey : \\\"qsbOaXpdJm\\\",order : \\\"\\\",before : \\\"K_\\\",after : \\\"mH\\\",first : 203,last : 21)  {pageInfo{hasPreviousPage}}       } \" " + 
                        " } ")
                    .post(baseUrlOfSut);
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_5() throws Exception {
        
        try{
            given().accept("application/json")
                    .contentType("application/json")
                    .body(" { " + 
                        " \"query\": \"  { reactions  (activationEnergy : 0.9558447,chemicalComposition : \\\"QA96SLojtQSiRN6\\\",coverages : \\\"A7Jp54pauCjxkF\\\",dftCode : \\\"w5s\\\",dftFunctional : \\\"qf1u\\\",facet : \\\"DhQrLPCWGcq\\\",id : 420,products : \\\"IGb2FLFZgq\\\",pubId : \\\"QNjPRMVt7i4TO\\\",reactants : \\\"Ek35HXmkFu\\\",reactionEnergy : 0.8679869,sites : \\\"fIzD9Ub0\\\",surfaceComposition : \\\"i1DYWoMyDCESZd\\\",textsearch : \\\"O6mlh_\\\",username : \\\"2srW6k95rvW3St\\\",distinct : true,op : \\\"Z\\\",search : \\\"k\\\",jsonkey : \\\"RQocAxi8Jjoqp5\\\",order : \\\"CEc\\\",before : \\\"kqoU\\\",after : \\\"_xO5ZG0Ll\\\",first : 794749514,last : 205,before : \\\"WrnRFTC85niQTv\\\",after : \\\"QMdJ\\\",first : 943,last : 114)  {edges{node{id,chemicalComposition,products,reactionEnergy,activationEnergy,dftCode,Equation,systems{uniqueId,ctime,pbc,initialCharges,tags,constraints,calculator,calculatorParameters,charges,keyValuePairs,natoms,smax,mass,Trajdata,Ctime,Mtime,Adsorbate,Reaction,DftCode,DftFunctional,species{pageInfo{hasNextPage,hasPreviousPage,startCursor},edges{cursor},totalCount},reactionSystems{totalCount},log{aseId,logfile},publication{volume,stime,Stime},InputFile},publication{id,pubId,pages,year,systems{ctime,username,pbc,initialMagmoms,masses,momenta,calculator,energy,freeEnergy,charges,keyValuePairs,fmax,mass,Trajdata,Pbc,Ctime,Adsorbate,Reaction,Username,Substrate,Facet,species{pageInfo{hasPreviousPage}},textKeys{pageInfo{hasPreviousPage,startCursor},totalCount},reactionSystems{totalCount}}}},cursor}}       } \" " + 
                        " } ")
                    .post(baseUrlOfSut);
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_6() throws Exception {
        
        try{
            given().accept("application/json")
                    .contentType("application/json")
                    .body(" { " + 
                        " \"query\": \"  { node  (id : \\\"\\\")  {... on Information {name}... on Key {{id,ctime,initialMagmoms,tags,momenta,freeEnergy,magmom,keyValuePairs,fmax,volume,mass,charge,Formula,Cifdata,Pbc,Ctime,Reaction,Substrate,Facet,DftFunctional,species{edges{node{n},cursor}},log{logfile,Logtext},publication{id,journal,volume,number,year,publisher,pubtextsearch,stime},reactions{pageInfo{hasNextPage,hasPreviousPage,startCursor},edges{node{sites,coverages,pubId,Equation}},totalCount},InputFile}}... on TextKeyValue {key,value}... on ReactionSystem {name,aseId}... on Reaction {surfaceComposition,sites,coverages,reactants,products,reactionEnergy,activationEnergy,dftCode,username,pubId,{ctime,username,initialCharges,masses,tags,momenta,freeEnergy,charges,natoms,volume,Formula,Cifdata,Adsorbate,Reaction,Facet,DftCode,DftFunctional,reactionSystems{edges{node{name,aseId,id}},totalCount},InputFile}}... on Publication {authors,volume,number,pages,publisher,stime,{id,surfaceComposition,coverages,products,reactionEnergy,activationEnergy,dftCode,pubId,textsearch}}... on Log {logfile,{id,masses,momenta,calculator,energy,freeEnergy,magmoms,magmom,smax,volume,charge,Formula,Cifdata,Mtime,Reaction,Substrate,Facet,DftFunctional,keys{pageInfo{hasNextPage,hasPreviousPage,endCursor}},textKeys{edges{node{id,value}},totalCount},reactionSystems{pageInfo{hasNextPage,hasPreviousPage,endCursor},totalCount},InputFile}}id}       } \" " + 
                        " } ")
                    .post(baseUrlOfSut);
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_7() throws Exception {
        
        try{
            given().accept("application/json")
                    .contentType("application/json")
                    .body(" { " + 
                        " \"query\": \"  { species  (id : 297,n : 1683061928,z : 637,distinct : true,op : \\\"09PElFE1GNcDI\\\",search : \\\"B65\\\",jsonkey : \\\"ONgKo4U9e3s\\\",order : \\\"dUCSwLBJg\\\",before : \\\"W2z0Ov\\\",after : \\\"H0\\\",first : 930,last : 590,before : \\\"Lg48aQ\\\",after : \\\"PuA\\\",first : 526,last : 868)  {edges{node{z,n}},totalCount}       } \" " + 
                        " } ")
                    .post(baseUrlOfSut);
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_8() throws Exception {
        
        try{
            given().accept("application/json")
                    .contentType("application/json")
                    .body(" { " + 
                        " \"query\": \"  { systems  (calculator : \\\"3gb7l\\\",calculatorParameters : \\\"GE1o\\\",cell : 0.82364094,charge : 0.6298892,charges : 0.40243185,constraints : \\\"FgUcJrPrnf1mPx\\\",ctime : 0.56528825,data : \\\"U3plnFO93\\\",dipole : 0.1240741,energy : 0.7583979,fmax : 0.061606765,forces : 0.06600428,freeEnergy : 0.84015316,id : 668,initialCharges : 0.46556294,initialMagmoms : 0.42951822,keyValuePairs : \\\"AC60\\\",magmom : 0.88470733,magmoms : 0.7895547,mass : 0.28902447,masses : 0.7827905,momenta : 0.22541851,mtime : 0.8959322,natoms : 256,numbers : 160,pbc : 377,positions : 0.5655156,smax : 0.46602505,stress : 0.29215598,tags : 0.0962857,uniqueId : \\\"sCvrA670i1llNg0h\\\",username : \\\"eIKF\\\",volume : 0.3766796,distinct : true,op : \\\"uOqSOAPbLqY\\\",search : \\\"YO\\\",jsonkey : \\\"3NnXAYdUF\\\",order : \\\"LQNK8brVBpOURzT\\\",before : \\\"jqHLVT\\\",after : \\\"1G\\\",first : 108,last : 910)  {pageInfo{hasPreviousPage,startCursor},totalCount}       } \" " + 
                        " } ")
                    .post(baseUrlOfSut);
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_9() throws Exception {
        
        try{
            given().accept("application/json")
                    .contentType("application/json")
                    .body(" { " + 
                        " \"query\": \"  { key  (id : 304,key : \\\"0r8cW6DvLV1CKd\\\",distinct : true,op : \\\"TA\\\",search : \\\"5j0vMFOa\\\",jsonkey : \\\"NbPQTGvxP38W\\\",order : \\\"PwQ0iV9l\\\",before : \\\"s\\\",after : \\\"Bxk\\\",first : 362,last : 980)  {edges{node{id,key}}}       } \" " + 
                        " } ")
                    .post(baseUrlOfSut);
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_10() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { reactionSystems  (aseId : \\\"zY9\\\",energyCorrection : 0.07391995,id : 122,name : \\\"KjenOBSLisUUyCbD\\\",distinct : false,op : \\\"hAUK_g\\\",search : \\\"4K\\\",jsonkey : \\\"RX22OzLdhg\\\",order : \\\"634UmIn0tlYN\\\",before : \\\"WMSHO3h_r\\\",after : \\\"p45r6zNuJqoHXZ\\\",first : 166,last : 898,before : \\\"mNPBz4oR\\\",after : \\\"4rJAGMPTEWe\\\",first : 856,last : 409)  {pageInfo{hasNextPage}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'message'", containsString("There can only be one argument named \"before\"."))
                .body("'errors'[0].'locations'.size()", equalTo(2))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(193.0))
                .body("'errors'[0].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[1].'column'", numberMatches(262.0))
                .body("'errors'[1].'message'", containsString("There can only be one argument named \"after\"."))
                .body("'errors'[1].'locations'.size()", equalTo(2))
                .body("'errors'[1].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[0].'column'", numberMatches(214.0))
                .body("'errors'[1].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[1].'column'", numberMatches(282.0))
                .body("'errors'[2].'message'", containsString("There can only be one argument named \"first\"."))
                .body("'errors'[2].'locations'.size()", equalTo(2))
                .body("'errors'[2].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[0].'column'", numberMatches(239.0))
                .body("'errors'[2].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[1].'column'", numberMatches(304.0))
                .body("'errors'[3].'message'", containsString("There can only be one argument named \"last\"."))
                .body("'errors'[3].'locations'.size()", equalTo(2))
                .body("'errors'[3].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[0].'column'", numberMatches(251.0))
                .body("'errors'[3].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[1].'column'", numberMatches(316.0));
        
        try{
            given().accept("application/json")
                    .contentType("application/json")
                    .body(" { " + 
                        " \"query\": \"  { logs  (aseId : \\\"p7yU_\\\",logfile : \\\"zDQE\\\",distinct : true,op : \\\"J6Q0PHMyCZ7K06\\\",search : \\\"ZIJ2\\\",jsonkey : \\\"6Bl_OlbFB73Ud\\\",order : \\\"\\\",before : \\\"S0EYn\\\",after : \\\"zMI\\\",first : 896,last : 363)  {pageInfo{hasPreviousPage,startCursor,endCursor},totalCount}       } \" " + 
                        " } ")
                    .post(baseUrlOfSut);
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_11() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { logs  (aseId : \\\"O2m9fMhC7UVr\\\",logfile : \\\"baCnsKXOQ\\\",distinct : false,op : \\\"m8npiAZnW\\\",search : \\\"u\\\",jsonkey : \\\"nC\\\",order : \\\"Flu5idio1K9736\\\",before : \\\"X3zzQU\\\",after : \\\"2\\\",first : 854,last : 876)  {edges{node{aseId,logfile,Logtext,systems{numbers,pbc,initialMagmoms,initialCharges,masses,tags,momenta,constraints,calculator,calculatorParameters,energy,stress,dipole,magmoms,charges,keyValuePairs,mass,Formula,Trajdata,Pbc,Ctime,Adsorbate,Reaction,Substrate,DftCode,DftFunctional,keys{edges{node{id},cursor},totalCount},textKeys{pageInfo{hasNextPage,hasPreviousPage,startCursor,endCursor},totalCount},numberKeys{edges{node{value}}},reactionSystems{pageInfo{hasPreviousPage,endCursor}},publication{id,authors,journal,pages,year,publisher,doi,tags,pubtextsearch,stime,Stime,reactions{id,sites,coverages,activationEnergy,dftCode,dftFunctional,Equation,reactionSystems{aseId,id}}},InputFile}}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("'NoneType' object has no attribute 'type'"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("logs"))
                .body("'data'.'logs'", nullValue());
        
        try{
            given().accept("application/json")
                    .contentType("application/json")
                    .body(" { " + 
                        " \"query\": \"  { species  (id : 729,n : 577,z : 478,distinct : true,op : \\\"SUgA\\\",search : \\\"\\\",jsonkey : \\\"cc\\\",order : \\\"EXq\\\",before : \\\"ZYG0\\\",after : \\\"WR_7SC\\\",first : 265,last : 580384031,before : \\\"rM\\\",after : \\\"4dcDT9PFi98PZ\\\",first : 345,last : 685)  {edges{node{n,systems{uniqueId,username,numbers,initialMagmoms,initialCharges,tags,constraints,calculatorParameters,freeEnergy,dipole,magmom,charges,keyValuePairs,natoms,smax,volume,mass,charge,Formula,Cifdata,Trajdata,Pbc,Mtime,Reaction,Facet,DftCode,DftFunctional,numberKeys{pageInfo{hasNextPage,hasPreviousPage}},log{aseId},publication{id,title,journal,number,reactions{chemicalComposition,facet,sites,coverages,products,dftCode,dftFunctional,reactionSystems{aseId}}},reactions{edges{node{id,surfaceComposition,facet,sites,activationEnergy,dftCode,dftFunctional,pubId,Equation},cursor},totalCount},InputFile}},cursor},totalCount}       } \" " + 
                        " } ")
                    .post(baseUrlOfSut);
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_12() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { systems  (calculator : \\\"heR5V\\\",calculatorParameters : \\\"CvK\\\",cell : 0.8944354,charge : 0.020741343,charges : 0.44665635,constraints : \\\"HkcxBVfG_Ip5PO\\\",ctime : 0.19967479,data : \\\"vuvRmxB\\\",dipole : 0.4593171,energy : 0.82752275,fmax : 0.28734946,forces : 0.88251966,freeEnergy : 0.0010589957,id : 285,initialCharges : 0.8235787,initialMagmoms : 0.6393669,keyValuePairs : \\\"79j0\\\",magmom : 0.14200205,magmoms : 0.37942058,mass : 0.45059437,masses : 0.32242757,momenta : 0.4579599,mtime : 0.38255054,natoms : 959,numbers : 549,pbc : 635,positions : 0.51239216,smax : 0.8629725,stress : 0.39126205,tags : 0.36292547,uniqueId : \\\"h7YTIz2elUw4tJM\\\",username : \\\"\\\",volume : 0.993543,distinct : true,op : \\\"GNNBeP0uA\\\",search : \\\"6SVnPuMPy84bSy\\\",jsonkey : \\\"x1JeNXcguHF\\\",order : \\\"Zr2gKa1IeT3sakU\\\",before : \\\"gMpLTCuMy\\\",after : \\\"dHl4p8Y4z4\\\",first : 770,last : 922)  {pageInfo{hasNextPage,hasPreviousPage,startCursor,endCursor},edges{node{id,uniqueId,ctime,username,initialCharges,tags,momenta,calculator,magmom,data,fmax,volume,mass,charge,Cifdata,Pbc,Ctime,Username,Facet,DftFunctional,species{edges{node{z,n}}},textKeys{pageInfo{hasPreviousPage},edges{node{id}}},numberKeys{totalCount},log{aseId,logfile},publication{id,pubId,title,authors,publisher,stime,Stime,reactions{id,surfaceComposition,facet,sites,reactants,reactionEnergy,activationEnergy,dftCode,pubId,textsearch,reactionSystems{name,id}}},reactions{pageInfo{hasNextPage,startCursor,endCursor}}},cursor},totalCount}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Can't find property named \"cursor\" on mapped class System->systems in this Query."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("systems"))
                .body("'data'.'systems'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { node  (id : \\\"Hde_WE1uaew4h8C\\\")  {... on Information {value}... on Species {z,n,{numbers,initialMagmoms,masses,tags,calculator,energy,freeEnergy,magmoms,magmom,charges,keyValuePairs,natoms,fmax,smax,charge,Formula,Cifdata,Pbc,Mtime,Username,Facet,DftCode,textKeys{totalCount},numberKeys{pageInfo{hasNextPage,hasPreviousPage},edges{node{key}},totalCount},InputFile}}... on Reaction {surfaceComposition,facet,reactionEnergy,dftFunctional,username,textsearch,{name,aseId},{ctime,mtime,username,initialMagmoms,initialCharges,masses,momenta,calculator,stress,charges,volume,mass,Cifdata,Trajdata,Pbc,Mtime,Adsorbate,Reaction,Username,Substrate,DftFunctional,keys{pageInfo{hasNextPage,endCursor},totalCount},species{pageInfo{hasNextPage,hasPreviousPage,endCursor},edges{node{z}},totalCount},log{aseId,logfile,Logtext},publication{id,authors,journal,volume,pages,pubtextsearch}}}... on Publication {pubId,title,volume,year,tags,pubtextsearch,Stime,{ctime,username,pbc,tags,momenta,calculator,calculatorParameters,energy,freeEnergy,stress,dipole,charges,keyValuePairs,fmax,smax,Formula,Cifdata,Trajdata,Pbc,Mtime,Adsorbate,Substrate,DftFunctional,keys{edges{node{id}}},textKeys{pageInfo{hasNextPage,startCursor},edges{node{id},cursor}},InputFile}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Syntax Error GraphQL (1:473) Expected Name, found {\n\n1:   { node  (id : \"Hde_WE1uaew4h8C\")  {... on Information {value}... on Species {z,n,{numbers,initialMagmoms,masses,tags,calculator,energy,freeEnergy,magmoms,magmom,charges,keyValuePairs,natoms,fmax,smax,charge,Formula,Cifdata,Pbc,Mtime,Username,Facet,DftCode,textKeys{totalCount},numberKeys{pageInfo{hasNextPage,hasPreviousPage},edges{node{key}},totalCount},InputFile}}... on Reaction {surfaceComposition,facet,reactionEnergy,dftFunctional,username,textsearch,{name,aseId},{ctime,mtime,username,initialMagmoms,initialCharges,masses,momenta,calculator,stress,charges,volume,mass,Cifdata,Trajdata,Pbc,Mtime,Adsorbate,Reaction,Username,Substrate,DftFunctional,keys{pageInfo{hasNextPage,endCursor},totalCount},species{pageInfo{hasNextPage,hasPreviousPage,endCursor},edges{node{z}},totalCount},log{aseId,logfile,Logtext},publication{id,authors,journal,volume,pages,pubtextsearch}}}... on Publication {pubId,title,volume,year,tags,pubtextsearch,Stime,{ctime,username,pbc,tags,momenta,calculator,calculatorParameters,energy,freeEnergy,stress,dipole,charges,keyValuePairs,fmax,smax,Formula,Cifdata,Trajdata,Pbc,Mtime,Adsorbate,Substrate,DftFunctional,keys{edges{node{id}}},textKeys{pageInfo{hasNextPage,startCursor},edges{node{id},cursor}},InputFile}}}       } \n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ^\n"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(473.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { logs  (aseId : \\\"iDTfmFig\\\",logfile : \\\"S\\\",distinct : false,op : \\\"K8UFDcZFXcYm\\\",search : \\\"rLA\\\",jsonkey : \\\"vexHiXRk39MiKF4\\\",order : \\\"ZM\\\",before : \\\"x\\\",after : \\\"SAnKWRn7_ndoDLp\\\",first : 313,last : 141)  {edges{cursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Can't find property named \"cursor\" on mapped class Log->log in this Query."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("logs"))
                .body("'data'.'logs'", nullValue());
        
        try{
            given().accept("application/json")
                    .contentType("application/json")
                    .body(" { " + 
                        " \"query\": \"  { information  (name : \\\"A2MDFxfPb_fPLc\\\",value : \\\"43hlGyJ\\\",distinct : false,op : \\\"2kqar9\\\",search : \\\"gmMo\\\",jsonkey : \\\"yUk44\\\",order : \\\"NqGrK\\\",before : \\\"34M\\\",after : \\\"oSL\\\",first : 523,last : 390)  {pageInfo{hasNextPage,hasPreviousPage},totalCount}       } \" " + 
                        " } ")
                    .post(baseUrlOfSut);
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_13() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { numberKeys  (id : 396,key : \\\"Lli5VHkNFo4CM5OM\\\",value : 0.47431934,distinct : false,op : \\\"pz5ECyV\\\",search : \\\"wvBMXpkBFFJxrv\\\",jsonkey : \\\"A1dk5ABluNCn3\\\",order : \\\"qW3cMp\\\",before : \\\"ZFIhJG9\\\",after : \\\"Smv_SGi\\\",first : 253,last : 673,before : \\\"Hn0unpAz\\\",after : \\\"w_6e\\\",first : 608,last : 422)  {pageInfo{startCursor,endCursor},totalCount}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'message'", containsString("There can only be one argument named \"before\"."))
                .body("'errors'[0].'locations'.size()", equalTo(2))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(172.0))
                .body("'errors'[0].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[1].'column'", numberMatches(232.0))
                .body("'errors'[1].'message'", containsString("There can only be one argument named \"after\"."))
                .body("'errors'[1].'locations'.size()", equalTo(2))
                .body("'errors'[1].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[0].'column'", numberMatches(191.0))
                .body("'errors'[1].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[1].'column'", numberMatches(252.0))
                .body("'errors'[2].'message'", containsString("There can only be one argument named \"first\"."))
                .body("'errors'[2].'locations'.size()", equalTo(2))
                .body("'errors'[2].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[0].'column'", numberMatches(209.0))
                .body("'errors'[2].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[1].'column'", numberMatches(267.0))
                .body("'errors'[3].'message'", containsString("There can only be one argument named \"last\"."))
                .body("'errors'[3].'locations'.size()", equalTo(2))
                .body("'errors'[3].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[0].'column'", numberMatches(221.0))
                .body("'errors'[3].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[1].'column'", numberMatches(279.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { species  (id : -1023557664,n : 63,z : 802,distinct : true,op : \\\"yCiuad3vn\\\",search : \\\"G_ZZW\\\",jsonkey : \\\"lbI1oo56\\\",order : \\\"J82V7TF\\\",before : \\\"\\\",after : \\\"dr989dE9jp\\\",first : 782,last : 109,before : \\\"TCnjdf\\\",after : \\\"O\\\",first : 507,last : 577)  {totalCount}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'message'", containsString("There can only be one argument named \"before\"."))
                .body("'errors'[0].'locations'.size()", equalTo(2))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(136.0))
                .body("'errors'[0].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[1].'column'", numberMatches(192.0))
                .body("'errors'[1].'message'", containsString("There can only be one argument named \"after\"."))
                .body("'errors'[1].'locations'.size()", equalTo(2))
                .body("'errors'[1].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[0].'column'", numberMatches(148.0))
                .body("'errors'[1].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[1].'column'", numberMatches(210.0))
                .body("'errors'[2].'message'", containsString("There can only be one argument named \"first\"."))
                .body("'errors'[2].'locations'.size()", equalTo(2))
                .body("'errors'[2].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[0].'column'", numberMatches(169.0))
                .body("'errors'[2].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[1].'column'", numberMatches(222.0))
                .body("'errors'[3].'message'", containsString("There can only be one argument named \"last\"."))
                .body("'errors'[3].'locations'.size()", equalTo(2))
                .body("'errors'[3].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[0].'column'", numberMatches(181.0))
                .body("'errors'[3].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[1].'column'", numberMatches(234.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { reactionSystems  (aseId : \\\"A9oGR9U1\\\",energyCorrection : 0.39984506,id : 3,name : \\\"7\\\",distinct : true,op : \\\"YgUJQb\\\",search : \\\"VM6EaLBYQC\\\",jsonkey : \\\"p9IRnC2Jvn\\\",order : \\\"tl\\\",before : \\\"u3dcnPtC3OQ\\\",after : \\\"wJVWoUDdo46q\\\",first : 89,last : 262,before : \\\"uAhZ49Ds4nHfiYZG\\\",after : \\\"K\\\",first : 137,last : 307)  {pageInfo{hasNextPage,hasPreviousPage},totalCount}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'message'", containsString("There can only be one argument named \"before\"."))
                .body("'errors'[0].'locations'.size()", equalTo(2))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(178.0))
                .body("'errors'[0].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[1].'column'", numberMatches(246.0))
                .body("'errors'[1].'message'", containsString("There can only be one argument named \"after\"."))
                .body("'errors'[1].'locations'.size()", equalTo(2))
                .body("'errors'[1].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[0].'column'", numberMatches(201.0))
                .body("'errors'[1].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[1].'column'", numberMatches(274.0))
                .body("'errors'[2].'message'", containsString("There can only be one argument named \"first\"."))
                .body("'errors'[2].'locations'.size()", equalTo(2))
                .body("'errors'[2].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[0].'column'", numberMatches(224.0))
                .body("'errors'[2].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[1].'column'", numberMatches(286.0))
                .body("'errors'[3].'message'", containsString("There can only be one argument named \"last\"."))
                .body("'errors'[3].'locations'.size()", equalTo(2))
                .body("'errors'[3].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[0].'column'", numberMatches(235.0))
                .body("'errors'[3].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[1].'column'", numberMatches(298.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { logs  (aseId : \\\"fbSYIMsXtj1btv9C\\\",logfile : \\\"\\\",distinct : true,op : \\\"A33o40uNYr\\\",search : \\\"IIS4L\\\",jsonkey : \\\"eSIK4RRAt\\\",order : \\\"Ra457A0deGIwcF7c\\\",before : \\\"am\\\",after : \\\"vrP5BiWpYLF\\\",first : 600,last : 411)  {pageInfo{hasNextPage,hasPreviousPage},edges{node{logfile,Logtext,systems{id,ctime,mtime,username,numbers,pbc,initialMagmoms,initialCharges,masses,tags,constraints,calculator,freeEnergy,magmoms,keyValuePairs,data,fmax,volume,Trajdata,Ctime,Mtime,Username,Substrate,Facet,DftFunctional,reactionSystems{pageInfo{hasNextPage},edges{node{aseId,id}}},publication{volume,pages,tags,stime,reactions{id,facet,products,reactionEnergy,activationEnergy,dftCode,dftFunctional,username,reactionSystems{name}}}},id},cursor},totalCount}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Can't find property named \"cursor\" on mapped class Log->log in this Query."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("logs"))
                .body("'data'.'logs'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { publications  (authors : \\\"6BjKZXm5zrwb\\\",doi : \\\"iyXrQz\\\",id : 234,journal : \\\"44Nrp\\\",number : \\\"nnVS\\\",pages : \\\"VE\\\",pubId : \\\"fNyKhjkHyz\\\",publisher : \\\"pNP\\\",pubtextsearch : \\\"R\\\",stime : 0.2599035,tags : \\\"u\\\",title : \\\"Ea_JY\\\",volume : \\\"dDPH53\\\",year : 482,distinct : true,op : \\\"ItmRG6WUmhz6bW\\\",search : \\\"YZ9vi\\\",jsonkey : \\\"2q\\\",order : \\\"32KvqTfXG0YJvUJ\\\",before : \\\"8ybNkiF\\\",after : \\\"mZz\\\",first : 86,last : 715)  {edges{cursor},totalCount}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Can't find property named \"cursor\" on mapped class Publication->publication in this Query."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("publications"))
                .body("'data'.'publications'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { information  (name : \\\"TDW_X\\\",value : \\\"bpZII8\\\",distinct : true,op : \\\"7\\\",search : \\\"jwdJcEtX1gYX\\\",jsonkey : \\\"\\\",order : \\\"t\\\",before : \\\"_yM9LyYs9d8m\\\",after : \\\"WJ3ZK3RrH07\\\",first : 255,last : 166)  {edges{node{name,value}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("'NoneType' object has no attribute 'type'"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("information"))
                .body("'data'.'information'", nullValue());
        
        try{
            given().accept("application/json")
                    .contentType("application/json")
                    .body(" { " + 
                        " \"query\": \"  { publications  (authors : \\\"EBhL5HL0GOMLW\\\",doi : \\\"BTb824hdYnTUl0\\\",id : 199,journal : \\\"V0Mss\\\",number : \\\"Q7idT\\\",pages : \\\"Us05lKbL2\\\",pubId : \\\"1LO0u5v5D2q6\\\",publisher : \\\"tNv_oFz0iN\\\",pubtextsearch : \\\"glvycG6is93er\\\",stime : 0.84244925,tags : \\\"ejJ4\\\",title : \\\"waPi7s18O\\\",volume : \\\"H1\\\",year : 314,distinct : true,op : \\\"xp\\\",search : \\\"\\\",jsonkey : \\\"\\\",order : \\\"9w_QMT2Voj\\\",before : \\\"B1GoWVSS0IA\\\",after : \\\"wV8Xj2KrY\\\",first : 577,last : 253)  {pageInfo{hasNextPage}}       } \" " + 
                        " } ")
                    .post(baseUrlOfSut);
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_14() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { information  (name : \\\"TT38FZi\\\",value : \\\"IZoF\\\",distinct : false,op : \\\"lrS\\\",search : \\\"AaR\\\",jsonkey : \\\"edH3wRykdwM8Ol8\\\",order : \\\"R1ymAq9Za2RGE\\\",before : \\\"IuZiZGS4h\\\",after : \\\"13ti\\\",first : 434,last : 177)  {pageInfo{hasNextPage,endCursor},edges{cursor},totalCount}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Can't find property named \"cursor\" on mapped class Information->information in this Query."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("information"))
                .body("'data'.'information'", nullValue());
    }
    
    
    @Test
    public void test_15() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { publications  (authors : \\\"IWQQk\\\",doi : \\\"mh7vHyEwBR\\\",id : 478,journal : \\\"o0S50A\\\",number : \\\"jaS1dOzMXZu3\\\",pages : \\\"rNTWf4RxKj\\\",pubId : \\\"2_cmP\\\",publisher : \\\"r\\\",pubtextsearch : \\\"i8ycZSa6\\\",stime : 0.3179571,tags : \\\"ZpZVLOjUU\\\",title : \\\"6T_XuZ_ctay\\\",volume : \\\"ZZKR4uJfb6B6\\\",year : 347,distinct : false,op : \\\"KQ6maSB\\\",search : \\\"KlFh8SQty8Qi\\\",jsonkey : \\\"uUsirZdW72l\\\",order : \\\"_n\\\",before : \\\"osQ89\\\",after : \\\"prwfCntbm47\\\",first : 816,last : 739)  {pageInfo{hasNextPage,startCursor},edges{node{pubId,title,journal,year,publisher,doi,tags,stime,reactions{id,chemicalComposition,facet,sites,coverages,reactionEnergy,dftFunctional,username,textsearch,reactionSystems{id},systems{id,uniqueId,numbers,masses,tags,constraints,energy,freeEnergy,stress,magmoms,magmom,keyValuePairs,natoms,smax,Formula,Cifdata,Ctime,Reaction,Username,Facet,DftCode,species{pageInfo{endCursor}},reactions{pageInfo{hasNextPage,startCursor},edges{cursor},totalCount}}},systems{id,uniqueId,mtime,numbers,pbc,tags,momenta,calculatorParameters,energy,stress,keyValuePairs,natoms,fmax,smax,Formula,Trajdata,Ctime,Mtime,Reaction,Username,Substrate,Facet,keys{pageInfo{hasPreviousPage,endCursor}},species{pageInfo{hasNextPage,startCursor}},textKeys{totalCount},log{aseId,logfile,id}}}},totalCount}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("'NoneType' object has no attribute 'type'"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("publications"))
                .body("'data'.'publications'", nullValue());
    }
    
    
    @Test
    public void test_16() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { species  (id : 132,n : 433,z : 729,distinct : false,op : \\\"T37c8xJJgPkS3vi\\\",search : \\\"ooHVPgg_yvm6\\\",jsonkey : \\\"KS8LZ_5N5\\\",order : \\\"_vJreYVH4l1\\\",before : \\\"w7XxAn2vNppofv5\\\",after : \\\"j4\\\",first : -33081374,last : 850,before : \\\"iQm36Wtw\\\",after : \\\"s9RyNUG\\\",first : 304,last : 643)  {totalCount}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'message'", containsString("There can only be one argument named \"before\"."))
                .body("'errors'[0].'locations'.size()", equalTo(2))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(148.0))
                .body("'errors'[0].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[1].'column'", numberMatches(217.0))
                .body("'errors'[1].'message'", containsString("There can only be one argument named \"after\"."))
                .body("'errors'[1].'locations'.size()", equalTo(2))
                .body("'errors'[1].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[0].'column'", numberMatches(175.0))
                .body("'errors'[1].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[1].'column'", numberMatches(237.0))
                .body("'errors'[2].'message'", containsString("There can only be one argument named \"first\"."))
                .body("'errors'[2].'locations'.size()", equalTo(2))
                .body("'errors'[2].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[0].'column'", numberMatches(188.0))
                .body("'errors'[2].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[1].'column'", numberMatches(255.0))
                .body("'errors'[3].'message'", containsString("There can only be one argument named \"last\"."))
                .body("'errors'[3].'locations'.size()", equalTo(2))
                .body("'errors'[3].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[0].'column'", numberMatches(206.0))
                .body("'errors'[3].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[1].'column'", numberMatches(267.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { node  (id : \\\"2RqehxkmKipbRHB\\\")  {... on Information {name}... on System {uniqueId,ctime,mtime,numbers,tags,constraints,magmom,smax,Formula,Cifdata,Trajdata,Pbc,{edges{node{name,energyCorrection,aseId}},totalCount},InputFile}... on Key {key}... on TextKeyValue {key}... on Reaction {facet,sites,products,reactionEnergy,dftFunctional,pubId,{id,journal,volume,pages,publisher,doi,stime,systems{mtime,username,numbers,pbc,masses,tags,momenta,calculatorParameters,energy,magmom,keyValuePairs,data,natoms,smax,mass,Cifdata,Trajdata,Ctime,Mtime,Reaction,Username,Facet,keys{pageInfo{hasNextPage},edges{cursor},totalCount},species{pageInfo{hasNextPage,hasPreviousPage,startCursor,endCursor},totalCount},numberKeys{pageInfo{hasNextPage,hasPreviousPage,startCursor},totalCount},log{aseId,logfile,id},InputFile}}}id}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'message'", containsString("Field \"Pbc\" of type \"String\" must not have a sub selection."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(165.0))
                .body("'errors'[1].'message'", containsString("Field \"pubId\" of type \"String\" must not have a sub selection."))
                .body("'errors'[1].'locations'.size()", equalTo(1))
                .body("'errors'[1].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[0].'column'", numberMatches(343.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { reactionSystems  (aseId : \\\"G7CnhfvG82s\\\",energyCorrection : 0.031673014,id : 407,name : \\\"Ct60XRmV\\\",distinct : false,op : \\\"saR0xrEexeey36q\\\",search : \\\"AyGZiC8zIBJajD\\\",jsonkey : \\\"IXXHTFR_X2u8641\\\",order : \\\"uTOqxy6miQ\\\",before : \\\"cYyj1dcc7Pv\\\",after : \\\"1X_\\\",first : 846,last : 534,before : \\\"\\\",after : \\\"cX8eqhhCqknA\\\",first : 960,last : 318)  {edges{node{energyCorrection,reactions{id,reactants,products,dftCode,pubId,textsearch,Equation,publication{journal,number,pages,year,doi,Stime}},systems{id,uniqueId,mtime,username,pbc,initialMagmoms,masses,calculator,calculatorParameters,energy,freeEnergy,dipole,magmoms,natoms,Formula,Cifdata,Trajdata,Pbc,Ctime,Mtime,Adsorbate,DftCode,keys{pageInfo{endCursor},edges{node{id},cursor},totalCount},log{aseId,logfile,Logtext,id},reactions{pageInfo{hasPreviousPage,endCursor},totalCount}}}},totalCount}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'message'", containsString("There can only be one argument named \"before\"."))
                .body("'errors'[0].'locations'.size()", equalTo(2))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(218.0))
                .body("'errors'[0].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[1].'column'", numberMatches(278.0))
                .body("'errors'[1].'message'", containsString("There can only be one argument named \"after\"."))
                .body("'errors'[1].'locations'.size()", equalTo(2))
                .body("'errors'[1].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[0].'column'", numberMatches(241.0))
                .body("'errors'[1].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[1].'column'", numberMatches(290.0))
                .body("'errors'[2].'message'", containsString("There can only be one argument named \"first\"."))
                .body("'errors'[2].'locations'.size()", equalTo(2))
                .body("'errors'[2].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[0].'column'", numberMatches(255.0))
                .body("'errors'[2].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[1].'column'", numberMatches(313.0))
                .body("'errors'[3].'message'", containsString("There can only be one argument named \"last\"."))
                .body("'errors'[3].'locations'.size()", equalTo(2))
                .body("'errors'[3].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[0].'column'", numberMatches(267.0))
                .body("'errors'[3].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[1].'column'", numberMatches(325.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { reactionSystems  (aseId : \\\"h3wVRO\\\",energyCorrection : 0.7793648,id : 461,name : \\\"JSol7goZ9lZgqRFm\\\",distinct : false,op : \\\"kOcgzWwtj3Zj\\\",search : \\\"CjI0I\\\",jsonkey : \\\"ZcdQzbt\\\",order : \\\"kGqw9C\\\",before : \\\"6A109\\\",after : \\\"TxAYBzA2Au\\\",first : 707,last : 30,before : \\\"EqjyTjLTy0cgcGdR\\\",after : \\\"qHSAaeevRd\\\",first : 905,last : 992)  {edges{cursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'message'", containsString("There can only be one argument named \"before\"."))
                .body("'errors'[0].'locations'.size()", equalTo(2))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(195.0))
                .body("'errors'[0].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[1].'column'", numberMatches(255.0))
                .body("'errors'[1].'message'", containsString("There can only be one argument named \"after\"."))
                .body("'errors'[1].'locations'.size()", equalTo(2))
                .body("'errors'[1].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[0].'column'", numberMatches(212.0))
                .body("'errors'[1].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[1].'column'", numberMatches(283.0))
                .body("'errors'[2].'message'", containsString("There can only be one argument named \"first\"."))
                .body("'errors'[2].'locations'.size()", equalTo(2))
                .body("'errors'[2].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[0].'column'", numberMatches(233.0))
                .body("'errors'[2].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[1].'column'", numberMatches(304.0))
                .body("'errors'[3].'message'", containsString("There can only be one argument named \"last\"."))
                .body("'errors'[3].'locations'.size()", equalTo(2))
                .body("'errors'[3].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[0].'column'", numberMatches(245.0))
                .body("'errors'[3].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[1].'column'", numberMatches(316.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { textKeys  (id : 956,key : \\\"axuvMCuj1QIox_qU\\\",value : \\\"4Ao9\\\",distinct : true,op : \\\"rNJRAl\\\",search : \\\"\\\",jsonkey : \\\"8ai\\\",order : \\\"VZ6J5k\\\",before : \\\"lzKnxkViCW4sbMK\\\",after : \\\"f8x1\\\",first : 899,last : 192,before : \\\"96xygv\\\",after : \\\"e2tJZfGB\\\",first : 274,last : 857)  {pageInfo{hasNextPage,hasPreviousPage},edges{node{id,value}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'message'", containsString("There can only be one argument named \"before\"."))
                .body("'errors'[0].'locations'.size()", equalTo(2))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(140.0))
                .body("'errors'[0].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[1].'column'", numberMatches(205.0))
                .body("'errors'[1].'message'", containsString("There can only be one argument named \"after\"."))
                .body("'errors'[1].'locations'.size()", equalTo(2))
                .body("'errors'[1].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[0].'column'", numberMatches(167.0))
                .body("'errors'[1].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[1].'column'", numberMatches(223.0))
                .body("'errors'[2].'message'", containsString("There can only be one argument named \"first\"."))
                .body("'errors'[2].'locations'.size()", equalTo(2))
                .body("'errors'[2].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[0].'column'", numberMatches(182.0))
                .body("'errors'[2].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[1].'column'", numberMatches(242.0))
                .body("'errors'[3].'message'", containsString("There can only be one argument named \"last\"."))
                .body("'errors'[3].'locations'.size()", equalTo(2))
                .body("'errors'[3].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[0].'column'", numberMatches(194.0))
                .body("'errors'[3].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[1].'column'", numberMatches(254.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { reactionSystems  (aseId : \\\"ziz8LIn\\\",energyCorrection : 0.9677975,id : 340,name : \\\"S6\\\",distinct : true,op : \\\"1RuIt\\\",search : \\\"meHSxddbtz\\\",jsonkey : \\\"FkVBWmoKTx\\\",order : \\\"GPEuTiL1Eb0dDTHA\\\",before : \\\"6K7Ma8XU\\\",after : \\\"SQccnpemvpBFc6Sf\\\",first : 239,last : 465,before : \\\"SWXuIjMo\\\",after : \\\"EAbCbSyxa9JC4\\\",first : 958,last : 986)  {pageInfo{hasPreviousPage,startCursor,endCursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'message'", containsString("There can only be one argument named \"before\"."))
                .body("'errors'[0].'locations'.size()", equalTo(2))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(192.0))
                .body("'errors'[0].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[1].'column'", numberMatches(262.0))
                .body("'errors'[1].'message'", containsString("There can only be one argument named \"after\"."))
                .body("'errors'[1].'locations'.size()", equalTo(2))
                .body("'errors'[1].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[0].'column'", numberMatches(212.0))
                .body("'errors'[1].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[1].'column'", numberMatches(282.0))
                .body("'errors'[2].'message'", containsString("There can only be one argument named \"first\"."))
                .body("'errors'[2].'locations'.size()", equalTo(2))
                .body("'errors'[2].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[0].'column'", numberMatches(239.0))
                .body("'errors'[2].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[1].'column'", numberMatches(306.0))
                .body("'errors'[3].'message'", containsString("There can only be one argument named \"last\"."))
                .body("'errors'[3].'locations'.size()", equalTo(2))
                .body("'errors'[3].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[0].'column'", numberMatches(251.0))
                .body("'errors'[3].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[1].'column'", numberMatches(318.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { information  (name : \\\"5YBcL_1\\\",value : \\\"IbdyAryw_\\\",distinct : true,op : \\\"wKNocXINkw\\\",search : \\\"XbsmBH\\\",jsonkey : \\\"lxcL\\\",order : \\\"qbXYJYSl8\\\",before : \\\"GylNJusm3nh\\\",after : \\\"gBX\\\",first : 334,last : 347)  {pageInfo{hasPreviousPage,startCursor,endCursor},edges{node{value}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("'NoneType' object has no attribute 'type'"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("information"))
                .body("'data'.'information'", nullValue());
    }
    
    
    @Test
    public void test_17() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { key  (id : 597,key : \\\"zjsOAu_gjhTSfG\\\",distinct : false,op : \\\"jflF5\\\",search : \\\"uITot\\\",jsonkey : \\\"FV0Q23\\\",order : \\\"\\\",before : \\\"XULZGaZHGJJMte7x\\\",after : \\\"J3JAg3tEa6j\\\",first : 722,last : 275)  {edges{node{id}},totalCount}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("'NoneType' object has no attribute 'type'"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("key"))
                .body("'data'.'key'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { species  (id : 120,n : 945,z : 528,distinct : true,op : \\\"sxIceOWfyN2\\\",search : \\\"Dgxei859MZQEHj72\\\",jsonkey : \\\"H\\\",order : \\\"Os2\\\",before : \\\"oPN0hcpeo\\\",after : \\\"0l3Mh\\\",first : 146,last : 693,before : \\\"OaRueCC8Hek\\\",after : \\\"5Ud3s4YGPSpCh\\\",first : 642,last : 511)  {pageInfo{hasNextPage,endCursor},edges{node{systems{mtime,username,pbc,masses,tags,momenta,calculator,energy,freeEnergy,stress,dipole,magmoms,magmom,charges,keyValuePairs,data,smax,Trajdata,Pbc,Ctime,Adsorbate,Substrate,DftCode,textKeys{edges{node{id},cursor}},log{aseId,Logtext},reactions{edges{node{chemicalComposition,sites,reactants,dftCode,dftFunctional,Equation}}},InputFile}}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'message'", containsString("There can only be one argument named \"before\"."))
                .body("'errors'[0].'locations'.size()", equalTo(2))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(131.0))
                .body("'errors'[0].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[1].'column'", numberMatches(191.0))
                .body("'errors'[1].'message'", containsString("There can only be one argument named \"after\"."))
                .body("'errors'[1].'locations'.size()", equalTo(2))
                .body("'errors'[1].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[0].'column'", numberMatches(152.0))
                .body("'errors'[1].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[1].'column'", numberMatches(214.0))
                .body("'errors'[2].'message'", containsString("There can only be one argument named \"first\"."))
                .body("'errors'[2].'locations'.size()", equalTo(2))
                .body("'errors'[2].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[0].'column'", numberMatches(168.0))
                .body("'errors'[2].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[1].'column'", numberMatches(238.0))
                .body("'errors'[3].'message'", containsString("There can only be one argument named \"last\"."))
                .body("'errors'[3].'locations'.size()", equalTo(2))
                .body("'errors'[3].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[0].'column'", numberMatches(180.0))
                .body("'errors'[3].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[1].'column'", numberMatches(250.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { key  (id : 586,key : \\\"Dsk_u63eJ2gRA9a\\\",distinct : false,op : \\\"\\\",search : \\\"5lo\\\",jsonkey : \\\"am\\\",order : \\\"QAkiSkrg7vG\\\",before : \\\"ezGpJBLy4m2_VxCV\\\",after : \\\"0XYA5Nnv6Fa9qr\\\",first : 501,last : 835)  {edges{node{key,systems{username,masses,tags,constraints,magmoms,magmom,charges,volume,charge,Cifdata,Ctime,Mtime,Username,Facet,DftFunctional,species{totalCount},reactionSystems{pageInfo{startCursor},edges{node{name,energyCorrection,aseId,reactions{surfaceComposition,facet,sites,coverages,reactionEnergy,activationEnergy,username,pubId,publication{id,authors,year,publisher,doi,pubtextsearch,stime}}}},totalCount},log{logfile,id},reactions{pageInfo{hasNextPage,hasPreviousPage,startCursor},totalCount},InputFile}}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("'NoneType' object has no attribute 'type'"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("key"))
                .body("'data'.'key'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { textKeys  (id : 615,key : \\\"GVy79LSEnoEBsx\\\",value : \\\"0ccQ0kwY7NDwSpV\\\",distinct : false,op : \\\"9VnlDb7_QET8ZVT\\\",search : \\\"mnCayq3A61\\\",jsonkey : \\\"wyPMXd58HNLR\\\",order : \\\"ueLiq\\\",before : \\\"4DTZhPFsTLIHA4\\\",after : \\\"cuuxO\\\",first : 995,last : 420,before : \\\"R5A7rrzgq9\\\",after : \\\"fleGK\\\",first : 670,last : 852)  {pageInfo{hasNextPage},edges{node{value,systems{id,uniqueId,ctime,mtime,username,initialMagmoms,tags,momenta,calculatorParameters,freeEnergy,stress,dipole,charges,keyValuePairs,data,smax,volume,mass,charge,Formula,Ctime,Facet,DftCode,DftFunctional,keys{pageInfo{endCursor}}}}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'message'", containsString("There can only be one argument named \"before\"."))
                .body("'errors'[0].'locations'.size()", equalTo(2))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(177.0))
                .body("'errors'[0].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[1].'column'", numberMatches(242.0))
                .body("'errors'[1].'message'", containsString("There can only be one argument named \"after\"."))
                .body("'errors'[1].'locations'.size()", equalTo(2))
                .body("'errors'[1].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[0].'column'", numberMatches(203.0))
                .body("'errors'[1].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[1].'column'", numberMatches(264.0))
                .body("'errors'[2].'message'", containsString("There can only be one argument named \"first\"."))
                .body("'errors'[2].'locations'.size()", equalTo(2))
                .body("'errors'[2].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[0].'column'", numberMatches(219.0))
                .body("'errors'[2].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[1].'column'", numberMatches(280.0))
                .body("'errors'[3].'message'", containsString("There can only be one argument named \"last\"."))
                .body("'errors'[3].'locations'.size()", equalTo(2))
                .body("'errors'[3].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[0].'column'", numberMatches(231.0))
                .body("'errors'[3].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[1].'column'", numberMatches(292.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { node  (id : \\\"9LZIXUWNj2\\\")  {... on Information {name}... on System {numbers,initialMagmoms,momenta,calculator,stress,fmax,smax,volume,Formula,Trajdata,Pbc,Ctime,Adsorbate,Substrate,Facet,DftCode,{pageInfo{hasNextPage,startCursor}},{edges{node{id,key}}},{edges{node{id,key,value},cursor},totalCount},{edges{cursor}},InputFile}... on TextKeyValue {key,{uniqueId,mtime,numbers,pbc,initialMagmoms,constraints,keyValuePairs,natoms,fmax,volume,mass,charge,Cifdata,Pbc,Mtime,Adsorbate,Reaction,Username,DftFunctional,keys{pageInfo{hasPreviousPage}},species{edges{node{id,z},cursor}},textKeys{pageInfo{hasNextPage,hasPreviousPage,endCursor},totalCount},reactionSystems{edges{node{energyCorrection,id,reactions{id,chemicalComposition,surfaceComposition,sites,coverages,reactants,reactionEnergy,dftFunctional,pubId,textsearch,Equation}}}}}}... on Log {aseId}id}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Syntax Error GraphQL (1:236) Expected Name, found {\n\n1:   { node  (id : \"9LZIXUWNj2\")  {... on Information {name}... on System {numbers,initialMagmoms,momenta,calculator,stress,fmax,smax,volume,Formula,Trajdata,Pbc,Ctime,Adsorbate,Substrate,Facet,DftCode,{pageInfo{hasNextPage,startCursor}},{edges{node{id,key}}},{edges{node{id,key,value},cursor},totalCount},{edges{cursor}},InputFile}... on TextKeyValue {key,{uniqueId,mtime,numbers,pbc,initialMagmoms,constraints,keyValuePairs,natoms,fmax,volume,mass,charge,Cifdata,Pbc,Mtime,Adsorbate,Reaction,Username,DftFunctional,keys{pageInfo{hasPreviousPage}},species{edges{node{id,z},cursor}},textKeys{pageInfo{hasNextPage,hasPreviousPage,endCursor},totalCount},reactionSystems{edges{node{energyCorrection,id,reactions{id,chemicalComposition,surfaceComposition,sites,coverages,reactants,reactionEnergy,dftFunctional,pubId,textsearch,Equation}}}}}}... on Log {aseId}id}       } \n                                                                                                                                                                                                                                              ^\n"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(236.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { key  (id : 329,key : \\\"RRIenQihJwQzN864\\\",distinct : false,op : \\\"50rF\\\",search : \\\"1xXS1p0V\\\",jsonkey : \\\"l3FJVwRIt3il2jW4\\\",order : \\\"1AlX\\\",before : \\\"O6bu9mpitDnAm\\\",after : \\\"G\\\",first : 515,last : 9)  {pageInfo{hasNextPage,hasPreviousPage,startCursor,endCursor},edges{cursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Can't find property named \"cursor\" on mapped class Key->keys in this Query."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("key"))
                .body("'data'.'key'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { node  (id : \\\"RJgewZSHZVTL\\\")  {... on Information {value}... on TextKeyValue {key}... on NumberKeyValue {{id,mtime,username,numbers,tags,calculatorParameters,freeEnergy,stress,dipole,magmoms,data,natoms,fmax,smax,volume,mass,Cifdata,Trajdata,Ctime,Substrate,DftFunctional,textKeys{edges{node{id,key,value}},totalCount},publication{id,pubId,number,pages,year,publisher,tags,pubtextsearch,stime,Stime},reactions{edges{node{id,surfaceComposition,facet,sites,products,Equation,reactionSystems{name,id}},cursor},totalCount}}}... on ReactionSystem {aseId,{id,surfaceComposition,sites,coverages,activationEnergy,dftCode,Equation,systems{id,uniqueId,numbers,pbc,initialCharges,masses,tags,momenta,calculator,calculatorParameters,energy,magmoms,keyValuePairs,data,natoms,smax,mass,Cifdata,Pbc,Ctime,Mtime,Adsorbate,Username,Substrate,DftFunctional,keys{totalCount},reactionSystems{totalCount},publication{pubId,title,authors,journal,volume,pages,stime},InputFile},publication{authors,journal,year,doi,systems{ctime,mtime,initialMagmoms,initialCharges,masses,tags,energy,stress,magmoms,natoms,fmax,mass,Pbc,Ctime,Substrate,Facet,keys{pageInfo{hasPreviousPage,startCursor,endCursor}},species{pageInfo{startCursor,endCursor}},numberKeys{pageInfo{hasNextPage,hasPreviousPage,startCursor}},reactionSystems{edges{cursor},totalCount},reactions{pageInfo{hasPreviousPage,endCursor}}}}}}... on Reaction {sites,reactants,dftFunctional,pubId,textsearch,Equation,{name,energyCorrection,aseId,id},{id,masses,tags,calculatorParameters,energy,dipole,charges,natoms,fmax,smax,volume,mass,charge,Pbc,Adsorbate,Reaction,Username,Substrate,DftCode,species{totalCount},numberKeys{pageInfo{hasPreviousPage,startCursor},edges{node{key},cursor}},log{logfile,Logtext,id},InputFile}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Syntax Error GraphQL (1:109) Expected Name, found {\n\n1:   { node  (id : \"RJgewZSHZVTL\")  {... on Information {value}... on TextKeyValue {key}... on NumberKeyValue {{id,mtime,username,numbers,tags,calculatorParameters,freeEnergy,stress,dipole,magmoms,data,natoms,fmax,smax,volume,mass,Cifdata,Trajdata,Ctime,Substrate,DftFunctional,textKeys{edges{node{id,key,value}},totalCount},publication{id,pubId,number,pages,year,publisher,tags,pubtextsearch,stime,Stime},reactions{edges{node{id,surfaceComposition,facet,sites,products,Equation,reactionSystems{name,id}},cursor},totalCount}}}... on ReactionSystem {aseId,{id,surfaceComposition,sites,coverages,activationEnergy,dftCode,Equation,systems{id,uniqueId,numbers,pbc,initialCharges,masses,tags,momenta,calculator,calculatorParameters,energy,magmoms,keyValuePairs,data,natoms,smax,mass,Cifdata,Pbc,Ctime,Mtime,Adsorbate,Username,Substrate,DftFunctional,keys{totalCount},reactionSystems{totalCount},publication{pubId,title,authors,journal,volume,pages,stime},InputFile},publication{authors,journal,year,doi,systems{ctime,mtime,initialMagmoms,initialCharges,masses,tags,energy,stress,magmoms,natoms,fmax,mass,Pbc,Ctime,Substrate,Facet,keys{pageInfo{hasPreviousPage,startCursor,endCursor}},species{pageInfo{startCursor,endCursor}},numberKeys{pageInfo{hasNextPage,hasPreviousPage,startCursor}},reactionSystems{edges{cursor},totalCount},reactions{pageInfo{hasPreviousPage,endCursor}}}}}}... on Reaction {sites,reactants,dftFunctional,pubId,textsearch,Equation,{name,energyCorrection,aseId,id},{id,masses,tags,calculatorParameters,energy,dipole,charges,natoms,fmax,smax,volume,mass,charge,Pbc,Adsorbate,Reaction,Username,Substrate,DftCode,species{totalCount},numberKeys{pageInfo{hasPreviousPage,startCursor},edges{node{key},cursor}},log{logfile,Logtext,id},InputFile}}}       } \n                                                                                                               ^\n"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(109.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { numberKeys  (id : 135,key : \\\"VAOi_fzcMYL\\\",value : 0.059669077,distinct : false,op : \\\"iPsrichw9\\\",search : \\\"84U1I9IDx\\\",jsonkey : \\\"wpSTZB5DeyU\\\",order : \\\"Mqpg4HEkJ2wouf\\\",before : \\\"ax28xKj\\\",after : \\\"r\\\",first : 208,last : 959,before : \\\"T1g6z4qcxN2H\\\",after : \\\"ph8pApS\\\",first : 712,last : 998)  {pageInfo{endCursor},edges{cursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'message'", containsString("There can only be one argument named \"before\"."))
                .body("'errors'[0].'locations'.size()", equalTo(2))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(171.0))
                .body("'errors'[0].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[1].'column'", numberMatches(225.0))
                .body("'errors'[1].'message'", containsString("There can only be one argument named \"after\"."))
                .body("'errors'[1].'locations'.size()", equalTo(2))
                .body("'errors'[1].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[0].'column'", numberMatches(190.0))
                .body("'errors'[1].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[1].'column'", numberMatches(249.0))
                .body("'errors'[2].'message'", containsString("There can only be one argument named \"first\"."))
                .body("'errors'[2].'locations'.size()", equalTo(2))
                .body("'errors'[2].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[0].'column'", numberMatches(202.0))
                .body("'errors'[2].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[1].'column'", numberMatches(267.0))
                .body("'errors'[3].'message'", containsString("There can only be one argument named \"last\"."))
                .body("'errors'[3].'locations'.size()", equalTo(2))
                .body("'errors'[3].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[0].'column'", numberMatches(214.0))
                .body("'errors'[3].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[1].'column'", numberMatches(279.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { reactions  (activationEnergy : 0.12233579,chemicalComposition : \\\"dTVmYPIUgv_BgHA\\\",coverages : \\\"nbKB3e9PUh78g97\\\",dftCode : \\\"wkXSWUJOOa\\\",dftFunctional : \\\"Vqh\\\",facet : \\\"zX1kQFZa\\\",id : 486,products : \\\"ZzVXpduaW4P4\\\",pubId : \\\"_Ml5NRa6uEjsRlW\\\",reactants : \\\"rJwakh6keoxz2Lf\\\",reactionEnergy : 0.5129642,sites : \\\"WnKqjBLsjK\\\",surfaceComposition : \\\"4sA03doNIBbQ2Pyy\\\",textsearch : \\\"A1IbJnXj\\\",username : \\\"UpT\\\",distinct : false,op : \\\"5mgt4B0G6uJ\\\",search : \\\"no53d5NPv3d\\\",jsonkey : \\\"izVD\\\",order : \\\"vTE_LzPpl\\\",before : \\\"IX4JD0fZVLh4EyUS\\\",after : \\\"MrsSB91IXb\\\",first : 961,last : 728,before : \\\"hzccrf\\\",after : \\\"U4O1ZaJRbmF1\\\",first : 701,last : 238)  {pageInfo{hasNextPage,hasPreviousPage,endCursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'message'", containsString("There can only be one argument named \"before\"."))
                .body("'errors'[0].'locations'.size()", equalTo(2))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(497.0))
                .body("'errors'[0].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[1].'column'", numberMatches(569.0))
                .body("'errors'[1].'message'", containsString("There can only be one argument named \"after\"."))
                .body("'errors'[1].'locations'.size()", equalTo(2))
                .body("'errors'[1].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[0].'column'", numberMatches(525.0))
                .body("'errors'[1].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[1].'column'", numberMatches(587.0))
                .body("'errors'[2].'message'", containsString("There can only be one argument named \"first\"."))
                .body("'errors'[2].'locations'.size()", equalTo(2))
                .body("'errors'[2].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[0].'column'", numberMatches(546.0))
                .body("'errors'[2].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[1].'column'", numberMatches(610.0))
                .body("'errors'[3].'message'", containsString("There can only be one argument named \"last\"."))
                .body("'errors'[3].'locations'.size()", equalTo(2))
                .body("'errors'[3].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[0].'column'", numberMatches(558.0))
                .body("'errors'[3].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[1].'column'", numberMatches(622.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { node  (id : \\\"uV0Fd9rR1PMA0ew9\\\")  {... on System {uniqueId,ctime,numbers,pbc,initialMagmoms,initialCharges,momenta,constraints,calculatorParameters,energy,stress,dipole,magmoms,keyValuePairs,fmax,smax,mass,Ctime,Adsorbate,Reaction,Username,Substrate,DftFunctional,{pageInfo{startCursor},edges{node{id,key},cursor}},{pageInfo{hasNextPage,hasPreviousPage,startCursor,endCursor},edges{cursor},totalCount},{pageInfo{endCursor},edges{node{id,value}}},{pubId,number,year,publisher,doi,pubtextsearch,Stime},{pageInfo{hasNextPage,hasPreviousPage,startCursor},edges{node{id,surfaceComposition,facet,sites,coverages,products,reactionEnergy,activationEnergy,dftCode,dftFunctional,Equation},cursor}}}... on Key {{id,ctime,numbers,masses,tags,momenta,energy,stress,magmoms,magmom,charges,keyValuePairs,data,fmax,mass,charge,Formula,Trajdata,Ctime,Mtime,Adsorbate,Reaction,Facet,keys{pageInfo{hasNextPage,hasPreviousPage,startCursor,endCursor},edges{cursor},totalCount},numberKeys{pageInfo{hasNextPage,hasPreviousPage}},reactionSystems{pageInfo{hasNextPage,hasPreviousPage,startCursor,endCursor},edges{node{name,energyCorrection,id,reactions{sites,reactants,activationEnergy,dftCode,dftFunctional,pubId,textsearch}}},totalCount},publication{id,authors,journal,number,year,pubtextsearch,stime},reactions{edges{node{id,surfaceComposition,coverages,reactants,reactionEnergy,username,textsearch,Equation}},totalCount},InputFile}}... on Species {{mtime,numbers,pbc,initialMagmoms,tags,constraints,calculatorParameters,freeEnergy,stress,dipole,charges,keyValuePairs,data,natoms,smax,Formula,Trajdata,Substrate,Facet,DftCode,keys{pageInfo{hasNextPage,endCursor}},publication{pubId,title,authors,volume,publisher},reactions{pageInfo{hasNextPage,hasPreviousPage}}}}... on TextKeyValue {{id,mtime,username,constraints,calculator,calculatorParameters,energy,freeEnergy,keyValuePairs,data,natoms,fmax,mass,charge,Formula,Ctime,Adsorbate,Username,Facet,DftCode,DftFunctional,keys{pageInfo{hasPreviousPage,endCursor},edges{node{id},cursor}},species{totalCount},numberKeys{pageInfo{hasNextPage,endCursor}},log{Logtext,id},publication{id,pubId,authors,journal,year,tags,pubtextsearch,stime,reactions{chemicalComposition,facet,coverages,dftCode,pubId,reactionSystems{name,energyCorrection,aseId,id}}}}}... on Publication {authors,journal,volume,number,publisher,doi,tags,pubtextsearch,stime,{surfaceComposition,coverages,reactants,reactionEnergy,activationEnergy,textsearch,Equation},{id,uniqueId,ctime,mtime,masses,constraints,calculator,stress,magmoms,charges,keyValuePairs,data,natoms,mass,charge,Formula,Cifdata,Ctime,Mtime,Username,Substrate,Facet,textKeys{pageInfo{hasNextPage,hasPreviousPage,startCursor},edges{cursor},totalCount},reactionSystems{totalCount},log{aseId,id},InputFile}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Syntax Error GraphQL (1:319) Expected Name, found {\n\n1:   { node  (id : \"uV0Fd9rR1PMA0ew9\")  {... on System {uniqueId,ctime,numbers,pbc,initialMagmoms,initialCharges,momenta,constraints,calculatorParameters,energy,stress,dipole,magmoms,keyValuePairs,fmax,smax,mass,Ctime,Adsorbate,Reaction,Username,Substrate,DftFunctional,{pageInfo{startCursor},edges{node{id,key},cursor}},{pageInfo{hasNextPage,hasPreviousPage,startCursor,endCursor},edges{cursor},totalCount},{pageInfo{endCursor},edges{node{id,value}}},{pubId,number,year,publisher,doi,pubtextsearch,Stime},{pageInfo{hasNextPage,hasPreviousPage,startCursor},edges{node{id,surfaceComposition,facet,sites,coverages,products,reactionEnergy,activationEnergy,dftCode,dftFunctional,Equation},cursor}}}... on Key {{id,ctime,numbers,masses,tags,momenta,energy,stress,magmoms,magmom,charges,keyValuePairs,data,fmax,mass,charge,Formula,Trajdata,Ctime,Mtime,Adsorbate,Reaction,Facet,keys{pageInfo{hasNextPage,hasPreviousPage,startCursor,endCursor},edges{cursor},totalCount},numberKeys{pageInfo{hasNextPage,hasPreviousPage}},reactionSystems{pageInfo{hasNextPage,hasPreviousPage,startCursor,endCursor},edges{node{name,energyCorrection,id,reactions{sites,reactants,activationEnergy,dftCode,dftFunctional,pubId,textsearch}}},totalCount},publication{id,authors,journal,number,year,pubtextsearch,stime},reactions{edges{node{id,surfaceComposition,coverages,reactants,reactionEnergy,username,textsearch,Equation}},totalCount},InputFile}}... on Species {{mtime,numbers,pbc,initialMagmoms,tags,constraints,calculatorParameters,freeEnergy,stress,dipole,charges,keyValuePairs,data,natoms,smax,Formula,Trajdata,Substrate,Facet,DftCode,keys{pageInfo{hasNextPage,endCursor}},publication{pubId,title,authors,volume,publisher},reactions{pageInfo{hasNextPage,hasPreviousPage}}}}... on TextKeyValue {{id,mtime,username,constraints,calculator,calculatorParameters,energy,freeEnergy,keyValuePairs,data,natoms,fmax,mass,charge,Formula,Ctime,Adsorbate,Username,Facet,DftCode,DftFunctional,keys{pageInfo{hasPreviousPage,endCursor},edges{node{id},cursor}},species{totalCount},numberKeys{pageInfo{hasNextPage,endCursor}},log{Logtext,id},publication{id,pubId,authors,journal,year,tags,pubtextsearch,stime,reactions{chemicalComposition,facet,coverages,dftCode,pubId,reactionSystems{name,energyCorrection,aseId,id}}}}}... on Publication {authors,journal,volume,number,publisher,doi,tags,pubtextsearch,stime,{surfaceComposition,coverages,reactants,reactionEnergy,activationEnergy,textsearch,Equation},{id,uniqueId,ctime,mtime,masses,constraints,calculator,stress,magmoms,charges,keyValuePairs,data,natoms,mass,charge,Formula,Cifdata,Ctime,Mtime,Username,Substrate,Facet,textKeys{pageInfo{hasNextPage,hasPreviousPage,startCursor},edges{cursor},totalCount},reactionSystems{totalCount},log{aseId,id},InputFile}}}       } \n                                                                                                                                                                                                                                                                                                                                 ^\n"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(319.0));
    }
    
    
    @Test
    public void test_18() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { reactions  (activationEnergy : 0.34769106,chemicalComposition : \\\"7zzWLEHvJ\\\",coverages : \\\"pYEEeSAwtXJ\\\",dftCode : \\\"77\\\",dftFunctional : \\\"TJ\\\",facet : \\\"U4BTVuN\\\",id : 564,products : \\\"xPW\\\",pubId : \\\"Klh5\\\",reactants : \\\"6de_3UE1vna\\\",reactionEnergy : 0.4443705,sites : \\\"ERW7bDi\\\",surfaceComposition : \\\"O_D7k\\\",textsearch : \\\"WFL_Du7\\\",username : \\\"aYpCqv_P\\\",distinct : false,op : \\\"m\\\",search : \\\"TdbNL3h5q\\\",jsonkey : \\\"mWsLRy0MDxJ\\\",order : \\\"u7zuBTEe\\\",before : \\\"Gvk7w\\\",after : \\\"fl7PLRYmXhMJRA\\\",first : 10,last : 639,before : \\\"VoBYNx0L2c4\\\",after : \\\"im5tQi6m\\\",first : 196,last : 262)  {edges{node{surfaceComposition,sites,reactants,reactionEnergy,activationEnergy,username,Equation,publication{title,authors,year,stime,Stime}}},totalCount}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'message'", containsString("There can only be one argument named \"before\"."))
                .body("'errors'[0].'locations'.size()", equalTo(2))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(437.0))
                .body("'errors'[0].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[1].'column'", numberMatches(501.0))
                .body("'errors'[1].'message'", containsString("There can only be one argument named \"after\"."))
                .body("'errors'[1].'locations'.size()", equalTo(2))
                .body("'errors'[1].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[0].'column'", numberMatches(454.0))
                .body("'errors'[1].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[1].'column'", numberMatches(524.0))
                .body("'errors'[2].'message'", containsString("There can only be one argument named \"first\"."))
                .body("'errors'[2].'locations'.size()", equalTo(2))
                .body("'errors'[2].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[0].'column'", numberMatches(479.0))
                .body("'errors'[2].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[1].'column'", numberMatches(543.0))
                .body("'errors'[3].'message'", containsString("There can only be one argument named \"last\"."))
                .body("'errors'[3].'locations'.size()", equalTo(2))
                .body("'errors'[3].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[0].'column'", numberMatches(490.0))
                .body("'errors'[3].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[1].'column'", numberMatches(555.0));
    }
    
    
    @Test
    public void test_19() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { reactions  (activationEnergy : 0.87162805,chemicalComposition : \\\"rNeEw6Om7OM\\\",coverages : \\\"oN4hfji8ygyz\\\",dftCode : \\\"NCQE5Q58TCtHm\\\",dftFunctional : \\\"5bpEB2XdPObng5Hq\\\",facet : \\\"B\\\",id : 769,products : \\\"upVlhKPpODYg05_\\\",pubId : \\\"L\\\",reactants : \\\"e8VXjdZQ8\\\",reactionEnergy : 0.009023845,sites : \\\"0bMvt6ZgsWxT8Rb\\\",surfaceComposition : \\\"dHaCSHTzSB33rSEV\\\",textsearch : \\\"lhDPik47SewgEB\\\",username : \\\"rV6tPwc\\\",distinct : false,op : \\\"\\\",search : \\\"9cnC\\\",jsonkey : \\\"oRdglHA\\\",order : \\\"fwVJm1dA9DyDTQhz\\\",before : \\\"WLhXhxNOg39Z\\\",after : \\\"XkD1\\\",first : 530,last : 196,before : \\\"bRs1zmqjHK7kve\\\",after : \\\"7Xes0sNaRU0lK\\\",first : 357,last : 602)  {pageInfo{startCursor},edges{node{surfaceComposition,sites,reactants,reactionEnergy,activationEnergy,systems{id,uniqueId,mtime,numbers,masses,momenta,calculatorParameters,stress,dipole,magmom,data,natoms,charge,Formula,Cifdata,Trajdata,Pbc,Ctime,Mtime,Reaction,Facet,DftFunctional,species{pageInfo{hasNextPage},totalCount},textKeys{edges{node{id}},totalCount},numberKeys{edges{node{id,key,value}},totalCount},log{aseId}}},cursor},totalCount}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'message'", containsString("There can only be one argument named \"before\"."))
                .body("'errors'[0].'locations'.size()", equalTo(2))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(491.0))
                .body("'errors'[0].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[1].'column'", numberMatches(553.0))
                .body("'errors'[1].'message'", containsString("There can only be one argument named \"after\"."))
                .body("'errors'[1].'locations'.size()", equalTo(2))
                .body("'errors'[1].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[0].'column'", numberMatches(515.0))
                .body("'errors'[1].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[1].'column'", numberMatches(579.0))
                .body("'errors'[2].'message'", containsString("There can only be one argument named \"first\"."))
                .body("'errors'[2].'locations'.size()", equalTo(2))
                .body("'errors'[2].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[0].'column'", numberMatches(530.0))
                .body("'errors'[2].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[1].'column'", numberMatches(603.0))
                .body("'errors'[3].'message'", containsString("There can only be one argument named \"last\"."))
                .body("'errors'[3].'locations'.size()", equalTo(2))
                .body("'errors'[3].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[0].'column'", numberMatches(542.0))
                .body("'errors'[3].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[1].'column'", numberMatches(615.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { numberKeys  (id : 800,key : \\\"WugS1lARXSL2526S\\\",value : 0.4858985,distinct : true,op : \\\"wGyM2ls\\\",search : \\\"O\\\",jsonkey : \\\"Gy2zZDgYdwGo3Fi\\\",order : \\\"\\\",before : \\\"MrO\\\",after : \\\"rbnqlHVSLfq\\\",first : 806,last : 40,before : \\\"3EZxLV\\\",after : \\\"289WgnzdHlthzv\\\",first : 578,last : 562)  {edges{node{key,value},cursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'message'", containsString("There can only be one argument named \"before\"."))
                .body("'errors'[0].'locations'.size()", equalTo(2))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(153.0))
                .body("'errors'[0].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[1].'column'", numberMatches(212.0))
                .body("'errors'[1].'message'", containsString("There can only be one argument named \"after\"."))
                .body("'errors'[1].'locations'.size()", equalTo(2))
                .body("'errors'[1].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[0].'column'", numberMatches(168.0))
                .body("'errors'[1].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[1].'locations'[1].'column'", numberMatches(230.0))
                .body("'errors'[2].'message'", containsString("There can only be one argument named \"first\"."))
                .body("'errors'[2].'locations'.size()", equalTo(2))
                .body("'errors'[2].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[0].'column'", numberMatches(190.0))
                .body("'errors'[2].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[2].'locations'[1].'column'", numberMatches(255.0))
                .body("'errors'[3].'message'", containsString("There can only be one argument named \"last\"."))
                .body("'errors'[3].'locations'.size()", equalTo(2))
                .body("'errors'[3].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[0].'column'", numberMatches(202.0))
                .body("'errors'[3].'locations'[1].'line'", numberMatches(1.0))
                .body("'errors'[3].'locations'[1].'column'", numberMatches(267.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { node  (id : \\\"4\\\")  {... on System {uniqueId,ctime,username,numbers,pbc,momenta,constraints,calculator,magmoms,magmom,natoms,mass,Formula,Pbc,Ctime,Mtime,Reaction,DftCode,DftFunctional,{pageInfo{hasNextPage},totalCount},{pageInfo{hasNextPage,startCursor},totalCount}}... on TextKeyValue {key}... on ReactionSystem {name,energyCorrection,{id,uniqueId,mtime,username,pbc,initialCharges,masses,constraints,calculator,dipole,magmoms,natoms,smax,volume,mass,charge,Trajdata,Mtime,Adsorbate,Reaction,Username,DftCode,keys{pageInfo{hasNextPage,startCursor},edges{node{id}}},textKeys{pageInfo{hasPreviousPage,startCursor,endCursor},edges{node{id,value},cursor},totalCount},log{logfile,Logtext}}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Syntax Error GraphQL (1:223) Expected Name, found {\n\n1:   { node  (id : \"4\")  {... on System {uniqueId,ctime,username,numbers,pbc,momenta,constraints,calculator,magmoms,magmom,natoms,mass,Formula,Pbc,Ctime,Mtime,Reaction,DftCode,DftFunctional,{pageInfo{hasNextPage},totalCount},{pageInfo{hasNextPage,startCursor},totalCount}}... on TextKeyValue {key}... on ReactionSystem {name,energyCorrection,{id,uniqueId,mtime,username,pbc,initialCharges,masses,constraints,calculator,dipole,magmoms,natoms,smax,volume,mass,charge,Trajdata,Mtime,Adsorbate,Reaction,Username,DftCode,keys{pageInfo{hasNextPage,startCursor},edges{node{id}}},textKeys{pageInfo{hasPreviousPage,startCursor,endCursor},edges{node{id,value},cursor},totalCount},log{logfile,Logtext}}}}       } \n                                                                                                                                                                                                                                 ^\n"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(223.0));
    }


}
