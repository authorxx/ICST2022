import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2021-09-24T23:48:02.087+02:00[Europe/Berlin]
 * <br>
 * The generated test suite contains 22 tests
 * <br>
 * Covered targets: 51
 * <br>
 * Used time: 0h 21m 14s
 * <br>
 * Needed budget for current results: 85%
 * <br>
 * 
 */
public class EM_bbExp_False_rate_60_1_Test {

    
    private static String baseUrlOfSut = "https://api.production.everbase.co/graphql";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  client  {ipAddress{country{alpha2Code,callingCodes,capital{continent{name,population},geonamesID,id,location{lat},name},continent{name},currencies{convert,name,unitSymbols},id,location{lat,long},name}}}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'client'.'ipAddress'.'country'.'alpha2Code'", containsString("NO"))
                .body("'data'.'client'.'ipAddress'.'country'.'callingCodes'.size()", equalTo(1))
                .body("'data'.'client'.'ipAddress'.'country'.'callingCodes'", hasItems("+47"))
                .body("'data'.'client'.'ipAddress'.'country'.'capital'.'continent'.'name'", containsString("Europe"))
                .body("'data'.'client'.'ipAddress'.'country'.'capital'.'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'client'.'ipAddress'.'country'.'capital'.'geonamesID'", numberMatches(3143244.0))
                .body("'data'.'client'.'ipAddress'.'country'.'capital'.'location'.'lat'", numberMatches(59.911111))
                .body("'data'.'client'.'ipAddress'.'country'.'capital'.'name'", containsString("Oslo"))
                .body("'data'.'client'.'ipAddress'.'country'.'continent'.'name'", containsString("Europe"))
                .body("'data'.'client'.'ipAddress'.'country'.'currencies'.size()", equalTo(1))
                .body("'data'.'client'.'ipAddress'.'country'.'currencies'[0].'name'", containsString("Norwegian krone"))
                .body("'data'.'client'.'ipAddress'.'country'.'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'client'.'ipAddress'.'country'.'currencies'[0].'unitSymbols'", hasItems("kr"))
                .body("'data'.'client'.'ipAddress'.'country'.'location'.'lat'", numberMatches(65.0))
                .body("'data'.'client'.'ipAddress'.'country'.'location'.'long'", numberMatches(11.0))
                .body("'data'.'client'.'ipAddress'.'country'.'name'", containsString("Norway"))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("missing required argument to"))
                .body("'errors'[0].'path'.size()", equalTo(6))
                .body("'errors'[0].'path'[0]", containsString("client"))
                .body("'errors'[0].'path'[1]", containsString("ipAddress"))
                .body("'errors'[0].'path'[2]", containsString("country"))
                .body("'errors'[0].'path'[3]", containsString("currencies"))
                .body("'errors'[0].'path'[4]", numberMatches(0.0))
                .body("'errors'[0].'path'[5]", containsString("convert"));
    }
    
    
    @Test
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  client  {userAgent}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'client'.'userAgent'", containsString("Jersey/2.33 (HttpUrlConnection 1.8.0_265)"));
    }
    
    
    @Test
    public void test_2() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { languages  (limit : 214,skip : 731, where:{})  {alpha2Code}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'languages'.size()", equalTo(0));
    }
    
    
    @Test
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { cities  (limit : -160291997,skip : 818, where:{})  {geonamesID,id,location{lat},name,timeZone{id,offset},timeZoneDST{id}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.isEmpty()", is(true))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("LIMIT specified value of invalid type, must be a positive integer"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("cities"));
    }
    
    
    @Test
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { cities  (limit : 316,skip : 670, where:{})  {geonamesID,id}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'cities'.size()", equalTo(316))
                .body("'data'.'cities'[0].'geonamesID'", numberMatches(311073.0))
                .body("'data'.'cities'[1].'geonamesID'", numberMatches(1273874.0))
                .body("'data'.'cities'[2].'geonamesID'", numberMatches(3719028.0))
                .body("'data'.'cities'[3].'geonamesID'", numberMatches(2037013.0))
                .body("'data'.'cities'[4].'geonamesID'", numberMatches(1712520.0))
                .body("'data'.'cities'[5].'geonamesID'", numberMatches(1848499.0))
                .body("'data'.'cities'[6].'geonamesID'", numberMatches(5262649.0))
                .body("'data'.'cities'[7].'geonamesID'", numberMatches(8394316.0))
                .body("'data'.'cities'[8].'geonamesID'", numberMatches(3044821.0))
                .body("'data'.'cities'[9].'geonamesID'", numberMatches(2653266.0))
                .body("'data'.'cities'[10].'geonamesID'", numberMatches(1484839.0))
                .body("'data'.'cities'[11].'geonamesID'", numberMatches(5367565.0))
                .body("'data'.'cities'[12].'geonamesID'", numberMatches(163345.0))
                .body("'data'.'cities'[13].'geonamesID'", numberMatches(5844096.0))
                .body("'data'.'cities'[14].'geonamesID'", numberMatches(3111605.0))
                .body("'data'.'cities'[15].'geonamesID'", numberMatches(6556231.0))
                .body("'data'.'cities'[16].'geonamesID'", numberMatches(895061.0))
                .body("'data'.'cities'[17].'geonamesID'", numberMatches(6558111.0))
                .body("'data'.'cities'[18].'geonamesID'", numberMatches(787595.0))
                .body("'data'.'cities'[19].'geonamesID'", numberMatches(1784130.0))
                .body("'data'.'cities'[20].'geonamesID'", numberMatches(8632419.0))
                .body("'data'.'cities'[21].'geonamesID'", numberMatches(1640344.0))
                .body("'data'.'cities'[22].'geonamesID'", numberMatches(1786217.0))
                .body("'data'.'cities'[23].'geonamesID'", numberMatches(1849862.0))
                .body("'data'.'cities'[24].'geonamesID'", numberMatches(3624370.0))
                .body("'data'.'cities'[25].'geonamesID'", numberMatches(3468403.0))
                .body("'data'.'cities'[26].'geonamesID'", numberMatches(2989317.0))
                .body("'data'.'cities'[27].'geonamesID'", numberMatches(6053154.0))
                .body("'data'.'cities'[28].'geonamesID'", numberMatches(3068927.0))
                .body("'data'.'cities'[29].'geonamesID'", numberMatches(256866.0))
                .body("'data'.'cities'[30].'geonamesID'", numberMatches(6949678.0))
                .body("'data'.'cities'[31].'geonamesID'", numberMatches(293397.0))
                .body("'data'.'cities'[32].'geonamesID'", numberMatches(3386496.0))
                .body("'data'.'cities'[33].'geonamesID'", numberMatches(4151316.0))
                .body("'data'.'cities'[34].'geonamesID'", numberMatches(3221111.0))
                .body("'data'.'cities'[35].'geonamesID'", numberMatches(4172372.0))
                .body("'data'.'cities'[36].'geonamesID'", numberMatches(1851348.0))
                .body("'data'.'cities'[37].'geonamesID'", numberMatches(1798821.0))
                .body("'data'.'cities'[38].'geonamesID'", numberMatches(5427946.0))
                .body("'data'.'cities'[39].'geonamesID'", numberMatches(3052542.0))
                .body("'data'.'cities'[40].'geonamesID'", numberMatches(5004005.0))
                .body("'data'.'cities'[41].'geonamesID'", numberMatches(1268761.0))
                .body("'data'.'cities'[42].'geonamesID'", numberMatches(3077929.0))
                .body("'data'.'cities'[43].'geonamesID'", numberMatches(828310.0))
                .body("'data'.'cities'[44].'geonamesID'", numberMatches(1647866.0))
                .body("'data'.'cities'[45].'geonamesID'", numberMatches(1859955.0))
                .body("'data'.'cities'[46].'geonamesID'", numberMatches(3145580.0))
                .body("'data'.'cities'[47].'geonamesID'", numberMatches(1793724.0))
                .body("'data'.'cities'[48].'geonamesID'", numberMatches(5386754.0))
                .body("'data'.'cities'[49].'geonamesID'", numberMatches(2040893.0))
                .body("'data'.'cities'[50].'geonamesID'", numberMatches(6113365.0))
                .body("'data'.'cities'[51].'geonamesID'", numberMatches(302043.0))
                .body("'data'.'cities'[52].'geonamesID'", numberMatches(4506008.0))
                .body("'data'.'cities'[53].'geonamesID'", numberMatches(1927639.0))
                .body("'data'.'cities'[54].'geonamesID'", numberMatches(1184845.0))
                .body("'data'.'cities'[55].'geonamesID'", numberMatches(3056508.0))
                .body("'data'.'cities'[56].'geonamesID'", numberMatches(1805953.0))
                .body("'data'.'cities'[57].'geonamesID'", numberMatches(3674600.0))
                .body("'data'.'cities'[58].'geonamesID'", numberMatches(5000500.0))
                .body("'data'.'cities'[59].'geonamesID'", numberMatches(2787770.0))
                .body("'data'.'cities'[60].'geonamesID'", numberMatches(6558120.0))
                .body("'data'.'cities'[61].'geonamesID'", numberMatches(1269843.0))
                .body("'data'.'cities'[62].'geonamesID'", numberMatches(4679803.0))
                .body("'data'.'cities'[63].'geonamesID'", numberMatches(146617.0))
                .body("'data'.'cities'[64].'geonamesID'", numberMatches(2266987.0))
                .body("'data'.'cities'[65].'geonamesID'", numberMatches(639734.0))
                .body("'data'.'cities'[66].'geonamesID'", numberMatches(2243940.0))
                .body("'data'.'cities'[67].'geonamesID'", numberMatches(3140084.0))
                .body("'data'.'cities'[68].'geonamesID'", numberMatches(169023.0))
                .body("'data'.'cities'[69].'geonamesID'", numberMatches(3522551.0))
                .body("'data'.'cities'[70].'geonamesID'", numberMatches(4844309.0))
                .body("'data'.'cities'[71].'geonamesID'", numberMatches(3449344.0))
                .body("'data'.'cities'[72].'geonamesID'", numberMatches(5341704.0))
                .body("'data'.'cities'[73].'geonamesID'", numberMatches(8617692.0))
                .body("'data'.'cities'[74].'geonamesID'", numberMatches(8334767.0))
                .body("'data'.'cities'[75].'geonamesID'", numberMatches(3691474.0))
                .body("'data'.'cities'[76].'geonamesID'", numberMatches(4830198.0))
                .body("'data'.'cities'[77].'geonamesID'", numberMatches(3432079.0))
                .body("'data'.'cities'[78].'geonamesID'", numberMatches(601734.0))
                .body("'data'.'cities'[79].'geonamesID'", numberMatches(2800931.0))
                .body("'data'.'cities'[80].'geonamesID'", numberMatches(6862586.0))
                .body("'data'.'cities'[81].'geonamesID'", numberMatches(5405878.0))
                .body("'data'.'cities'[82].'geonamesID'", numberMatches(5122432.0))
                .body("'data'.'cities'[83].'geonamesID'", numberMatches(3465644.0))
                .body("'data'.'cities'[84].'geonamesID'", numberMatches(1843561.0))
                .body("'data'.'cities'[85].'geonamesID'", numberMatches(4313697.0))
                .body("'data'.'cities'[86].'geonamesID'", numberMatches(98860.0))
                .body("'data'.'cities'[87].'geonamesID'", numberMatches(307515.0))
                .body("'data'.'cities'[88].'geonamesID'", numberMatches(1853552.0))
                .body("'data'.'cities'[89].'geonamesID'", numberMatches(614455.0))
                .body("'data'.'cities'[90].'geonamesID'", numberMatches(6557683.0))
                .body("'data'.'cities'[91].'geonamesID'", numberMatches(6324325.0))
                .body("'data'.'cities'[92].'geonamesID'", numberMatches(3893629.0))
                .body("'data'.'cities'[93].'geonamesID'", numberMatches(1849876.0))
                .body("'data'.'cities'[94].'geonamesID'", numberMatches(765876.0))
                .body("'data'.'cities'[95].'geonamesID'", numberMatches(5339663.0))
                .body("'data'.'cities'[96].'geonamesID'", numberMatches(3658192.0))
                .body("'data'.'cities'[97].'geonamesID'", numberMatches(1874225.0))
                .body("'data'.'cities'[98].'geonamesID'", numberMatches(2128291.0))
                .body("'data'.'cities'[99].'geonamesID'", numberMatches(6558072.0))
                .body("'data'.'cities'[100].'geonamesID'", numberMatches(4608408.0))
                .body("'data'.'cities'[101].'geonamesID'", numberMatches(1527260.0))
                .body("'data'.'cities'[102].'geonamesID'", numberMatches(5359777.0))
                .body("'data'.'cities'[103].'geonamesID'", numberMatches(161616.0))
                .body("'data'.'cities'[104].'geonamesID'", numberMatches(6541998.0))
                .body("'data'.'cities'[105].'geonamesID'", numberMatches(5162077.0))
                .body("'data'.'cities'[106].'geonamesID'", numberMatches(3247905.0))
                .body("'data'.'cities'[107].'geonamesID'", numberMatches(8010567.0))
                .body("'data'.'cities'[108].'geonamesID'", numberMatches(1804651.0))
                .body("'data'.'cities'[109].'geonamesID'", numberMatches(163533.0))
                .body("'data'.'cities'[110].'geonamesID'", numberMatches(1180289.0))
                .body("'data'.'cities'[111].'geonamesID'", numberMatches(2633948.0))
                .body("'data'.'cities'[112].'geonamesID'", numberMatches(3905658.0))
                .body("'data'.'cities'[113].'geonamesID'", numberMatches(2649808.0))
                .body("'data'.'cities'[114].'geonamesID'", numberMatches(4817641.0))
                .body("'data'.'cities'[115].'geonamesID'", numberMatches(3095126.0))
                .body("'data'.'cities'[116].'geonamesID'", numberMatches(3567823.0))
                .body("'data'.'cities'[117].'geonamesID'", numberMatches(339594.0))
                .body("'data'.'cities'[118].'geonamesID'", numberMatches(2791538.0))
                .body("'data'.'cities'[119].'geonamesID'", numberMatches(3049512.0))
                .body("'data'.'cities'[120].'geonamesID'", numberMatches(4048662.0))
                .body("'data'.'cities'[121].'geonamesID'", numberMatches(79415.0))
                .body("'data'.'cities'[122].'geonamesID'", numberMatches(5102466.0))
                .body("'data'.'cities'[123].'geonamesID'", numberMatches(3854985.0))
                .body("'data'.'cities'[124].'geonamesID'", numberMatches(1855363.0))
                .body("'data'.'cities'[125].'geonamesID'", numberMatches(6557497.0))
                .body("'data'.'cities'[126].'geonamesID'", numberMatches(4727326.0))
                .body("'data'.'cities'[127].'geonamesID'", numberMatches(5272893.0))
                .body("'data'.'cities'[128].'geonamesID'", numberMatches(139817.0))
                .body("'data'.'cities'[129].'geonamesID'", numberMatches(3671117.0))
                .body("'data'.'cities'[130].'geonamesID'", numberMatches(4979244.0))
                .body("'data'.'cities'[131].'geonamesID'", numberMatches(639406.0))
                .body("'data'.'cities'[132].'geonamesID'", numberMatches(5591778.0))
                .body("'data'.'cities'[133].'geonamesID'", numberMatches(715338.0))
                .body("'data'.'cities'[134].'geonamesID'", numberMatches(4439869.0))
                .body("'data'.'cities'[135].'geonamesID'", numberMatches(2795010.0))
                .body("'data'.'cities'[136].'geonamesID'", numberMatches(3609586.0))
                .body("'data'.'cities'[137].'geonamesID'", numberMatches(2112704.0))
                .body("'data'.'cities'[138].'geonamesID'", numberMatches(5052916.0))
                .body("'data'.'cities'[139].'geonamesID'", numberMatches(4914570.0))
                .body("'data'.'cities'[140].'geonamesID'", numberMatches(5069802.0))
                .body("'data'.'cities'[141].'geonamesID'", numberMatches(5392368.0))
                .body("'data'.'cities'[142].'geonamesID'", numberMatches(1253102.0))
                .body("'data'.'cities'[143].'geonamesID'", numberMatches(4846960.0))
                .body("'data'.'cities'[144].'geonamesID'", numberMatches(2111823.0))
                .body("'data'.'cities'[145].'geonamesID'", numberMatches(349715.0))
                .body("'data'.'cities'[146].'geonamesID'", numberMatches(7287397.0))
                .body("'data'.'cities'[147].'geonamesID'", numberMatches(5380748.0))
                .body("'data'.'cities'[148].'geonamesID'", numberMatches(746425.0))
                .body("'data'.'cities'[149].'geonamesID'", numberMatches(2797657.0))
                .body("'data'.'cities'[150].'geonamesID'", numberMatches(8010474.0))
                .body("'data'.'cities'[151].'geonamesID'", numberMatches(3408424.0))
                .body("'data'.'cities'[152].'geonamesID'", numberMatches(3998655.0))
                .body("'data'.'cities'[153].'geonamesID'", numberMatches(1276609.0))
                .body("'data'.'cities'[154].'geonamesID'", numberMatches(4533580.0))
                .body("'data'.'cities'[155].'geonamesID'", numberMatches(1719251.0))
                .body("'data'.'cities'[156].'geonamesID'", numberMatches(7530964.0))
                .body("'data'.'cities'[157].'geonamesID'", numberMatches(1625929.0))
                .body("'data'.'cities'[158].'geonamesID'", numberMatches(5084868.0))
                .body("'data'.'cities'[159].'geonamesID'", numberMatches(3649833.0))
                .body("'data'.'cities'[160].'geonamesID'", numberMatches(8010583.0))
                .body("'data'.'cities'[161].'geonamesID'", numberMatches(6557486.0))
                .body("'data'.'cities'[162].'geonamesID'", numberMatches(4220629.0))
                .body("'data'.'cities'[163].'geonamesID'", numberMatches(2798988.0))
                .body("'data'.'cities'[164].'geonamesID'", numberMatches(98182.0))
                .body("'data'.'cities'[165].'geonamesID'", numberMatches(5777224.0))
                .body("'data'.'cities'[166].'geonamesID'", numberMatches(8632418.0))
                .body("'data'.'cities'[167].'geonamesID'", numberMatches(7413152.0))
                .body("'data'.'cities'[168].'geonamesID'", numberMatches(2653775.0))
                .body("'data'.'cities'[169].'geonamesID'", numberMatches(1277240.0))
                .body("'data'.'cities'[170].'geonamesID'", numberMatches(7872055.0))
                .body("'data'.'cities'[171].'geonamesID'", numberMatches(1183883.0))
                .body("'data'.'cities'[172].'geonamesID'", numberMatches(4177887.0))
                .body("'data'.'cities'[173].'geonamesID'", numberMatches(5249871.0))
                .body("'data'.'cities'[174].'geonamesID'", numberMatches(175499.0))
                .body("'data'.'cities'[175].'geonamesID'", numberMatches(4277718.0))
                .body("'data'.'cities'[176].'geonamesID'", numberMatches(4794134.0))
                .body("'data'.'cities'[177].'geonamesID'", numberMatches(1607017.0))
                .body("'data'.'cities'[178].'geonamesID'", numberMatches(3694178.0))
                .body("'data'.'cities'[179].'geonamesID'", numberMatches(8010592.0))
                .body("'data'.'cities'[180].'geonamesID'", numberMatches(1270484.0))
                .body("'data'.'cities'[181].'geonamesID'", numberMatches(6558056.0))
                .body("'data'.'cities'[182].'geonamesID'", numberMatches(5340970.0))
                .body("'data'.'cities'[183].'geonamesID'", numberMatches(5914653.0))
                .body("'data'.'cities'[184].'geonamesID'", numberMatches(1526193.0))
                .body("'data'.'cities'[185].'geonamesID'", numberMatches(5384170.0))
                .body("'data'.'cities'[186].'geonamesID'", numberMatches(8010590.0))
                .body("'data'.'cities'[187].'geonamesID'", numberMatches(1513064.0))
                .body("'data'.'cities'[188].'geonamesID'", numberMatches(601084.0))
                .body("'data'.'cities'[189].'geonamesID'", numberMatches(2966131.0))
                .body("'data'.'cities'[190].'geonamesID'", numberMatches(3617448.0))
                .body("'data'.'cities'[191].'geonamesID'", numberMatches(2090409.0))
                .body("'data'.'cities'[192].'geonamesID'", numberMatches(1270927.0))
                .body("'data'.'cities'[193].'geonamesID'", numberMatches(3893656.0))
                .body("'data'.'cities'[194].'geonamesID'", numberMatches(4278890.0))
                .body("'data'.'cities'[195].'geonamesID'", numberMatches(6643375.0))
                .body("'data'.'cities'[196].'geonamesID'", numberMatches(3073371.0))
                .body("'data'.'cities'[197].'geonamesID'", numberMatches(1708524.0))
                .body("'data'.'cities'[198].'geonamesID'", numberMatches(4475773.0))
                .body("'data'.'cities'[199].'geonamesID'", numberMatches(656083.0))
                .body("'data'.'cities'[200].'geonamesID'", numberMatches(6154383.0))
                .body("'data'.'cities'[201].'geonamesID'", numberMatches(5301388.0))
                .body("'data'.'cities'[202].'geonamesID'", numberMatches(6557785.0))
                .body("'data'.'cities'[203].'geonamesID'", numberMatches(2206854.0))
                .body("'data'.'cities'[204].'geonamesID'", numberMatches(1696899.0))
                .body("'data'.'cities'[205].'geonamesID'", numberMatches(162183.0))
                .body("'data'.'cities'[206].'geonamesID'", numberMatches(4760084.0))
                .body("'data'.'cities'[207].'geonamesID'", numberMatches(5405228.0))
                .body("'data'.'cities'[208].'geonamesID'", numberMatches(6547441.0))
                .body("'data'.'cities'[209].'geonamesID'", numberMatches(3881276.0))
                .body("'data'.'cities'[210].'geonamesID'", numberMatches(5443910.0))
                .body("'data'.'cities'[211].'geonamesID'", numberMatches(3671917.0))
                .body("'data'.'cities'[212].'geonamesID'", numberMatches(1496153.0))
                .body("'data'.'cities'[213].'geonamesID'", numberMatches(6049429.0))
                .body("'data'.'cities'[214].'geonamesID'", numberMatches(1513131.0))
                .body("'data'.'cities'[215].'geonamesID'", numberMatches(5423294.0))
                .body("'data'.'cities'[216].'geonamesID'", numberMatches(4677551.0))
                .body("'data'.'cities'[217].'geonamesID'", numberMatches(8379485.0))
                .body("'data'.'cities'[218].'geonamesID'", numberMatches(3667985.0))
                .body("'data'.'cities'[219].'geonamesID'", numberMatches(6357616.0))
                .body("'data'.'cities'[220].'geonamesID'", numberMatches(4689550.0))
                .body("'data'.'cities'[221].'geonamesID'", numberMatches(5022025.0))
                .body("'data'.'cities'[222].'geonamesID'", numberMatches(5326297.0))
                .body("'data'.'cities'[223].'geonamesID'", numberMatches(1024694.0))
                .body("'data'.'cities'[224].'geonamesID'", numberMatches(1857594.0))
                .body("'data'.'cities'[225].'geonamesID'", numberMatches(751057.0))
                .body("'data'.'cities'[226].'geonamesID'", numberMatches(1720402.0))
                .body("'data'.'cities'[227].'geonamesID'", numberMatches(1271951.0))
                .body("'data'.'cities'[228].'geonamesID'", numberMatches(5779334.0))
                .body("'data'.'cities'[229].'geonamesID'", numberMatches(290340.0))
                .body("'data'.'cities'[230].'geonamesID'", numberMatches(5384690.0))
                .body("'data'.'cities'[231].'geonamesID'", numberMatches(4006163.0))
                .body("'data'.'cities'[232].'geonamesID'", numberMatches(5356451.0))
                .body("'data'.'cities'[233].'geonamesID'", numberMatches(1703321.0))
                .body("'data'.'cities'[234].'geonamesID'", numberMatches(7391698.0))
                .body("'data'.'cities'[235].'geonamesID'", numberMatches(4639848.0))
                .body("'data'.'cities'[236].'geonamesID'", numberMatches(632453.0))
                .body("'data'.'cities'[237].'geonamesID'", numberMatches(4736388.0))
                .body("'data'.'cities'[238].'geonamesID'", numberMatches(1734810.0))
                .body("'data'.'cities'[239].'geonamesID'", numberMatches(1786546.0))
                .body("'data'.'cities'[240].'geonamesID'", numberMatches(3669739.0))
                .body("'data'.'cities'[241].'geonamesID'", numberMatches(6555439.0))
                .body("'data'.'cities'[242].'geonamesID'", numberMatches(8010473.0))
                .body("'data'.'cities'[243].'geonamesID'", numberMatches(3404817.0))
                .body("'data'.'cities'[244].'geonamesID'", numberMatches(4481682.0))
                .body("'data'.'cities'[245].'geonamesID'", numberMatches(3662762.0))
                .body("'data'.'cities'[246].'geonamesID'", numberMatches(1526384.0))
                .body("'data'.'cities'[247].'geonamesID'", numberMatches(4509884.0))
                .body("'data'.'cities'[248].'geonamesID'", numberMatches(2362344.0))
                .body("'data'.'cities'[249].'geonamesID'", numberMatches(1859730.0))
                .body("'data'.'cities'[250].'geonamesID'", numberMatches(518659.0))
                .body("'data'.'cities'[251].'geonamesID'", numberMatches(2190224.0))
                .body("'data'.'cities'[252].'geonamesID'", numberMatches(259245.0))
                .body("'data'.'cities'[253].'geonamesID'", numberMatches(6094325.0))
                .body("'data'.'cities'[254].'geonamesID'", numberMatches(7316547.0))
                .body("'data'.'cities'[255].'geonamesID'", numberMatches(1648186.0))
                .body("'data'.'cities'[256].'geonamesID'", numberMatches(2633691.0))
                .body("'data'.'cities'[257].'geonamesID'", numberMatches(4991735.0))
                .body("'data'.'cities'[258].'geonamesID'", numberMatches(5038108.0))
                .body("'data'.'cities'[259].'geonamesID'", numberMatches(3247442.0))
                .body("'data'.'cities'[260].'geonamesID'", numberMatches(1721080.0))
                .body("'data'.'cities'[261].'geonamesID'", numberMatches(598099.0))
                .body("'data'.'cities'[262].'geonamesID'", numberMatches(6551009.0))
                .body("'data'.'cities'[263].'geonamesID'", numberMatches(3985604.0))
                .body("'data'.'cities'[264].'geonamesID'", numberMatches(4180439.0))
                .body("'data'.'cities'[265].'geonamesID'", numberMatches(1527004.0))
                .body("'data'.'cities'[266].'geonamesID'", numberMatches(6930331.0))
                .body("'data'.'cities'[267].'geonamesID'", numberMatches(3134331.0))
                .body("'data'.'cities'[268].'geonamesID'", numberMatches(6558170.0))
                .body("'data'.'cities'[269].'geonamesID'", numberMatches(3461879.0))
                .body("'data'.'cities'[270].'geonamesID'", numberMatches(4509177.0))
                .body("'data'.'cities'[271].'geonamesID'", numberMatches(6356927.0))
                .body("'data'.'cities'[272].'geonamesID'", numberMatches(2950073.0))
                .body("'data'.'cities'[273].'geonamesID'", numberMatches(4608657.0))
                .body("'data'.'cities'[274].'geonamesID'", numberMatches(2031964.0))
                .body("'data'.'cities'[275].'geonamesID'", numberMatches(6557577.0))
                .body("'data'.'cities'[276].'geonamesID'", numberMatches(260989.0))
                .body("'data'.'cities'[277].'geonamesID'", numberMatches(5143396.0))
                .body("'data'.'cities'[278].'geonamesID'", numberMatches(6558045.0))
                .body("'data'.'cities'[279].'geonamesID'", numberMatches(1852899.0))
                .body("'data'.'cities'[280].'geonamesID'", numberMatches(5006233.0))
                .body("'data'.'cities'[281].'geonamesID'", numberMatches(3129133.0))
                .body("'data'.'cities'[282].'geonamesID'", numberMatches(3044681.0))
                .body("'data'.'cities'[283].'geonamesID'", numberMatches(3567595.0))
                .body("'data'.'cities'[284].'geonamesID'", numberMatches(6557647.0))
                .body("'data'.'cities'[285].'geonamesID'", numberMatches(1808198.0))
                .body("'data'.'cities'[286].'geonamesID'", numberMatches(598316.0))
                .body("'data'.'cities'[287].'geonamesID'", numberMatches(935582.0))
                .body("'data'.'cities'[288].'geonamesID'", numberMatches(3169070.0))
                .body("'data'.'cities'[289].'geonamesID'", numberMatches(2411586.0))
                .body("'data'.'cities'[290].'geonamesID'", numberMatches(771158.0))
                .body("'data'.'cities'[291].'geonamesID'", numberMatches(71491.0))
                .body("'data'.'cities'[292].'geonamesID'", numberMatches(5392034.0))
                .body("'data'.'cities'[293].'geonamesID'", numberMatches(1897007.0))
                .body("'data'.'cities'[294].'geonamesID'", numberMatches(1788534.0))
                .body("'data'.'cities'[295].'geonamesID'", numberMatches(2633352.0))
                .body("'data'.'cities'[296].'geonamesID'", numberMatches(172469.0))
                .body("'data'.'cities'[297].'geonamesID'", numberMatches(2786546.0))
                .body("'data'.'cities'[298].'geonamesID'", numberMatches(360526.0))
                .body("'data'.'cities'[299].'geonamesID'", numberMatches(3202781.0))
                .body("'data'.'cities'[300].'geonamesID'", numberMatches(4101260.0))
                .body("'data'.'cities'[301].'geonamesID'", numberMatches(3568312.0))
                .body("'data'.'cities'[302].'geonamesID'", numberMatches(7286283.0))
                .body("'data'.'cities'[303].'geonamesID'", numberMatches(1859485.0))
                .body("'data'.'cities'[304].'geonamesID'", numberMatches(3437021.0))
                .body("'data'.'cities'[305].'geonamesID'", numberMatches(1646446.0))
                .body("'data'.'cities'[306].'geonamesID'", numberMatches(4936159.0))
                .body("'data'.'cities'[307].'geonamesID'", numberMatches(5330567.0))
                .body("'data'.'cities'[308].'geonamesID'", numberMatches(1283401.0))
                .body("'data'.'cities'[309].'geonamesID'", numberMatches(6559146.0))
                .body("'data'.'cities'[310].'geonamesID'", numberMatches(4534934.0))
                .body("'data'.'cities'[311].'geonamesID'", numberMatches(2987914.0))
                .body("'data'.'cities'[312].'geonamesID'", numberMatches(5044407.0))
                .body("'data'.'cities'[313].'geonamesID'", numberMatches(4151871.0))
                .body("'data'.'cities'[314].'geonamesID'", numberMatches(1568510.0))
                .body("'data'.'cities'[315].'geonamesID'", numberMatches(30490.0));
    }
    
    
    @Test
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { markdown  (text : \\\"ONnG0fw\\\")  {html}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'markdown'.'html'", containsString("<p>ONnG0fw</p>\n"));
    }
    
    
    @Test
    public void test_6() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { currencies  (limit : 598,skip : 48, where:{})  {convert,id,isoCode}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'currencies'.size()", equalTo(108))
                .body("'data'.'currencies'[0].'isoCode'", containsString("INR"))
                .body("'data'.'currencies'[1].'isoCode'", containsString("IRR"))
                .body("'data'.'currencies'[2].'isoCode'", containsString("IQD"))
                .body("'data'.'currencies'[3].'isoCode'", containsString("JMD"))
                .body("'data'.'currencies'[4].'isoCode'", containsString("JPY"))
                .body("'data'.'currencies'[5].'isoCode'", containsString("JOD"))
                .body("'data'.'currencies'[6].'isoCode'", containsString("KZT"))
                .body("'data'.'currencies'[7].'isoCode'", containsString("KES"))
                .body("'data'.'currencies'[8].'isoCode'", containsString("KID"))
                .body("'data'.'currencies'[9].'isoCode'", containsString("KWD"))
                .body("'data'.'currencies'[10].'isoCode'", containsString("KGS"))
                .body("'data'.'currencies'[11].'isoCode'", containsString("LAK"))
                .body("'data'.'currencies'[12].'isoCode'", containsString("LBP"))
                .body("'data'.'currencies'[13].'isoCode'", containsString("LSL"))
                .body("'data'.'currencies'[14].'isoCode'", containsString("LRD"))
                .body("'data'.'currencies'[15].'isoCode'", containsString("LYD"))
                .body("'data'.'currencies'[16].'isoCode'", containsString("MOP"))
                .body("'data'.'currencies'[17].'isoCode'", containsString("MWK"))
                .body("'data'.'currencies'[18].'isoCode'", containsString("MYR"))
                .body("'data'.'currencies'[19].'isoCode'", containsString("MVR"))
                .body("'data'.'currencies'[20].'isoCode'", containsString("IMP"))
                .body("'data'.'currencies'[21].'isoCode'", containsString("MRO"))
                .body("'data'.'currencies'[22].'isoCode'", containsString("MUR"))
                .body("'data'.'currencies'[23].'isoCode'", containsString("MXN"))
                .body("'data'.'currencies'[24].'isoCode'", containsString("MDL"))
                .body("'data'.'currencies'[25].'isoCode'", containsString("MAD"))
                .body("'data'.'currencies'[26].'isoCode'", containsString("MZN"))
                .body("'data'.'currencies'[27].'isoCode'", containsString("NAD"))
                .body("'data'.'currencies'[28].'isoCode'", containsString("NPR"))
                .body("'data'.'currencies'[29].'isoCode'", containsString("ANG"))
                .body("'data'.'currencies'[30].'isoCode'", containsString("TWD"))
                .body("'data'.'currencies'[31].'isoCode'", containsString("NZD"))
                .body("'data'.'currencies'[32].'isoCode'", containsString("NIO"))
                .body("'data'.'currencies'[33].'isoCode'", containsString("NGN"))
                .body("'data'.'currencies'[34].'isoCode'", containsString("KPW"))
                .body("'data'.'currencies'[35].'isoCode'", containsString("NOK"))
                .body("'data'.'currencies'[36].'isoCode'", containsString("OMR"))
                .body("'data'.'currencies'[37].'isoCode'", containsString("PKR"))
                .body("'data'.'currencies'[38].'isoCode'", containsString("PAB"))
                .body("'data'.'currencies'[39].'isoCode'", containsString("PYG"))
                .body("'data'.'currencies'[40].'isoCode'", containsString("PEN"))
                .body("'data'.'currencies'[41].'isoCode'", containsString("PHP"))
                .body("'data'.'currencies'[42].'isoCode'", containsString("QAR"))
                .body("'data'.'currencies'[43].'isoCode'", containsString("RON"))
                .body("'data'.'currencies'[44].'isoCode'", containsString("RUB"))
                .body("'data'.'currencies'[45].'isoCode'", containsString("RWF"))
                .body("'data'.'currencies'[46].'isoCode'", containsString("XSU"))
                .body("'data'.'currencies'[47].'isoCode'", containsString("WST"))
                .body("'data'.'currencies'[48].'isoCode'", containsString("SAR"))
                .body("'data'.'currencies'[49].'isoCode'", containsString("RSD"))
                .body("'data'.'currencies'[50].'isoCode'", containsString("SCR"))
                .body("'data'.'currencies'[51].'isoCode'", containsString("SLL"))
                .body("'data'.'currencies'[52].'isoCode'", containsString("SGD"))
                .body("'data'.'currencies'[53].'isoCode'", containsString("SBD"))
                .body("'data'.'currencies'[54].'isoCode'", containsString("SOS"))
                .body("'data'.'currencies'[55].'isoCode'", containsString("ZAR"))
                .body("'data'.'currencies'[56].'isoCode'", containsString("KRW"))
                .body("'data'.'currencies'[57].'isoCode'", containsString("SSP"))
                .body("'data'.'currencies'[58].'isoCode'", containsString("LKR"))
                .body("'data'.'currencies'[59].'isoCode'", containsString("SRD"))
                .body("'data'.'currencies'[60].'isoCode'", containsString("SEK"))
                .body("'data'.'currencies'[61].'isoCode'", containsString("CHF"))
                .body("'data'.'currencies'[62].'isoCode'", containsString("SYP"))
                .body("'data'.'currencies'[63].'isoCode'", containsString("STN"))
                .body("'data'.'currencies'[64].'isoCode'", containsString("TJS"))
                .body("'data'.'currencies'[65].'isoCode'", containsString("TZS"))
                .body("'data'.'currencies'[66].'isoCode'", containsString("TOP"))
                .body("'data'.'currencies'[67].'isoCode'", containsString("TTD"))
                .body("'data'.'currencies'[68].'isoCode'", containsString("TND"))
                .body("'data'.'currencies'[69].'isoCode'", containsString("TRY"))
                .body("'data'.'currencies'[70].'isoCode'", containsString("TMT"))
                .body("'data'.'currencies'[71].'isoCode'", containsString("UGX"))
                .body("'data'.'currencies'[72].'isoCode'", containsString("COU"))
                .body("'data'.'currencies'[73].'isoCode'", containsString("AED"))
                .body("'data'.'currencies'[74].'isoCode'", containsString("USD"))
                .body("'data'.'currencies'[75].'isoCode'", containsString("UYU"))
                .body("'data'.'currencies'[76].'isoCode'", containsString("UZS"))
                .body("'data'.'currencies'[77].'isoCode'", containsString("VUV"))
                .body("'data'.'currencies'[78].'isoCode'", containsString("VND"))
                .body("'data'.'currencies'[79].'isoCode'", containsString("YER"))
                .body("'data'.'currencies'[80].'isoCode'", containsString("ZMW"))
                .body("'data'.'currencies'[81].'isoCode'", containsString("MGA"))
                .body("'data'.'currencies'[82].'isoCode'", containsString("THB"))
                .body("'data'.'currencies'[83].'isoCode'", containsString("ETB"))
                .body("'data'.'currencies'[84].'isoCode'", containsString("BOB"))
                .body("'data'.'currencies'[85].'isoCode'", containsString("VEB"))
                .body("'data'.'currencies'[86].'isoCode'", containsString("BAM"))
                .body("'data'.'currencies'[87].'isoCode'", containsString("CUC"))
                .body("'data'.'currencies'[88].'isoCode'", containsString("GMD"))
                .body("'data'.'currencies'[89].'isoCode'", containsString("MKD"))
                .body("'data'.'currencies'[90].'isoCode'", containsString("EUR"))
                .body("'data'.'currencies'[91].'isoCode'", containsString("HUF"))
                .body("'data'.'currencies'[92].'isoCode'", containsString("UAH"))
                .body("'data'.'currencies'[93].'isoCode'", containsString("PGK"))
                .body("'data'.'currencies'[94].'isoCode'", containsString("AOA"))
                .body("'data'.'currencies'[95].'isoCode'", containsString("MMK"))
                .body("'data'.'currencies'[96].'isoCode'", containsString("SZL"))
                .body("'data'.'currencies'[97].'isoCode'", containsString("ERN"))
                .body("'data'.'currencies'[98].'isoCode'", containsString("ILS"))
                .body("'data'.'currencies'[99].'isoCode'", containsString("BTN"))
                .body("'data'.'currencies'[100].'isoCode'", containsString("GBP"))
                .body("'data'.'currencies'[101].'isoCode'", containsString("GTQ"))
                .body("'data'.'currencies'[102].'isoCode'", containsString("CNY"))
                .body("'data'.'currencies'[103].'isoCode'", containsString("CNH"))
                .body("'data'.'currencies'[104].'isoCode'", containsString("KHR"))
                .body("'data'.'currencies'[105].'isoCode'", containsString("IDR"))
                .body("'data'.'currencies'[106].'isoCode'", containsString("MNT"))
                .body("'data'.'currencies'[107].'isoCode'", containsString("PLN"))
                .body("'errors'.size()", equalTo(108))
                .body("'errors'[0].'message'", containsString("missing required argument to"))
                .body("'errors'[0].'path'.size()", equalTo(3))
                .body("'errors'[0].'path'[0]", containsString("currencies"))
                .body("'errors'[0].'path'[1]", numberMatches(0.0))
                .body("'errors'[0].'path'[2]", containsString("convert"))
                .body("'errors'[1].'message'", containsString("missing required argument to"))
                .body("'errors'[1].'path'.size()", equalTo(3))
                .body("'errors'[1].'path'[0]", containsString("currencies"))
                .body("'errors'[1].'path'[1]", numberMatches(1.0))
                .body("'errors'[1].'path'[2]", containsString("convert"))
                .body("'errors'[2].'message'", containsString("missing required argument to"))
                .body("'errors'[2].'path'.size()", equalTo(3))
                .body("'errors'[2].'path'[0]", containsString("currencies"))
                .body("'errors'[2].'path'[1]", numberMatches(2.0))
                .body("'errors'[2].'path'[2]", containsString("convert"))
                .body("'errors'[3].'message'", containsString("missing required argument to"))
                .body("'errors'[3].'path'.size()", equalTo(3))
                .body("'errors'[3].'path'[0]", containsString("currencies"))
                .body("'errors'[3].'path'[1]", numberMatches(3.0))
                .body("'errors'[3].'path'[2]", containsString("convert"))
                .body("'errors'[4].'message'", containsString("missing required argument to"))
                .body("'errors'[4].'path'.size()", equalTo(3))
                .body("'errors'[4].'path'[0]", containsString("currencies"))
                .body("'errors'[4].'path'[1]", numberMatches(4.0))
                .body("'errors'[4].'path'[2]", containsString("convert"))
                .body("'errors'[5].'message'", containsString("missing required argument to"))
                .body("'errors'[5].'path'.size()", equalTo(3))
                .body("'errors'[5].'path'[0]", containsString("currencies"))
                .body("'errors'[5].'path'[1]", numberMatches(5.0))
                .body("'errors'[5].'path'[2]", containsString("convert"))
                .body("'errors'[6].'message'", containsString("missing required argument to"))
                .body("'errors'[6].'path'.size()", equalTo(3))
                .body("'errors'[6].'path'[0]", containsString("currencies"))
                .body("'errors'[6].'path'[1]", numberMatches(6.0))
                .body("'errors'[6].'path'[2]", containsString("convert"))
                .body("'errors'[7].'message'", containsString("missing required argument to"))
                .body("'errors'[7].'path'.size()", equalTo(3))
                .body("'errors'[7].'path'[0]", containsString("currencies"))
                .body("'errors'[7].'path'[1]", numberMatches(7.0))
                .body("'errors'[7].'path'[2]", containsString("convert"))
                .body("'errors'[8].'message'", containsString("missing required argument to"))
                .body("'errors'[8].'path'.size()", equalTo(3))
                .body("'errors'[8].'path'[0]", containsString("currencies"))
                .body("'errors'[8].'path'[1]", numberMatches(8.0))
                .body("'errors'[8].'path'[2]", containsString("convert"))
                .body("'errors'[9].'message'", containsString("missing required argument to"))
                .body("'errors'[9].'path'.size()", equalTo(3))
                .body("'errors'[9].'path'[0]", containsString("currencies"))
                .body("'errors'[9].'path'[1]", numberMatches(9.0))
                .body("'errors'[9].'path'[2]", containsString("convert"))
                .body("'errors'[10].'message'", containsString("missing required argument to"))
                .body("'errors'[10].'path'.size()", equalTo(3))
                .body("'errors'[10].'path'[0]", containsString("currencies"))
                .body("'errors'[10].'path'[1]", numberMatches(10.0))
                .body("'errors'[10].'path'[2]", containsString("convert"))
                .body("'errors'[11].'message'", containsString("missing required argument to"))
                .body("'errors'[11].'path'.size()", equalTo(3))
                .body("'errors'[11].'path'[0]", containsString("currencies"))
                .body("'errors'[11].'path'[1]", numberMatches(11.0))
                .body("'errors'[11].'path'[2]", containsString("convert"))
                .body("'errors'[12].'message'", containsString("missing required argument to"))
                .body("'errors'[12].'path'.size()", equalTo(3))
                .body("'errors'[12].'path'[0]", containsString("currencies"))
                .body("'errors'[12].'path'[1]", numberMatches(12.0))
                .body("'errors'[12].'path'[2]", containsString("convert"))
                .body("'errors'[13].'message'", containsString("missing required argument to"))
                .body("'errors'[13].'path'.size()", equalTo(3))
                .body("'errors'[13].'path'[0]", containsString("currencies"))
                .body("'errors'[13].'path'[1]", numberMatches(13.0))
                .body("'errors'[13].'path'[2]", containsString("convert"))
                .body("'errors'[14].'message'", containsString("missing required argument to"))
                .body("'errors'[14].'path'.size()", equalTo(3))
                .body("'errors'[14].'path'[0]", containsString("currencies"))
                .body("'errors'[14].'path'[1]", numberMatches(14.0))
                .body("'errors'[14].'path'[2]", containsString("convert"))
                .body("'errors'[15].'message'", containsString("missing required argument to"))
                .body("'errors'[15].'path'.size()", equalTo(3))
                .body("'errors'[15].'path'[0]", containsString("currencies"))
                .body("'errors'[15].'path'[1]", numberMatches(15.0))
                .body("'errors'[15].'path'[2]", containsString("convert"))
                .body("'errors'[16].'message'", containsString("missing required argument to"))
                .body("'errors'[16].'path'.size()", equalTo(3))
                .body("'errors'[16].'path'[0]", containsString("currencies"))
                .body("'errors'[16].'path'[1]", numberMatches(16.0))
                .body("'errors'[16].'path'[2]", containsString("convert"))
                .body("'errors'[17].'message'", containsString("missing required argument to"))
                .body("'errors'[17].'path'.size()", equalTo(3))
                .body("'errors'[17].'path'[0]", containsString("currencies"))
                .body("'errors'[17].'path'[1]", numberMatches(17.0))
                .body("'errors'[17].'path'[2]", containsString("convert"))
                .body("'errors'[18].'message'", containsString("missing required argument to"))
                .body("'errors'[18].'path'.size()", equalTo(3))
                .body("'errors'[18].'path'[0]", containsString("currencies"))
                .body("'errors'[18].'path'[1]", numberMatches(18.0))
                .body("'errors'[18].'path'[2]", containsString("convert"))
                .body("'errors'[19].'message'", containsString("missing required argument to"))
                .body("'errors'[19].'path'.size()", equalTo(3))
                .body("'errors'[19].'path'[0]", containsString("currencies"))
                .body("'errors'[19].'path'[1]", numberMatches(19.0))
                .body("'errors'[19].'path'[2]", containsString("convert"))
                .body("'errors'[20].'message'", containsString("missing required argument to"))
                .body("'errors'[20].'path'.size()", equalTo(3))
                .body("'errors'[20].'path'[0]", containsString("currencies"))
                .body("'errors'[20].'path'[1]", numberMatches(20.0))
                .body("'errors'[20].'path'[2]", containsString("convert"))
                .body("'errors'[21].'message'", containsString("missing required argument to"))
                .body("'errors'[21].'path'.size()", equalTo(3))
                .body("'errors'[21].'path'[0]", containsString("currencies"))
                .body("'errors'[21].'path'[1]", numberMatches(21.0))
                .body("'errors'[21].'path'[2]", containsString("convert"))
                .body("'errors'[22].'message'", containsString("missing required argument to"))
                .body("'errors'[22].'path'.size()", equalTo(3))
                .body("'errors'[22].'path'[0]", containsString("currencies"))
                .body("'errors'[22].'path'[1]", numberMatches(22.0))
                .body("'errors'[22].'path'[2]", containsString("convert"))
                .body("'errors'[23].'message'", containsString("missing required argument to"))
                .body("'errors'[23].'path'.size()", equalTo(3))
                .body("'errors'[23].'path'[0]", containsString("currencies"))
                .body("'errors'[23].'path'[1]", numberMatches(23.0))
                .body("'errors'[23].'path'[2]", containsString("convert"))
                .body("'errors'[24].'message'", containsString("missing required argument to"))
                .body("'errors'[24].'path'.size()", equalTo(3))
                .body("'errors'[24].'path'[0]", containsString("currencies"))
                .body("'errors'[24].'path'[1]", numberMatches(24.0))
                .body("'errors'[24].'path'[2]", containsString("convert"))
                .body("'errors'[25].'message'", containsString("missing required argument to"))
                .body("'errors'[25].'path'.size()", equalTo(3))
                .body("'errors'[25].'path'[0]", containsString("currencies"))
                .body("'errors'[25].'path'[1]", numberMatches(25.0))
                .body("'errors'[25].'path'[2]", containsString("convert"))
                .body("'errors'[26].'message'", containsString("missing required argument to"))
                .body("'errors'[26].'path'.size()", equalTo(3))
                .body("'errors'[26].'path'[0]", containsString("currencies"))
                .body("'errors'[26].'path'[1]", numberMatches(26.0))
                .body("'errors'[26].'path'[2]", containsString("convert"))
                .body("'errors'[27].'message'", containsString("missing required argument to"))
                .body("'errors'[27].'path'.size()", equalTo(3))
                .body("'errors'[27].'path'[0]", containsString("currencies"))
                .body("'errors'[27].'path'[1]", numberMatches(27.0))
                .body("'errors'[27].'path'[2]", containsString("convert"))
                .body("'errors'[28].'message'", containsString("missing required argument to"))
                .body("'errors'[28].'path'.size()", equalTo(3))
                .body("'errors'[28].'path'[0]", containsString("currencies"))
                .body("'errors'[28].'path'[1]", numberMatches(28.0))
                .body("'errors'[28].'path'[2]", containsString("convert"))
                .body("'errors'[29].'message'", containsString("missing required argument to"))
                .body("'errors'[29].'path'.size()", equalTo(3))
                .body("'errors'[29].'path'[0]", containsString("currencies"))
                .body("'errors'[29].'path'[1]", numberMatches(29.0))
                .body("'errors'[29].'path'[2]", containsString("convert"))
                .body("'errors'[30].'message'", containsString("missing required argument to"))
                .body("'errors'[30].'path'.size()", equalTo(3))
                .body("'errors'[30].'path'[0]", containsString("currencies"))
                .body("'errors'[30].'path'[1]", numberMatches(30.0))
                .body("'errors'[30].'path'[2]", containsString("convert"))
                .body("'errors'[31].'message'", containsString("missing required argument to"))
                .body("'errors'[31].'path'.size()", equalTo(3))
                .body("'errors'[31].'path'[0]", containsString("currencies"))
                .body("'errors'[31].'path'[1]", numberMatches(31.0))
                .body("'errors'[31].'path'[2]", containsString("convert"))
                .body("'errors'[32].'message'", containsString("missing required argument to"))
                .body("'errors'[32].'path'.size()", equalTo(3))
                .body("'errors'[32].'path'[0]", containsString("currencies"))
                .body("'errors'[32].'path'[1]", numberMatches(32.0))
                .body("'errors'[32].'path'[2]", containsString("convert"))
                .body("'errors'[33].'message'", containsString("missing required argument to"))
                .body("'errors'[33].'path'.size()", equalTo(3))
                .body("'errors'[33].'path'[0]", containsString("currencies"))
                .body("'errors'[33].'path'[1]", numberMatches(33.0))
                .body("'errors'[33].'path'[2]", containsString("convert"))
                .body("'errors'[34].'message'", containsString("missing required argument to"))
                .body("'errors'[34].'path'.size()", equalTo(3))
                .body("'errors'[34].'path'[0]", containsString("currencies"))
                .body("'errors'[34].'path'[1]", numberMatches(34.0))
                .body("'errors'[34].'path'[2]", containsString("convert"))
                .body("'errors'[35].'message'", containsString("missing required argument to"))
                .body("'errors'[35].'path'.size()", equalTo(3))
                .body("'errors'[35].'path'[0]", containsString("currencies"))
                .body("'errors'[35].'path'[1]", numberMatches(35.0))
                .body("'errors'[35].'path'[2]", containsString("convert"))
                .body("'errors'[36].'message'", containsString("missing required argument to"))
                .body("'errors'[36].'path'.size()", equalTo(3))
                .body("'errors'[36].'path'[0]", containsString("currencies"))
                .body("'errors'[36].'path'[1]", numberMatches(36.0))
                .body("'errors'[36].'path'[2]", containsString("convert"))
                .body("'errors'[37].'message'", containsString("missing required argument to"))
                .body("'errors'[37].'path'.size()", equalTo(3))
                .body("'errors'[37].'path'[0]", containsString("currencies"))
                .body("'errors'[37].'path'[1]", numberMatches(37.0))
                .body("'errors'[37].'path'[2]", containsString("convert"))
                .body("'errors'[38].'message'", containsString("missing required argument to"))
                .body("'errors'[38].'path'.size()", equalTo(3))
                .body("'errors'[38].'path'[0]", containsString("currencies"))
                .body("'errors'[38].'path'[1]", numberMatches(38.0))
                .body("'errors'[38].'path'[2]", containsString("convert"))
                .body("'errors'[39].'message'", containsString("missing required argument to"))
                .body("'errors'[39].'path'.size()", equalTo(3))
                .body("'errors'[39].'path'[0]", containsString("currencies"))
                .body("'errors'[39].'path'[1]", numberMatches(39.0))
                .body("'errors'[39].'path'[2]", containsString("convert"))
                .body("'errors'[40].'message'", containsString("missing required argument to"))
                .body("'errors'[40].'path'.size()", equalTo(3))
                .body("'errors'[40].'path'[0]", containsString("currencies"))
                .body("'errors'[40].'path'[1]", numberMatches(40.0))
                .body("'errors'[40].'path'[2]", containsString("convert"))
                .body("'errors'[41].'message'", containsString("missing required argument to"))
                .body("'errors'[41].'path'.size()", equalTo(3))
                .body("'errors'[41].'path'[0]", containsString("currencies"))
                .body("'errors'[41].'path'[1]", numberMatches(41.0))
                .body("'errors'[41].'path'[2]", containsString("convert"))
                .body("'errors'[42].'message'", containsString("missing required argument to"))
                .body("'errors'[42].'path'.size()", equalTo(3))
                .body("'errors'[42].'path'[0]", containsString("currencies"))
                .body("'errors'[42].'path'[1]", numberMatches(42.0))
                .body("'errors'[42].'path'[2]", containsString("convert"))
                .body("'errors'[43].'message'", containsString("missing required argument to"))
                .body("'errors'[43].'path'.size()", equalTo(3))
                .body("'errors'[43].'path'[0]", containsString("currencies"))
                .body("'errors'[43].'path'[1]", numberMatches(43.0))
                .body("'errors'[43].'path'[2]", containsString("convert"))
                .body("'errors'[44].'message'", containsString("missing required argument to"))
                .body("'errors'[44].'path'.size()", equalTo(3))
                .body("'errors'[44].'path'[0]", containsString("currencies"))
                .body("'errors'[44].'path'[1]", numberMatches(44.0))
                .body("'errors'[44].'path'[2]", containsString("convert"))
                .body("'errors'[45].'message'", containsString("missing required argument to"))
                .body("'errors'[45].'path'.size()", equalTo(3))
                .body("'errors'[45].'path'[0]", containsString("currencies"))
                .body("'errors'[45].'path'[1]", numberMatches(45.0))
                .body("'errors'[45].'path'[2]", containsString("convert"))
                .body("'errors'[46].'message'", containsString("missing required argument to"))
                .body("'errors'[46].'path'.size()", equalTo(3))
                .body("'errors'[46].'path'[0]", containsString("currencies"))
                .body("'errors'[46].'path'[1]", numberMatches(46.0))
                .body("'errors'[46].'path'[2]", containsString("convert"))
                .body("'errors'[47].'message'", containsString("missing required argument to"))
                .body("'errors'[47].'path'.size()", equalTo(3))
                .body("'errors'[47].'path'[0]", containsString("currencies"))
                .body("'errors'[47].'path'[1]", numberMatches(47.0))
                .body("'errors'[47].'path'[2]", containsString("convert"))
                .body("'errors'[48].'message'", containsString("missing required argument to"))
                .body("'errors'[48].'path'.size()", equalTo(3))
                .body("'errors'[48].'path'[0]", containsString("currencies"))
                .body("'errors'[48].'path'[1]", numberMatches(48.0))
                .body("'errors'[48].'path'[2]", containsString("convert"))
                .body("'errors'[49].'message'", containsString("missing required argument to"))
                .body("'errors'[49].'path'.size()", equalTo(3))
                .body("'errors'[49].'path'[0]", containsString("currencies"))
                .body("'errors'[49].'path'[1]", numberMatches(49.0))
                .body("'errors'[49].'path'[2]", containsString("convert"))
                .body("'errors'[50].'message'", containsString("missing required argument to"))
                .body("'errors'[50].'path'.size()", equalTo(3))
                .body("'errors'[50].'path'[0]", containsString("currencies"))
                .body("'errors'[50].'path'[1]", numberMatches(50.0))
                .body("'errors'[50].'path'[2]", containsString("convert"))
                .body("'errors'[51].'message'", containsString("missing required argument to"))
                .body("'errors'[51].'path'.size()", equalTo(3))
                .body("'errors'[51].'path'[0]", containsString("currencies"))
                .body("'errors'[51].'path'[1]", numberMatches(51.0))
                .body("'errors'[51].'path'[2]", containsString("convert"))
                .body("'errors'[52].'message'", containsString("missing required argument to"))
                .body("'errors'[52].'path'.size()", equalTo(3))
                .body("'errors'[52].'path'[0]", containsString("currencies"))
                .body("'errors'[52].'path'[1]", numberMatches(52.0))
                .body("'errors'[52].'path'[2]", containsString("convert"))
                .body("'errors'[53].'message'", containsString("missing required argument to"))
                .body("'errors'[53].'path'.size()", equalTo(3))
                .body("'errors'[53].'path'[0]", containsString("currencies"))
                .body("'errors'[53].'path'[1]", numberMatches(53.0))
                .body("'errors'[53].'path'[2]", containsString("convert"))
                .body("'errors'[54].'message'", containsString("missing required argument to"))
                .body("'errors'[54].'path'.size()", equalTo(3))
                .body("'errors'[54].'path'[0]", containsString("currencies"))
                .body("'errors'[54].'path'[1]", numberMatches(54.0))
                .body("'errors'[54].'path'[2]", containsString("convert"))
                .body("'errors'[55].'message'", containsString("missing required argument to"))
                .body("'errors'[55].'path'.size()", equalTo(3))
                .body("'errors'[55].'path'[0]", containsString("currencies"))
                .body("'errors'[55].'path'[1]", numberMatches(55.0))
                .body("'errors'[55].'path'[2]", containsString("convert"))
                .body("'errors'[56].'message'", containsString("missing required argument to"))
                .body("'errors'[56].'path'.size()", equalTo(3))
                .body("'errors'[56].'path'[0]", containsString("currencies"))
                .body("'errors'[56].'path'[1]", numberMatches(56.0))
                .body("'errors'[56].'path'[2]", containsString("convert"))
                .body("'errors'[57].'message'", containsString("missing required argument to"))
                .body("'errors'[57].'path'.size()", equalTo(3))
                .body("'errors'[57].'path'[0]", containsString("currencies"))
                .body("'errors'[57].'path'[1]", numberMatches(57.0))
                .body("'errors'[57].'path'[2]", containsString("convert"))
                .body("'errors'[58].'message'", containsString("missing required argument to"))
                .body("'errors'[58].'path'.size()", equalTo(3))
                .body("'errors'[58].'path'[0]", containsString("currencies"))
                .body("'errors'[58].'path'[1]", numberMatches(58.0))
                .body("'errors'[58].'path'[2]", containsString("convert"))
                .body("'errors'[59].'message'", containsString("missing required argument to"))
                .body("'errors'[59].'path'.size()", equalTo(3))
                .body("'errors'[59].'path'[0]", containsString("currencies"))
                .body("'errors'[59].'path'[1]", numberMatches(59.0))
                .body("'errors'[59].'path'[2]", containsString("convert"))
                .body("'errors'[60].'message'", containsString("missing required argument to"))
                .body("'errors'[60].'path'.size()", equalTo(3))
                .body("'errors'[60].'path'[0]", containsString("currencies"))
                .body("'errors'[60].'path'[1]", numberMatches(60.0))
                .body("'errors'[60].'path'[2]", containsString("convert"))
                .body("'errors'[61].'message'", containsString("missing required argument to"))
                .body("'errors'[61].'path'.size()", equalTo(3))
                .body("'errors'[61].'path'[0]", containsString("currencies"))
                .body("'errors'[61].'path'[1]", numberMatches(61.0))
                .body("'errors'[61].'path'[2]", containsString("convert"))
                .body("'errors'[62].'message'", containsString("missing required argument to"))
                .body("'errors'[62].'path'.size()", equalTo(3))
                .body("'errors'[62].'path'[0]", containsString("currencies"))
                .body("'errors'[62].'path'[1]", numberMatches(62.0))
                .body("'errors'[62].'path'[2]", containsString("convert"))
                .body("'errors'[63].'message'", containsString("missing required argument to"))
                .body("'errors'[63].'path'.size()", equalTo(3))
                .body("'errors'[63].'path'[0]", containsString("currencies"))
                .body("'errors'[63].'path'[1]", numberMatches(63.0))
                .body("'errors'[63].'path'[2]", containsString("convert"))
                .body("'errors'[64].'message'", containsString("missing required argument to"))
                .body("'errors'[64].'path'.size()", equalTo(3))
                .body("'errors'[64].'path'[0]", containsString("currencies"))
                .body("'errors'[64].'path'[1]", numberMatches(64.0))
                .body("'errors'[64].'path'[2]", containsString("convert"))
                .body("'errors'[65].'message'", containsString("missing required argument to"))
                .body("'errors'[65].'path'.size()", equalTo(3))
                .body("'errors'[65].'path'[0]", containsString("currencies"))
                .body("'errors'[65].'path'[1]", numberMatches(65.0))
                .body("'errors'[65].'path'[2]", containsString("convert"))
                .body("'errors'[66].'message'", containsString("missing required argument to"))
                .body("'errors'[66].'path'.size()", equalTo(3))
                .body("'errors'[66].'path'[0]", containsString("currencies"))
                .body("'errors'[66].'path'[1]", numberMatches(66.0))
                .body("'errors'[66].'path'[2]", containsString("convert"))
                .body("'errors'[67].'message'", containsString("missing required argument to"))
                .body("'errors'[67].'path'.size()", equalTo(3))
                .body("'errors'[67].'path'[0]", containsString("currencies"))
                .body("'errors'[67].'path'[1]", numberMatches(67.0))
                .body("'errors'[67].'path'[2]", containsString("convert"))
                .body("'errors'[68].'message'", containsString("missing required argument to"))
                .body("'errors'[68].'path'.size()", equalTo(3))
                .body("'errors'[68].'path'[0]", containsString("currencies"))
                .body("'errors'[68].'path'[1]", numberMatches(68.0))
                .body("'errors'[68].'path'[2]", containsString("convert"))
                .body("'errors'[69].'message'", containsString("missing required argument to"))
                .body("'errors'[69].'path'.size()", equalTo(3))
                .body("'errors'[69].'path'[0]", containsString("currencies"))
                .body("'errors'[69].'path'[1]", numberMatches(69.0))
                .body("'errors'[69].'path'[2]", containsString("convert"))
                .body("'errors'[70].'message'", containsString("missing required argument to"))
                .body("'errors'[70].'path'.size()", equalTo(3))
                .body("'errors'[70].'path'[0]", containsString("currencies"))
                .body("'errors'[70].'path'[1]", numberMatches(70.0))
                .body("'errors'[70].'path'[2]", containsString("convert"))
                .body("'errors'[71].'message'", containsString("missing required argument to"))
                .body("'errors'[71].'path'.size()", equalTo(3))
                .body("'errors'[71].'path'[0]", containsString("currencies"))
                .body("'errors'[71].'path'[1]", numberMatches(71.0))
                .body("'errors'[71].'path'[2]", containsString("convert"))
                .body("'errors'[72].'message'", containsString("missing required argument to"))
                .body("'errors'[72].'path'.size()", equalTo(3))
                .body("'errors'[72].'path'[0]", containsString("currencies"))
                .body("'errors'[72].'path'[1]", numberMatches(72.0))
                .body("'errors'[72].'path'[2]", containsString("convert"))
                .body("'errors'[73].'message'", containsString("missing required argument to"))
                .body("'errors'[73].'path'.size()", equalTo(3))
                .body("'errors'[73].'path'[0]", containsString("currencies"))
                .body("'errors'[73].'path'[1]", numberMatches(73.0))
                .body("'errors'[73].'path'[2]", containsString("convert"))
                .body("'errors'[74].'message'", containsString("missing required argument to"))
                .body("'errors'[74].'path'.size()", equalTo(3))
                .body("'errors'[74].'path'[0]", containsString("currencies"))
                .body("'errors'[74].'path'[1]", numberMatches(74.0))
                .body("'errors'[74].'path'[2]", containsString("convert"))
                .body("'errors'[75].'message'", containsString("missing required argument to"))
                .body("'errors'[75].'path'.size()", equalTo(3))
                .body("'errors'[75].'path'[0]", containsString("currencies"))
                .body("'errors'[75].'path'[1]", numberMatches(75.0))
                .body("'errors'[75].'path'[2]", containsString("convert"))
                .body("'errors'[76].'message'", containsString("missing required argument to"))
                .body("'errors'[76].'path'.size()", equalTo(3))
                .body("'errors'[76].'path'[0]", containsString("currencies"))
                .body("'errors'[76].'path'[1]", numberMatches(76.0))
                .body("'errors'[76].'path'[2]", containsString("convert"))
                .body("'errors'[77].'message'", containsString("missing required argument to"))
                .body("'errors'[77].'path'.size()", equalTo(3))
                .body("'errors'[77].'path'[0]", containsString("currencies"))
                .body("'errors'[77].'path'[1]", numberMatches(77.0))
                .body("'errors'[77].'path'[2]", containsString("convert"))
                .body("'errors'[78].'message'", containsString("missing required argument to"))
                .body("'errors'[78].'path'.size()", equalTo(3))
                .body("'errors'[78].'path'[0]", containsString("currencies"))
                .body("'errors'[78].'path'[1]", numberMatches(78.0))
                .body("'errors'[78].'path'[2]", containsString("convert"))
                .body("'errors'[79].'message'", containsString("missing required argument to"))
                .body("'errors'[79].'path'.size()", equalTo(3))
                .body("'errors'[79].'path'[0]", containsString("currencies"))
                .body("'errors'[79].'path'[1]", numberMatches(79.0))
                .body("'errors'[79].'path'[2]", containsString("convert"))
                .body("'errors'[80].'message'", containsString("missing required argument to"))
                .body("'errors'[80].'path'.size()", equalTo(3))
                .body("'errors'[80].'path'[0]", containsString("currencies"))
                .body("'errors'[80].'path'[1]", numberMatches(80.0))
                .body("'errors'[80].'path'[2]", containsString("convert"))
                .body("'errors'[81].'message'", containsString("missing required argument to"))
                .body("'errors'[81].'path'.size()", equalTo(3))
                .body("'errors'[81].'path'[0]", containsString("currencies"))
                .body("'errors'[81].'path'[1]", numberMatches(81.0))
                .body("'errors'[81].'path'[2]", containsString("convert"))
                .body("'errors'[82].'message'", containsString("missing required argument to"))
                .body("'errors'[82].'path'.size()", equalTo(3))
                .body("'errors'[82].'path'[0]", containsString("currencies"))
                .body("'errors'[82].'path'[1]", numberMatches(82.0))
                .body("'errors'[82].'path'[2]", containsString("convert"))
                .body("'errors'[83].'message'", containsString("missing required argument to"))
                .body("'errors'[83].'path'.size()", equalTo(3))
                .body("'errors'[83].'path'[0]", containsString("currencies"))
                .body("'errors'[83].'path'[1]", numberMatches(83.0))
                .body("'errors'[83].'path'[2]", containsString("convert"))
                .body("'errors'[84].'message'", containsString("missing required argument to"))
                .body("'errors'[84].'path'.size()", equalTo(3))
                .body("'errors'[84].'path'[0]", containsString("currencies"))
                .body("'errors'[84].'path'[1]", numberMatches(84.0))
                .body("'errors'[84].'path'[2]", containsString("convert"))
                .body("'errors'[85].'message'", containsString("missing required argument to"))
                .body("'errors'[85].'path'.size()", equalTo(3))
                .body("'errors'[85].'path'[0]", containsString("currencies"))
                .body("'errors'[85].'path'[1]", numberMatches(85.0))
                .body("'errors'[85].'path'[2]", containsString("convert"))
                .body("'errors'[86].'message'", containsString("missing required argument to"))
                .body("'errors'[86].'path'.size()", equalTo(3))
                .body("'errors'[86].'path'[0]", containsString("currencies"))
                .body("'errors'[86].'path'[1]", numberMatches(86.0))
                .body("'errors'[86].'path'[2]", containsString("convert"))
                .body("'errors'[87].'message'", containsString("missing required argument to"))
                .body("'errors'[87].'path'.size()", equalTo(3))
                .body("'errors'[87].'path'[0]", containsString("currencies"))
                .body("'errors'[87].'path'[1]", numberMatches(87.0))
                .body("'errors'[87].'path'[2]", containsString("convert"))
                .body("'errors'[88].'message'", containsString("missing required argument to"))
                .body("'errors'[88].'path'.size()", equalTo(3))
                .body("'errors'[88].'path'[0]", containsString("currencies"))
                .body("'errors'[88].'path'[1]", numberMatches(88.0))
                .body("'errors'[88].'path'[2]", containsString("convert"))
                .body("'errors'[89].'message'", containsString("missing required argument to"))
                .body("'errors'[89].'path'.size()", equalTo(3))
                .body("'errors'[89].'path'[0]", containsString("currencies"))
                .body("'errors'[89].'path'[1]", numberMatches(89.0))
                .body("'errors'[89].'path'[2]", containsString("convert"))
                .body("'errors'[90].'message'", containsString("missing required argument to"))
                .body("'errors'[90].'path'.size()", equalTo(3))
                .body("'errors'[90].'path'[0]", containsString("currencies"))
                .body("'errors'[90].'path'[1]", numberMatches(90.0))
                .body("'errors'[90].'path'[2]", containsString("convert"))
                .body("'errors'[91].'message'", containsString("missing required argument to"))
                .body("'errors'[91].'path'.size()", equalTo(3))
                .body("'errors'[91].'path'[0]", containsString("currencies"))
                .body("'errors'[91].'path'[1]", numberMatches(91.0))
                .body("'errors'[91].'path'[2]", containsString("convert"))
                .body("'errors'[92].'message'", containsString("missing required argument to"))
                .body("'errors'[92].'path'.size()", equalTo(3))
                .body("'errors'[92].'path'[0]", containsString("currencies"))
                .body("'errors'[92].'path'[1]", numberMatches(92.0))
                .body("'errors'[92].'path'[2]", containsString("convert"))
                .body("'errors'[93].'message'", containsString("missing required argument to"))
                .body("'errors'[93].'path'.size()", equalTo(3))
                .body("'errors'[93].'path'[0]", containsString("currencies"))
                .body("'errors'[93].'path'[1]", numberMatches(93.0))
                .body("'errors'[93].'path'[2]", containsString("convert"))
                .body("'errors'[94].'message'", containsString("missing required argument to"))
                .body("'errors'[94].'path'.size()", equalTo(3))
                .body("'errors'[94].'path'[0]", containsString("currencies"))
                .body("'errors'[94].'path'[1]", numberMatches(94.0))
                .body("'errors'[94].'path'[2]", containsString("convert"))
                .body("'errors'[95].'message'", containsString("missing required argument to"))
                .body("'errors'[95].'path'.size()", equalTo(3))
                .body("'errors'[95].'path'[0]", containsString("currencies"))
                .body("'errors'[95].'path'[1]", numberMatches(95.0))
                .body("'errors'[95].'path'[2]", containsString("convert"))
                .body("'errors'[96].'message'", containsString("missing required argument to"))
                .body("'errors'[96].'path'.size()", equalTo(3))
                .body("'errors'[96].'path'[0]", containsString("currencies"))
                .body("'errors'[96].'path'[1]", numberMatches(96.0))
                .body("'errors'[96].'path'[2]", containsString("convert"))
                .body("'errors'[97].'message'", containsString("missing required argument to"))
                .body("'errors'[97].'path'.size()", equalTo(3))
                .body("'errors'[97].'path'[0]", containsString("currencies"))
                .body("'errors'[97].'path'[1]", numberMatches(97.0))
                .body("'errors'[97].'path'[2]", containsString("convert"))
                .body("'errors'[98].'message'", containsString("missing required argument to"))
                .body("'errors'[98].'path'.size()", equalTo(3))
                .body("'errors'[98].'path'[0]", containsString("currencies"))
                .body("'errors'[98].'path'[1]", numberMatches(98.0))
                .body("'errors'[98].'path'[2]", containsString("convert"))
                .body("'errors'[99].'message'", containsString("missing required argument to"))
                .body("'errors'[99].'path'.size()", equalTo(3))
                .body("'errors'[99].'path'[0]", containsString("currencies"))
                .body("'errors'[99].'path'[1]", numberMatches(99.0))
                .body("'errors'[99].'path'[2]", containsString("convert"))
                .body("'errors'[100].'message'", containsString("missing required argument to"))
                .body("'errors'[100].'path'.size()", equalTo(3))
                .body("'errors'[100].'path'[0]", containsString("currencies"))
                .body("'errors'[100].'path'[1]", numberMatches(100.0))
                .body("'errors'[100].'path'[2]", containsString("convert"))
                .body("'errors'[101].'message'", containsString("missing required argument to"))
                .body("'errors'[101].'path'.size()", equalTo(3))
                .body("'errors'[101].'path'[0]", containsString("currencies"))
                .body("'errors'[101].'path'[1]", numberMatches(101.0))
                .body("'errors'[101].'path'[2]", containsString("convert"))
                .body("'errors'[102].'message'", containsString("missing required argument to"))
                .body("'errors'[102].'path'.size()", equalTo(3))
                .body("'errors'[102].'path'[0]", containsString("currencies"))
                .body("'errors'[102].'path'[1]", numberMatches(102.0))
                .body("'errors'[102].'path'[2]", containsString("convert"))
                .body("'errors'[103].'message'", containsString("missing required argument to"))
                .body("'errors'[103].'path'.size()", equalTo(3))
                .body("'errors'[103].'path'[0]", containsString("currencies"))
                .body("'errors'[103].'path'[1]", numberMatches(103.0))
                .body("'errors'[103].'path'[2]", containsString("convert"))
                .body("'errors'[104].'message'", containsString("missing required argument to"))
                .body("'errors'[104].'path'.size()", equalTo(3))
                .body("'errors'[104].'path'[0]", containsString("currencies"))
                .body("'errors'[104].'path'[1]", numberMatches(104.0))
                .body("'errors'[104].'path'[2]", containsString("convert"))
                .body("'errors'[105].'message'", containsString("missing required argument to"))
                .body("'errors'[105].'path'.size()", equalTo(3))
                .body("'errors'[105].'path'[0]", containsString("currencies"))
                .body("'errors'[105].'path'[1]", numberMatches(105.0))
                .body("'errors'[105].'path'[2]", containsString("convert"))
                .body("'errors'[106].'message'", containsString("missing required argument to"))
                .body("'errors'[106].'path'.size()", equalTo(3))
                .body("'errors'[106].'path'[0]", containsString("currencies"))
                .body("'errors'[106].'path'[1]", numberMatches(106.0))
                .body("'errors'[106].'path'[2]", containsString("convert"))
                .body("'errors'[107].'message'", containsString("missing required argument to"))
                .body("'errors'[107].'path'.size()", equalTo(3))
                .body("'errors'[107].'path'[0]", containsString("currencies"))
                .body("'errors'[107].'path'[1]", numberMatches(107.0))
                .body("'errors'[107].'path'[2]", containsString("convert"));
    }
    
    
    @Test
    public void test_7() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { url  (url : \\\"\\\")  {port,query,scheme,url}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.isEmpty()", is(true))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("url does not have a scheme"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("url"));
    }
    
    
    @Test
    public void test_8() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { emailAddress  (address : \\\"CLqi87\\\")  {address,domainName{aaaa{city{country{alpha3Code,callingCodes,currencies{convert,isoCode,name,unitSymbols},id,languages{alpha2Code},vatRate},geonamesID,id,population,timeZone{id,offset}},type},name},host,local,ok}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.isEmpty()", is(true))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Not a valid address"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("emailAddress"));
    }
    
    
    @Test
    public void test_9() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { countries  (limit : 600,skip : 153, where:{})  {callingCodes,capital{continent{geonamesID,id},location{lat},name,population,timeZone{id,offset}},continent{id},geonamesID,languages{alpha2Code,id,name},population}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'countries'.size()", equalTo(41))
                .body("'data'.'countries'[0].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[0].'callingCodes'", hasItems("+421"))
                .body("'data'.'countries'[0].'capital'.'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[0].'capital'.'location'.'lat'", numberMatches(48.144722))
                .body("'data'.'countries'[0].'capital'.'name'", containsString("Bratislava"))
                .body("'data'.'countries'[0].'capital'.'population'", numberMatches(429564.0))
                .body("'data'.'countries'[0].'capital'.'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'countries'[0].'geonamesID'", numberMatches(3057568.0))
                .body("'data'.'countries'[0].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[0].'languages'[0].'alpha2Code'", containsString("sk"))
                .body("'data'.'countries'[0].'languages'[0].'name'", containsString("Slovak"))
                .body("'data'.'countries'[0].'population'", numberMatches(5397036.0))
                .body("'data'.'countries'[1].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[1].'callingCodes'", hasItems("+386"))
                .body("'data'.'countries'[1].'capital'.'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[1].'capital'.'location'.'lat'", numberMatches(46.05))
                .body("'data'.'countries'[1].'capital'.'name'", containsString("Ljubljana"))
                .body("'data'.'countries'[1].'capital'.'population'", numberMatches(286745.0))
                .body("'data'.'countries'[1].'capital'.'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'countries'[1].'geonamesID'", numberMatches(3190538.0))
                .body("'data'.'countries'[1].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[1].'languages'[0].'alpha2Code'", containsString("sl"))
                .body("'data'.'countries'[1].'languages'[0].'name'", containsString("Slovene"))
                .body("'data'.'countries'[1].'population'", numberMatches(2066880.0))
                .body("'data'.'countries'[2].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[2].'callingCodes'", hasItems("+677"))
                .body("'data'.'countries'[2].'capital'.'continent'.'geonamesID'", numberMatches(6255151.0))
                .body("'data'.'countries'[2].'capital'.'location'.'lat'", numberMatches(-9.433333))
                .body("'data'.'countries'[2].'capital'.'name'", containsString("Honiara"))
                .body("'data'.'countries'[2].'capital'.'population'", numberMatches(84520.0))
                .body("'data'.'countries'[2].'capital'.'timeZone'", nullValue())
                .body("'data'.'countries'[2].'geonamesID'", numberMatches(2103350.0))
                .body("'data'.'countries'[2].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[2].'languages'[0].'alpha2Code'", containsString("en"))
                .body("'data'.'countries'[2].'languages'[0].'name'", containsString("English"))
                .body("'data'.'countries'[2].'population'", numberMatches(611343.0))
                .body("'data'.'countries'[3].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[3].'callingCodes'", hasItems("+252"))
                .body("'data'.'countries'[3].'capital'.'continent'.'geonamesID'", numberMatches(6255146.0))
                .body("'data'.'countries'[3].'capital'.'location'.'lat'", numberMatches(2.040833))
                .body("'data'.'countries'[3].'capital'.'name'", containsString("Mogadishu"))
                .body("'data'.'countries'[3].'capital'.'population'", numberMatches(2120000.0))
                .body("'data'.'countries'[3].'capital'.'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'countries'[3].'geonamesID'", numberMatches(51537.0))
                .body("'data'.'countries'[3].'languages'.size()", equalTo(2))
                .body("'data'.'countries'[3].'languages'[0].'alpha2Code'", containsString("ar"))
                .body("'data'.'countries'[3].'languages'[0].'name'", containsString("Arabic"))
                .body("'data'.'countries'[3].'languages'[1].'alpha2Code'", containsString("so"))
                .body("'data'.'countries'[3].'languages'[1].'name'", containsString("Somali"))
                .body("'data'.'countries'[3].'population'", numberMatches(1.1031386E7))
                .body("'data'.'countries'[4].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[4].'callingCodes'", hasItems("+27"))
                .body("'data'.'countries'[4].'capital'.'continent'.'geonamesID'", numberMatches(6255146.0))
                .body("'data'.'countries'[4].'capital'.'location'.'lat'", numberMatches(-29.1))
                .body("'data'.'countries'[4].'capital'.'name'", containsString("Bloemfontein"))
                .body("'data'.'countries'[4].'capital'.'population'", numberMatches(256185.0))
                .body("'data'.'countries'[4].'capital'.'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'countries'[4].'geonamesID'", numberMatches(953987.0))
                .body("'data'.'countries'[4].'languages'.size()", equalTo(10))
                .body("'data'.'countries'[4].'languages'[0].'alpha2Code'", containsString("af"))
                .body("'data'.'countries'[4].'languages'[0].'name'", containsString("Afrikaans"))
                .body("'data'.'countries'[4].'languages'[1].'alpha2Code'", containsString("en"))
                .body("'data'.'countries'[4].'languages'[1].'name'", containsString("English"))
                .body("'data'.'countries'[4].'languages'[2].'alpha2Code'", containsString("st"))
                .body("'data'.'countries'[4].'languages'[2].'name'", containsString("Sesotho"))
                .body("'data'.'countries'[4].'languages'[3].'alpha2Code'", containsString("nr"))
                .body("'data'.'countries'[4].'languages'[3].'name'", containsString("Southern Ndebele"))
                .body("'data'.'countries'[4].'languages'[4].'alpha2Code'", containsString("ss"))
                .body("'data'.'countries'[4].'languages'[4].'name'", containsString("Swazi"))
                .body("'data'.'countries'[4].'languages'[5].'alpha2Code'", containsString("ts"))
                .body("'data'.'countries'[4].'languages'[5].'name'", containsString("Tsonga"))
                .body("'data'.'countries'[4].'languages'[6].'alpha2Code'", containsString("tn"))
                .body("'data'.'countries'[4].'languages'[6].'name'", containsString("Tswana"))
                .body("'data'.'countries'[4].'languages'[7].'alpha2Code'", containsString("ve"))
                .body("'data'.'countries'[4].'languages'[7].'name'", containsString("Venda"))
                .body("'data'.'countries'[4].'languages'[8].'alpha2Code'", containsString("xh"))
                .body("'data'.'countries'[4].'languages'[8].'name'", containsString("Xhosa"))
                .body("'data'.'countries'[4].'languages'[9].'alpha2Code'", containsString("zu"))
                .body("'data'.'countries'[4].'languages'[9].'name'", containsString("Zulu"))
                .body("'data'.'countries'[4].'population'", numberMatches(5.962235E7))
                .body("'data'.'countries'[5].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[5].'callingCodes'", hasItems("+82"))
                .body("'data'.'countries'[5].'capital'.'continent'.'geonamesID'", numberMatches(6255147.0))
                .body("'data'.'countries'[5].'capital'.'location'.'lat'", numberMatches(37.56))
                .body("'data'.'countries'[5].'capital'.'name'", containsString("Seoul"))
                .body("'data'.'countries'[5].'capital'.'population'", numberMatches(9668465.0))
                .body("'data'.'countries'[5].'capital'.'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'countries'[5].'geonamesID'", numberMatches(1835841.0))
                .body("'data'.'countries'[5].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[5].'languages'[0].'alpha2Code'", containsString("ko"))
                .body("'data'.'countries'[5].'languages'[0].'name'", containsString("Korean"))
                .body("'data'.'countries'[5].'population'", numberMatches(5.1466201E7))
                .body("'data'.'countries'[6].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[6].'callingCodes'", hasItems("+211"))
                .body("'data'.'countries'[6].'capital'.'continent'.'geonamesID'", numberMatches(6255146.0))
                .body("'data'.'countries'[6].'capital'.'location'.'lat'", numberMatches(4.85))
                .body("'data'.'countries'[6].'capital'.'name'", containsString("Juba"))
                .body("'data'.'countries'[6].'capital'.'population'", numberMatches(372410.0))
                .body("'data'.'countries'[6].'capital'.'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'countries'[6].'geonamesID'", numberMatches(7909807.0))
                .body("'data'.'countries'[6].'languages'.size()", equalTo(2))
                .body("'data'.'countries'[6].'languages'[0].'alpha2Code'", containsString("ar"))
                .body("'data'.'countries'[6].'languages'[0].'name'", containsString("Arabic"))
                .body("'data'.'countries'[6].'languages'[1].'alpha2Code'", containsString("en"))
                .body("'data'.'countries'[6].'languages'[1].'name'", containsString("English"))
                .body("'data'.'countries'[6].'population'", numberMatches(1.2575714E7))
                .body("'data'.'countries'[7].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[7].'callingCodes'", hasItems("+34"))
                .body("'data'.'countries'[7].'capital'.'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[7].'capital'.'location'.'lat'", numberMatches(40.418889))
                .body("'data'.'countries'[7].'capital'.'name'", containsString("Madrid"))
                .body("'data'.'countries'[7].'capital'.'population'", numberMatches(3334730.0))
                .body("'data'.'countries'[7].'capital'.'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'countries'[7].'geonamesID'", numberMatches(2510769.0))
                .body("'data'.'countries'[7].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[7].'languages'[0].'alpha2Code'", containsString("es"))
                .body("'data'.'countries'[7].'languages'[0].'name'", containsString("Spanish"))
                .body("'data'.'countries'[7].'population'", numberMatches(4.6733038E7))
                .body("'data'.'countries'[8].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[8].'callingCodes'", hasItems("+94"))
                .body("'data'.'countries'[8].'capital'.'continent'.'geonamesID'", numberMatches(6255147.0))
                .body("'data'.'countries'[8].'capital'.'location'.'lat'", numberMatches(6.9))
                .body("'data'.'countries'[8].'capital'.'name'", containsString("Sri Jayawardenepura Kotte"))
                .body("'data'.'countries'[8].'capital'.'population'", numberMatches(115826.0))
                .body("'data'.'countries'[8].'capital'.'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'countries'[8].'geonamesID'", numberMatches(1227603.0))
                .body("'data'.'countries'[8].'languages'.size()", equalTo(2))
                .body("'data'.'countries'[8].'languages'[0].'alpha2Code'", containsString("si"))
                .body("'data'.'countries'[8].'languages'[0].'name'", containsString("Sinhala"))
                .body("'data'.'countries'[8].'languages'[1].'alpha2Code'", containsString("ta"))
                .body("'data'.'countries'[8].'languages'[1].'name'", containsString("Tamil"))
                .body("'data'.'countries'[8].'population'", numberMatches(2.1444E7))
                .body("'data'.'countries'[9].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[9].'callingCodes'", hasItems("+249"))
                .body("'data'.'countries'[9].'capital'.'continent'.'geonamesID'", numberMatches(6255146.0))
                .body("'data'.'countries'[9].'capital'.'location'.'lat'", numberMatches(15.60308))
                .body("'data'.'countries'[9].'capital'.'name'", containsString("Khartoum"))
                .body("'data'.'countries'[9].'capital'.'population'", numberMatches(5345000.0))
                .body("'data'.'countries'[9].'capital'.'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'countries'[9].'geonamesID'", numberMatches(366755.0))
                .body("'data'.'countries'[9].'languages'.size()", equalTo(2))
                .body("'data'.'countries'[9].'languages'[0].'alpha2Code'", containsString("ar"))
                .body("'data'.'countries'[9].'languages'[0].'name'", containsString("Arabic"))
                .body("'data'.'countries'[9].'languages'[1].'alpha2Code'", containsString("en"))
                .body("'data'.'countries'[9].'languages'[1].'name'", containsString("English"))
                .body("'data'.'countries'[9].'population'", numberMatches(4.053333E7))
                .body("'data'.'countries'[10].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[10].'callingCodes'", hasItems("+597"))
                .body("'data'.'countries'[10].'capital'.'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[10].'capital'.'location'.'lat'", numberMatches(5.866667))
                .body("'data'.'countries'[10].'capital'.'name'", containsString("Paramaribo"))
                .body("'data'.'countries'[10].'capital'.'population'", numberMatches(223757.0))
                .body("'data'.'countries'[10].'capital'.'timeZone'.'offset'", numberMatches(-3.0))
                .body("'data'.'countries'[10].'geonamesID'", numberMatches(3382998.0))
                .body("'data'.'countries'[10].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[10].'languages'[0].'alpha2Code'", containsString("nl"))
                .body("'data'.'countries'[10].'languages'[0].'name'", containsString("Dutch"))
                .body("'data'.'countries'[10].'population'", numberMatches(563402.0))
                .body("'data'.'countries'[11].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[11].'callingCodes'", hasItems("+46"))
                .body("'data'.'countries'[11].'capital'.'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[11].'capital'.'location'.'lat'", numberMatches(59.329444))
                .body("'data'.'countries'[11].'capital'.'name'", containsString("Stockholm"))
                .body("'data'.'countries'[11].'capital'.'population'", numberMatches(972647.0))
                .body("'data'.'countries'[11].'capital'.'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'countries'[11].'geonamesID'", numberMatches(2661886.0))
                .body("'data'.'countries'[11].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[11].'languages'[0].'alpha2Code'", containsString("sv"))
                .body("'data'.'countries'[11].'languages'[0].'name'", containsString("Swedish"))
                .body("'data'.'countries'[11].'population'", numberMatches(1.0409248E7))
                .body("'data'.'countries'[12].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[12].'callingCodes'", hasItems("+41"))
                .body("'data'.'countries'[12].'capital'.'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[12].'capital'.'location'.'lat'", numberMatches(46.94798))
                .body("'data'.'countries'[12].'capital'.'name'", containsString("Bern"))
                .body("'data'.'countries'[12].'capital'.'population'", numberMatches(133798.0))
                .body("'data'.'countries'[12].'capital'.'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'countries'[12].'geonamesID'", numberMatches(2658434.0))
                .body("'data'.'countries'[12].'languages'.size()", equalTo(4))
                .body("'data'.'countries'[12].'languages'[0].'alpha2Code'", containsString("fr"))
                .body("'data'.'countries'[12].'languages'[0].'name'", containsString("French"))
                .body("'data'.'countries'[12].'languages'[1].'alpha2Code'", containsString("de"))
                .body("'data'.'countries'[12].'languages'[1].'name'", containsString("German"))
                .body("'data'.'countries'[12].'languages'[2].'alpha2Code'", containsString("it"))
                .body("'data'.'countries'[12].'languages'[2].'name'", containsString("Italian"))
                .body("'data'.'countries'[12].'languages'[3].'alpha2Code'", containsString("rm"))
                .body("'data'.'countries'[12].'languages'[3].'name'", containsString("Romansh"))
                .body("'data'.'countries'[12].'population'", numberMatches(8466017.0))
                .body("'data'.'countries'[13].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[13].'callingCodes'", hasItems("+963"))
                .body("'data'.'countries'[13].'capital'.'continent'.'geonamesID'", numberMatches(6255147.0))
                .body("'data'.'countries'[13].'capital'.'location'.'lat'", numberMatches(33.513056))
                .body("'data'.'countries'[13].'capital'.'name'", containsString("Damascus"))
                .body("'data'.'countries'[13].'capital'.'population'", numberMatches(2079000.0))
                .body("'data'.'countries'[13].'capital'.'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'countries'[13].'geonamesID'", numberMatches(163843.0))
                .body("'data'.'countries'[13].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[13].'languages'[0].'alpha2Code'", containsString("ar"))
                .body("'data'.'countries'[13].'languages'[0].'name'", containsString("Arabic"))
                .body("'data'.'countries'[13].'population'", numberMatches(1.8499181E7))
                .body("'data'.'countries'[14].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[14].'callingCodes'", hasItems("+239"))
                .body("'data'.'countries'[14].'capital'.'continent'.'geonamesID'", numberMatches(6255146.0))
                .body("'data'.'countries'[14].'capital'.'location'.'lat'", numberMatches(0.333333))
                .body("'data'.'countries'[14].'capital'.'name'", containsString("São Tomé"))
                .body("'data'.'countries'[14].'capital'.'population'", numberMatches(56166.0))
                .body("'data'.'countries'[14].'capital'.'timeZone'", nullValue())
                .body("'data'.'countries'[14].'geonamesID'", numberMatches(2410758.0))
                .body("'data'.'countries'[14].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[14].'languages'[0].'alpha2Code'", containsString("pt"))
                .body("'data'.'countries'[14].'languages'[0].'name'", containsString("Portuguese"))
                .body("'data'.'countries'[14].'population'", numberMatches(204327.0))
                .body("'data'.'countries'[15].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[15].'callingCodes'", hasItems("+886"))
                .body("'data'.'countries'[15].'capital'.'continent'.'geonamesID'", numberMatches(6255147.0))
                .body("'data'.'countries'[15].'capital'.'location'.'lat'", numberMatches(25.047778))
                .body("'data'.'countries'[15].'capital'.'name'", containsString("Taipei"))
                .body("'data'.'countries'[15].'capital'.'population'", numberMatches(2684567.0))
                .body("'data'.'countries'[15].'capital'.'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'countries'[15].'geonamesID'", numberMatches(1668284.0))
                .body("'data'.'countries'[15].'languages'.size()", equalTo(0))
                .body("'data'.'countries'[15].'population'", numberMatches(2.3593794E7))
                .body("'data'.'countries'[16].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[16].'callingCodes'", hasItems("+992"))
                .body("'data'.'countries'[16].'capital'.'continent'.'geonamesID'", numberMatches(6255147.0))
                .body("'data'.'countries'[16].'capital'.'location'.'lat'", numberMatches(38.573056))
                .body("'data'.'countries'[16].'capital'.'name'", containsString("Dushanbe"))
                .body("'data'.'countries'[16].'capital'.'population'", numberMatches(880300.0))
                .body("'data'.'countries'[16].'capital'.'timeZone'.'offset'", numberMatches(5.0))
                .body("'data'.'countries'[16].'geonamesID'", numberMatches(1220409.0))
                .body("'data'.'countries'[16].'languages'.size()", equalTo(2))
                .body("'data'.'countries'[16].'languages'[0].'alpha2Code'", containsString("ru"))
                .body("'data'.'countries'[16].'languages'[0].'name'", containsString("Russian"))
                .body("'data'.'countries'[16].'languages'[1].'alpha2Code'", containsString("tg"))
                .body("'data'.'countries'[16].'languages'[1].'name'", containsString("Tajik"))
                .body("'data'.'countries'[16].'population'", numberMatches(8921343.0))
                .body("'data'.'countries'[17].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[17].'callingCodes'", hasItems("+255"))
                .body("'data'.'countries'[17].'capital'.'continent'.'geonamesID'", numberMatches(6255146.0))
                .body("'data'.'countries'[17].'capital'.'location'.'lat'", numberMatches(-6.1835))
                .body("'data'.'countries'[17].'capital'.'name'", containsString("Dodoma"))
                .body("'data'.'countries'[17].'capital'.'population'", numberMatches(410956.0))
                .body("'data'.'countries'[17].'capital'.'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'countries'[17].'geonamesID'", numberMatches(149590.0))
                .body("'data'.'countries'[17].'languages'.size()", equalTo(2))
                .body("'data'.'countries'[17].'languages'[0].'alpha2Code'", containsString("en"))
                .body("'data'.'countries'[17].'languages'[0].'name'", containsString("English"))
                .body("'data'.'countries'[17].'languages'[1].'alpha2Code'", containsString("sw"))
                .body("'data'.'countries'[17].'languages'[1].'name'", containsString("Swahili"))
                .body("'data'.'countries'[17].'population'", numberMatches(5.7310019E7))
                .body("'data'.'countries'[18].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[18].'callingCodes'", hasItems("+66"))
                .body("'data'.'countries'[18].'capital'.'continent'.'geonamesID'", numberMatches(6255147.0))
                .body("'data'.'countries'[18].'capital'.'location'.'lat'", numberMatches(13.75))
                .body("'data'.'countries'[18].'capital'.'name'", containsString("Bangkok"))
                .body("'data'.'countries'[18].'capital'.'population'", numberMatches(5696409.0))
                .body("'data'.'countries'[18].'capital'.'timeZone'.'offset'", numberMatches(7.0))
                .body("'data'.'countries'[18].'geonamesID'", numberMatches(1605651.0))
                .body("'data'.'countries'[18].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[18].'languages'[0].'alpha2Code'", containsString("th"))
                .body("'data'.'countries'[18].'languages'[0].'name'", containsString("Thai"))
                .body("'data'.'countries'[18].'population'", numberMatches(6.593155E7))
                .body("'data'.'countries'[19].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[19].'callingCodes'", hasItems("+1242"))
                .body("'data'.'countries'[19].'capital'.'continent'.'geonamesID'", numberMatches(6255149.0))
                .body("'data'.'countries'[19].'capital'.'location'.'lat'", numberMatches(25.066667))
                .body("'data'.'countries'[19].'capital'.'name'", containsString("Nassau"))
                .body("'data'.'countries'[19].'capital'.'population'", numberMatches(274400.0))
                .body("'data'.'countries'[19].'capital'.'timeZone'", nullValue())
                .body("'data'.'countries'[19].'geonamesID'", numberMatches(3572887.0))
                .body("'data'.'countries'[19].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[19].'languages'[0].'alpha2Code'", containsString("en"))
                .body("'data'.'countries'[19].'languages'[0].'name'", containsString("English"))
                .body("'data'.'countries'[19].'population'", numberMatches(395361.0))
                .body("'data'.'countries'[20].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[20].'callingCodes'", hasItems("+220"))
                .body("'data'.'countries'[20].'capital'.'continent'.'geonamesID'", numberMatches(6255146.0))
                .body("'data'.'countries'[20].'capital'.'location'.'lat'", numberMatches(13.453056))
                .body("'data'.'countries'[20].'capital'.'name'", containsString("Banjul"))
                .body("'data'.'countries'[20].'capital'.'population'", numberMatches(31356.0))
                .body("'data'.'countries'[20].'capital'.'timeZone'", nullValue())
                .body("'data'.'countries'[20].'geonamesID'", numberMatches(2413451.0))
                .body("'data'.'countries'[20].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[20].'languages'[0].'alpha2Code'", containsString("en"))
                .body("'data'.'countries'[20].'languages'[0].'name'", containsString("English"))
                .body("'data'.'countries'[20].'population'", numberMatches(2100568.0))
                .body("'data'.'countries'[21].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[21].'callingCodes'", hasItems("+228"))
                .body("'data'.'countries'[21].'capital'.'continent'.'geonamesID'", numberMatches(6255146.0))
                .body("'data'.'countries'[21].'capital'.'location'.'lat'", numberMatches(6.131944))
                .body("'data'.'countries'[21].'capital'.'name'", containsString("Lomé"))
                .body("'data'.'countries'[21].'capital'.'population'", numberMatches(837437.0))
                .body("'data'.'countries'[21].'capital'.'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'countries'[21].'geonamesID'", numberMatches(2363686.0))
                .body("'data'.'countries'[21].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[21].'languages'[0].'alpha2Code'", containsString("fr"))
                .body("'data'.'countries'[21].'languages'[0].'name'", containsString("French"))
                .body("'data'.'countries'[21].'population'", numberMatches(7797694.0))
                .body("'data'.'countries'[22].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[22].'callingCodes'", hasItems("+676"))
                .body("'data'.'countries'[22].'capital'.'continent'.'geonamesID'", numberMatches(6255151.0))
                .body("'data'.'countries'[22].'capital'.'location'.'lat'", numberMatches(-21.134722))
                .body("'data'.'countries'[22].'capital'.'name'", containsString("Nuku'alofa"))
                .body("'data'.'countries'[22].'capital'.'population'", numberMatches(23221.0))
                .body("'data'.'countries'[22].'capital'.'timeZone'.'offset'", numberMatches(13.0))
                .body("'data'.'countries'[22].'geonamesID'", numberMatches(4032283.0))
                .body("'data'.'countries'[22].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[22].'languages'[0].'alpha2Code'", containsString("en"))
                .body("'data'.'countries'[22].'languages'[0].'name'", containsString("English"))
                .body("'data'.'countries'[22].'population'", numberMatches(108020.0))
                .body("'data'.'countries'[23].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[23].'callingCodes'", hasItems("+1868"))
                .body("'data'.'countries'[23].'capital'.'continent'.'geonamesID'", numberMatches(6255149.0))
                .body("'data'.'countries'[23].'capital'.'location'.'lat'", numberMatches(10.666667))
                .body("'data'.'countries'[23].'capital'.'name'", containsString("Port of Spain"))
                .body("'data'.'countries'[23].'capital'.'population'", numberMatches(37074.0))
                .body("'data'.'countries'[23].'capital'.'timeZone'.'offset'", numberMatches(-4.0))
                .body("'data'.'countries'[23].'geonamesID'", numberMatches(3573591.0))
                .body("'data'.'countries'[23].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[23].'languages'[0].'alpha2Code'", containsString("en"))
                .body("'data'.'countries'[23].'languages'[0].'name'", containsString("English"))
                .body("'data'.'countries'[23].'population'", numberMatches(1369125.0))
                .body("'data'.'countries'[24].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[24].'callingCodes'", hasItems("+216"))
                .body("'data'.'countries'[24].'capital'.'continent'.'geonamesID'", numberMatches(6255146.0))
                .body("'data'.'countries'[24].'capital'.'location'.'lat'", numberMatches(36.800833))
                .body("'data'.'countries'[24].'capital'.'name'", containsString("Tunis"))
                .body("'data'.'countries'[24].'capital'.'population'", numberMatches(1056247.0))
                .body("'data'.'countries'[24].'capital'.'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'countries'[24].'geonamesID'", numberMatches(2464461.0))
                .body("'data'.'countries'[24].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[24].'languages'[0].'alpha2Code'", containsString("ar"))
                .body("'data'.'countries'[24].'languages'[0].'name'", containsString("Arabic"))
                .body("'data'.'countries'[24].'population'", numberMatches(1.1565204E7))
                .body("'data'.'countries'[25].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[25].'callingCodes'", hasItems("+90"))
                .body("'data'.'countries'[25].'capital'.'location'.'lat'", numberMatches(39.93))
                .body("'data'.'countries'[25].'capital'.'name'", containsString("Ankara"))
                .body("'data'.'countries'[25].'capital'.'population'", numberMatches(5503985.0))
                .body("'data'.'countries'[25].'capital'.'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'countries'[25].'geonamesID'", numberMatches(298795.0))
                .body("'data'.'countries'[25].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[25].'languages'[0].'alpha2Code'", containsString("tr"))
                .body("'data'.'countries'[25].'languages'[0].'name'", containsString("Turkish"))
                .body("'data'.'countries'[25].'population'", numberMatches(8.3614362E7))
                .body("'data'.'countries'[26].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[26].'callingCodes'", hasItems("+993"))
                .body("'data'.'countries'[26].'capital'.'continent'.'geonamesID'", numberMatches(6255147.0))
                .body("'data'.'countries'[26].'capital'.'location'.'lat'", numberMatches(37.95))
                .body("'data'.'countries'[26].'capital'.'name'", containsString("Ashgabat"))
                .body("'data'.'countries'[26].'capital'.'population'", numberMatches(1031992.0))
                .body("'data'.'countries'[26].'capital'.'timeZone'.'offset'", numberMatches(5.0))
                .body("'data'.'countries'[26].'geonamesID'", numberMatches(1218197.0))
                .body("'data'.'countries'[26].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[26].'languages'[0].'alpha2Code'", containsString("tk"))
                .body("'data'.'countries'[26].'languages'[0].'name'", containsString("Turkmen"))
                .body("'data'.'countries'[26].'population'", numberMatches(5850901.0))
                .body("'data'.'countries'[27].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[27].'callingCodes'", hasItems("+688"))
                .body("'data'.'countries'[27].'capital'", nullValue())
                .body("'data'.'countries'[27].'geonamesID'", numberMatches(2110297.0))
                .body("'data'.'countries'[27].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[27].'languages'[0].'alpha2Code'", containsString("en"))
                .body("'data'.'countries'[27].'languages'[0].'name'", containsString("English"))
                .body("'data'.'countries'[27].'population'", numberMatches(11192.0))
                .body("'data'.'countries'[28].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[28].'callingCodes'", hasItems("+256"))
                .body("'data'.'countries'[28].'capital'.'continent'.'geonamesID'", numberMatches(6255146.0))
                .body("'data'.'countries'[28].'capital'.'location'.'lat'", numberMatches(0.313611))
                .body("'data'.'countries'[28].'capital'.'name'", containsString("Kampala"))
                .body("'data'.'countries'[28].'capital'.'population'", numberMatches(1659600.0))
                .body("'data'.'countries'[28].'capital'.'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'countries'[28].'geonamesID'", numberMatches(226074.0))
                .body("'data'.'countries'[28].'languages'.size()", equalTo(2))
                .body("'data'.'countries'[28].'languages'[0].'alpha2Code'", containsString("en"))
                .body("'data'.'countries'[28].'languages'[0].'name'", containsString("English"))
                .body("'data'.'countries'[28].'languages'[1].'alpha2Code'", containsString("sw"))
                .body("'data'.'countries'[28].'languages'[1].'name'", containsString("Swahili"))
                .body("'data'.'countries'[28].'population'", numberMatches(4.2862958E7))
                .body("'data'.'countries'[29].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[29].'callingCodes'", hasItems("+380"))
                .body("'data'.'countries'[29].'capital'.'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[29].'capital'.'location'.'lat'", numberMatches(50.45))
                .body("'data'.'countries'[29].'capital'.'name'", containsString("Kyiv"))
                .body("'data'.'countries'[29].'capital'.'population'", numberMatches(2963199.0))
                .body("'data'.'countries'[29].'capital'.'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'countries'[29].'geonamesID'", numberMatches(690791.0))
                .body("'data'.'countries'[29].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[29].'languages'[0].'alpha2Code'", containsString("uk"))
                .body("'data'.'countries'[29].'languages'[0].'name'", containsString("Ukrainian"))
                .body("'data'.'countries'[29].'population'", numberMatches(4.2558328E7))
                .body("'data'.'countries'[30].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[30].'callingCodes'", hasItems("+971"))
                .body("'data'.'countries'[30].'capital'.'continent'.'geonamesID'", numberMatches(6255147.0))
                .body("'data'.'countries'[30].'capital'.'location'.'lat'", numberMatches(24.451111))
                .body("'data'.'countries'[30].'capital'.'name'", containsString("Abu Dhabi"))
                .body("'data'.'countries'[30].'capital'.'population'", numberMatches(1483000.0))
                .body("'data'.'countries'[30].'capital'.'timeZone'.'offset'", numberMatches(4.0))
                .body("'data'.'countries'[30].'geonamesID'", numberMatches(290557.0))
                .body("'data'.'countries'[30].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[30].'languages'[0].'alpha2Code'", containsString("ar"))
                .body("'data'.'countries'[30].'languages'[0].'name'", containsString("Arabic"))
                .body("'data'.'countries'[30].'population'", numberMatches(9890400.0))
                .body("'data'.'countries'[31].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[31].'callingCodes'", hasItems("+44"))
                .body("'data'.'countries'[31].'capital'.'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[31].'capital'.'location'.'lat'", numberMatches(51.507222))
                .body("'data'.'countries'[31].'capital'.'name'", containsString("London"))
                .body("'data'.'countries'[31].'capital'.'population'", numberMatches(8908081.0))
                .body("'data'.'countries'[31].'capital'.'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'countries'[31].'geonamesID'", numberMatches(2635167.0))
                .body("'data'.'countries'[31].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[31].'languages'[0].'alpha2Code'", containsString("en"))
                .body("'data'.'countries'[31].'languages'[0].'name'", containsString("English"))
                .body("'data'.'countries'[31].'population'", numberMatches(6.6022273E7))
                .body("'data'.'countries'[32].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[32].'callingCodes'", hasItems("+1"))
                .body("'data'.'countries'[32].'capital'.'continent'.'geonamesID'", numberMatches(6255151.0))
                .body("'data'.'countries'[32].'capital'.'location'.'lat'", numberMatches(38.895))
                .body("'data'.'countries'[32].'capital'.'name'", containsString("Washington, D.C."))
                .body("'data'.'countries'[32].'capital'.'population'", numberMatches(705749.0))
                .body("'data'.'countries'[32].'capital'.'timeZone'.'offset'", numberMatches(-5.0))
                .body("'data'.'countries'[32].'geonamesID'", numberMatches(6252001.0))
                .body("'data'.'countries'[32].'languages'.size()", equalTo(0))
                .body("'data'.'countries'[32].'population'", numberMatches(3.31449281E8))
                .body("'data'.'countries'[33].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[33].'callingCodes'", hasItems("+598"))
                .body("'data'.'countries'[33].'capital'.'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[33].'capital'.'location'.'lat'", numberMatches(-34.866667))
                .body("'data'.'countries'[33].'capital'.'name'", containsString("Montevideo"))
                .body("'data'.'countries'[33].'capital'.'population'", numberMatches(1319108.0))
                .body("'data'.'countries'[33].'capital'.'timeZone'.'offset'", numberMatches(-3.0))
                .body("'data'.'countries'[33].'geonamesID'", numberMatches(3439705.0))
                .body("'data'.'countries'[33].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[33].'languages'[0].'alpha2Code'", containsString("es"))
                .body("'data'.'countries'[33].'languages'[0].'name'", containsString("Spanish"))
                .body("'data'.'countries'[33].'population'", numberMatches(3456750.0))
                .body("'data'.'countries'[34].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[34].'callingCodes'", hasItems("+998"))
                .body("'data'.'countries'[34].'capital'.'continent'.'geonamesID'", numberMatches(6255147.0))
                .body("'data'.'countries'[34].'capital'.'location'.'lat'", numberMatches(41.3))
                .body("'data'.'countries'[34].'capital'.'name'", containsString("Tashkent"))
                .body("'data'.'countries'[34].'capital'.'population'", numberMatches(2424100.0))
                .body("'data'.'countries'[34].'capital'.'timeZone'.'offset'", numberMatches(5.0))
                .body("'data'.'countries'[34].'geonamesID'", numberMatches(1512440.0))
                .body("'data'.'countries'[34].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[34].'languages'[0].'alpha2Code'", containsString("uz"))
                .body("'data'.'countries'[34].'languages'[0].'name'", containsString("Uzbek"))
                .body("'data'.'countries'[34].'population'", numberMatches(3.3570609E7))
                .body("'data'.'countries'[35].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[35].'callingCodes'", hasItems("+678"))
                .body("'data'.'countries'[35].'capital'.'continent'.'geonamesID'", numberMatches(6255151.0))
                .body("'data'.'countries'[35].'capital'.'location'.'lat'", numberMatches(-17.73333))
                .body("'data'.'countries'[35].'capital'.'name'", containsString("Port Vila"))
                .body("'data'.'countries'[35].'capital'.'population'", numberMatches(51437.0))
                .body("'data'.'countries'[35].'capital'.'timeZone'.'offset'", numberMatches(11.0))
                .body("'data'.'countries'[35].'geonamesID'", numberMatches(2134431.0))
                .body("'data'.'countries'[35].'languages'.size()", equalTo(3))
                .body("'data'.'countries'[35].'languages'[0].'alpha2Code'", containsString("bi"))
                .body("'data'.'countries'[35].'languages'[0].'name'", containsString("Bislama"))
                .body("'data'.'countries'[35].'languages'[1].'alpha2Code'", containsString("en"))
                .body("'data'.'countries'[35].'languages'[1].'name'", containsString("English"))
                .body("'data'.'countries'[35].'languages'[2].'alpha2Code'", containsString("fr"))
                .body("'data'.'countries'[35].'languages'[2].'name'", containsString("French"))
                .body("'data'.'countries'[35].'population'", numberMatches(276244.0))
                .body("'data'.'countries'[36].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[36].'callingCodes'", hasItems("+58"))
                .body("'data'.'countries'[36].'capital'.'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[36].'capital'.'location'.'lat'", numberMatches(10.5))
                .body("'data'.'countries'[36].'capital'.'name'", containsString("Caracas"))
                .body("'data'.'countries'[36].'capital'.'population'", numberMatches(1943901.0))
                .body("'data'.'countries'[36].'capital'.'timeZone'.'offset'", numberMatches(-4.0))
                .body("'data'.'countries'[36].'geonamesID'", numberMatches(3625428.0))
                .body("'data'.'countries'[36].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[36].'languages'[0].'alpha2Code'", containsString("es"))
                .body("'data'.'countries'[36].'languages'[0].'name'", containsString("Spanish"))
                .body("'data'.'countries'[36].'population'", numberMatches(2.8515829E7))
                .body("'data'.'countries'[37].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[37].'callingCodes'", hasItems("+84"))
                .body("'data'.'countries'[37].'capital'.'continent'.'geonamesID'", numberMatches(6255147.0))
                .body("'data'.'countries'[37].'capital'.'location'.'lat'", numberMatches(21.0245))
                .body("'data'.'countries'[37].'capital'.'name'", containsString("Hanoi"))
                .body("'data'.'countries'[37].'capital'.'population'", numberMatches(7785000.0))
                .body("'data'.'countries'[37].'capital'.'timeZone'.'offset'", numberMatches(7.0))
                .body("'data'.'countries'[37].'geonamesID'", numberMatches(1562822.0))
                .body("'data'.'countries'[37].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[37].'languages'[0].'alpha2Code'", containsString("vi"))
                .body("'data'.'countries'[37].'languages'[0].'name'", containsString("Vietnamese"))
                .body("'data'.'countries'[37].'population'", numberMatches(9.466E7))
                .body("'data'.'countries'[38].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[38].'callingCodes'", hasItems("+967"))
                .body("'data'.'countries'[38].'capital'.'continent'.'geonamesID'", numberMatches(6255147.0))
                .body("'data'.'countries'[38].'capital'.'location'.'lat'", numberMatches(12.8))
                .body("'data'.'countries'[38].'capital'.'name'", containsString("Aden"))
                .body("'data'.'countries'[38].'capital'.'population'", numberMatches(507355.0))
                .body("'data'.'countries'[38].'capital'.'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'countries'[38].'geonamesID'", numberMatches(69543.0))
                .body("'data'.'countries'[38].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[38].'languages'[0].'alpha2Code'", containsString("ar"))
                .body("'data'.'countries'[38].'languages'[0].'name'", containsString("Arabic"))
                .body("'data'.'countries'[38].'population'", numberMatches(2.825042E7))
                .body("'data'.'countries'[39].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[39].'callingCodes'", hasItems("+260"))
                .body("'data'.'countries'[39].'capital'.'continent'.'geonamesID'", numberMatches(6255146.0))
                .body("'data'.'countries'[39].'capital'.'location'.'lat'", numberMatches(-15.416667))
                .body("'data'.'countries'[39].'capital'.'name'", containsString("Lusaka"))
                .body("'data'.'countries'[39].'capital'.'population'", numberMatches(1742979.0))
                .body("'data'.'countries'[39].'capital'.'timeZone'.'offset'", numberMatches(2.5))
                .body("'data'.'countries'[39].'geonamesID'", numberMatches(895949.0))
                .body("'data'.'countries'[39].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[39].'languages'[0].'alpha2Code'", containsString("en"))
                .body("'data'.'countries'[39].'languages'[0].'name'", containsString("English"))
                .body("'data'.'countries'[39].'population'", numberMatches(1.709413E7))
                .body("'data'.'countries'[40].'callingCodes'.size()", equalTo(1))
                .body("'data'.'countries'[40].'callingCodes'", hasItems("+263"))
                .body("'data'.'countries'[40].'capital'.'continent'.'geonamesID'", numberMatches(6255146.0))
                .body("'data'.'countries'[40].'capital'.'location'.'lat'", numberMatches(-17.829167))
                .body("'data'.'countries'[40].'capital'.'name'", containsString("Harare"))
                .body("'data'.'countries'[40].'capital'.'population'", numberMatches(2150000.0))
                .body("'data'.'countries'[40].'capital'.'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'countries'[40].'geonamesID'", numberMatches(878675.0))
                .body("'data'.'countries'[40].'languages'.size()", equalTo(9))
                .body("'data'.'countries'[40].'languages'[0].'alpha2Code'", containsString("ny"))
                .body("'data'.'countries'[40].'languages'[0].'name'", containsString("Chewa"))
                .body("'data'.'countries'[40].'languages'[1].'alpha2Code'", containsString("en"))
                .body("'data'.'countries'[40].'languages'[1].'name'", containsString("English"))
                .body("'data'.'countries'[40].'languages'[2].'alpha2Code'", containsString("nd"))
                .body("'data'.'countries'[40].'languages'[2].'name'", containsString("Northern Ndebele"))
                .body("'data'.'countries'[40].'languages'[3].'alpha2Code'", containsString("st"))
                .body("'data'.'countries'[40].'languages'[3].'name'", containsString("Sesotho"))
                .body("'data'.'countries'[40].'languages'[4].'alpha2Code'", containsString("sn"))
                .body("'data'.'countries'[40].'languages'[4].'name'", containsString("Shona"))
                .body("'data'.'countries'[40].'languages'[5].'alpha2Code'", containsString("ts"))
                .body("'data'.'countries'[40].'languages'[5].'name'", containsString("Tsonga"))
                .body("'data'.'countries'[40].'languages'[6].'alpha2Code'", containsString("tn"))
                .body("'data'.'countries'[40].'languages'[6].'name'", containsString("Tswana"))
                .body("'data'.'countries'[40].'languages'[7].'alpha2Code'", containsString("ve"))
                .body("'data'.'countries'[40].'languages'[7].'name'", containsString("Venda"))
                .body("'data'.'countries'[40].'languages'[8].'alpha2Code'", containsString("xh"))
                .body("'data'.'countries'[40].'languages'[8].'name'", containsString("Xhosa"))
                .body("'data'.'countries'[40].'population'", numberMatches(1.6529904E7))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'message'", containsString("Index out of bounds"))
                .body("'errors'[0].'path'.size()", equalTo(4))
                .body("'errors'[0].'path'[0]", containsString("countries"))
                .body("'errors'[0].'path'[1]", numberMatches(25.0))
                .body("'errors'[0].'path'[2]", containsString("capital"))
                .body("'errors'[0].'path'[3]", containsString("continent"))
                .body("'errors'[1].'message'", containsString("Index out of bounds"))
                .body("'errors'[1].'path'.size()", equalTo(3))
                .body("'errors'[1].'path'[0]", containsString("countries"))
                .body("'errors'[1].'path'[1]", numberMatches(25.0))
                .body("'errors'[1].'path'[2]", containsString("continent"));
    }
    
    
    @Test
    public void test_10() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { countries  (limit : 759,skip : 913, where:{})  {alpha2Code,currencies{isoCode},geonamesID,location{lat},population}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'countries'.size()", equalTo(0));
    }
    
    
    @Test
    public void test_11() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { ipAddress  (address : \\\"sNmAYacoVl\\\")  {address,city{continent{geonamesID,id,name},country{alpha2Code,currencies{id,name,unitSymbols},id,languages{alpha2Code,name},name},location{long},name,timeZoneDST{name}},country{alpha2Code,continent{id,name,population},currencies{isoCode,name,unitSymbols},geonamesID,languages{alpha2Code},location{lat},name,population,vatRate}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.isEmpty()", is(true))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Unknown IP address: sNmAYacoVl"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("ipAddress"));
    }
    
    
    @Test
    public void test_12() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { htmlDocument  (html : \\\"E4Ai7dmwQIGu9S\\\")  {all{html,text}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'htmlDocument'.isEmpty()", is(true))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("missing required argument selector"))
                .body("'errors'[0].'path'.size()", equalTo(2))
                .body("'errors'[0].'path'", hasItems("htmlDocument", "all"));
    }
    
    
    @Test
    public void test_13() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { continents  (limit : 147,skip : 468, where:{})  {geonamesID,id,name,population}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'continents'.size()", equalTo(0));
    }
    
    
    @Test
    public void test_14() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { currencies  (limit : 384,skip : 254, where:{})  {convert,countries{alpha2Code,cities{id,location{lat},name,population,timeZone{id},timeZoneDST{id}},continent{name,population},geonamesID,id,location{long}},id,isoCode,name,unitSymbols}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'currencies'.size()", equalTo(0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { url  (url : \\\"0CFfwqaMlX\\\")  {htmlDocument{body{attribute,text}},path,url}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.isEmpty()", is(true))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("url does not have a scheme"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("url"));
    }
    
    
    @Test
    public void test_15() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { countries  (limit : 9,skip : -140073639, where:{})  {callingCodes,capital{id,name,population,timeZone{id},timeZoneDST{name,offset}},cities{continent{population},id,location{long},population,timeZone{id,name,offset}},continent{geonamesID,name,population},currencies{isoCode,unitSymbols},location{lat,long},population,vatRate}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.isEmpty()", is(true))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("SKIP specified value of invalid type, must be a positive integer"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("countries"));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { domainName  (name : \\\"tor1a\\\")  {a{address,country{alpha2Code,alpha3Code,callingCodes,cities{continent{population},id,location{lat,long},population,timeZone{name}},geonamesID,location{lat,long}}},aaaa{address,city{continent{geonamesID},id,name},country{alpha2Code,callingCodes,capital{continent{geonamesID,name,population},id,name,population,timeZoneDST{offset}},languages{alpha2Code,id,name},name,population,vatRate}},mx{preference},name,records{a{country{alpha3Code,callingCodes,cities{geonamesID,id,timeZone{id},timeZoneDST{name,offset}},currencies{convert,isoCode,name,unitSymbols},id,location{lat}}},aaaa{address,city{continent{id,name},country{alpha2Code,alpha3Code,geonamesID,id},geonamesID,id,name},country{alpha3Code,capital{continent{geonamesID,id,population},geonamesID},continent{id},id,languages{id},name,population,vatRate}},mx{preference}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'domainName'.'a'.size()", equalTo(0))
                .body("'data'.'domainName'.'aaaa'.size()", equalTo(0))
                .body("'data'.'domainName'.'mx'.size()", equalTo(0))
                .body("'data'.'domainName'.'name'", containsString("tor1a"))
                .body("'data'.'domainName'.'records'.'a'.size()", equalTo(0))
                .body("'data'.'domainName'.'records'.'aaaa'.size()", equalTo(0))
                .body("'data'.'domainName'.'records'.'mx'.size()", equalTo(0));
    }
    
    
    @Test
    public void test_16() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { random  (cacheBuster : \\\"X6K_vfQP7kq1Y\\\")  {float}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'random'.isEmpty()", is(true))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Arithmetic overflow"))
                .body("'errors'[0].'path'.size()", equalTo(2))
                .body("'errors'[0].'path'", hasItems("random", "float"));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { emailAddress  (address : \\\"7oze\\\")  {serviceProvider{disposable}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.isEmpty()", is(true))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Not a valid address"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("emailAddress"));
    }
    
    
    @Test
    public void test_17() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { ipAddress  (address : \\\"\\\")  {address,city{country{alpha2Code,callingCodes,continent{id,name,population},currencies{id,unitSymbols},geonamesID,id,languages{alpha2Code,name},location{lat},name,population,vatRate},geonamesID,location{lat},name,population,timeZone{offset},timeZoneDST{id}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.isEmpty()", is(true))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Unknown IP address: "))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("ipAddress"));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { htmlDocument  (html : \\\"oxYRdiINZolitfA\\\")  {html}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'htmlDocument'.'html'", containsString("<html><head></head><body>oxYRdiINZolitfA</body></html>"));
    }
    
    
    @Test
    public void test_18() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { emailAddress  (address : \\\"vKm9aSPXu_Brj4HE\\\")  {address,host,local,ok,serviceProvider{disposable}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.isEmpty()", is(true))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Not a valid address"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("emailAddress"));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { languages  (limit : 495,skip : 383, where:{})  {countries{alpha2Code,callingCodes,continent{geonamesID,id,name,population},location{lat},name,vatRate}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'languages'.size()", equalTo(0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { timeZones  (limit : 867,skip : 67, where:{})  {cities{continent{countries{alpha3Code,callingCodes,currencies{convert,unitSymbols}}},country{alpha2Code,callingCodes,currencies{id,isoCode,name,unitSymbols},languages{name},location{lat,long},name},location{lat,long},name},id,offset}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'timeZones'.size()", equalTo(0));
    }
    
    
    @Test
    public void test_19() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { ipAddress  (address : \\\"D1\\\")  {address,city{continent{countries{alpha3Code,callingCodes,languages{alpha2Code,id,name},name,population},geonamesID,id,population},id,location{long},population,timeZoneDST{name,offset}},type}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.isEmpty()", is(true))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Unknown IP address: D1"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("ipAddress"));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { countries  (limit : 90,skip : 13, where:{})  {alpha2Code,capital{id,name,timeZoneDST{id}},cities{continent{geonamesID,name,population},geonamesID,location{long},population,timeZoneDST{id,name,offset}},geonamesID,languages{alpha2Code,name},location{lat,long},name}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'countries'.size()", equalTo(90))
                .body("'data'.'countries'[0].'alpha2Code'", containsString("BB"))
                .body("'data'.'countries'[0].'capital'.'name'", containsString("Bridgetown"))
                .body("'data'.'countries'[0].'capital'.'timeZoneDST'", nullValue())
                .body("'data'.'countries'[0].'cities'.size()", equalTo(1))
                .body("'data'.'countries'[0].'cities'[0].'continent'.'geonamesID'", numberMatches(6255149.0))
                .body("'data'.'countries'[0].'cities'[0].'continent'.'name'", containsString("North America"))
                .body("'data'.'countries'[0].'cities'[0].'continent'.'population'", numberMatches(5.79E8))
                .body("'data'.'countries'[0].'cities'[0].'geonamesID'", numberMatches(3374036.0))
                .body("'data'.'countries'[0].'cities'[0].'location'.'long'", numberMatches(-59.616667))
                .body("'data'.'countries'[0].'cities'[0].'population'", numberMatches(110000.0))
                .body("'data'.'countries'[0].'cities'[0].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[0].'geonamesID'", numberMatches(3374084.0))
                .body("'data'.'countries'[0].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[0].'languages'[0].'alpha2Code'", containsString("en"))
                .body("'data'.'countries'[0].'languages'[0].'name'", containsString("English"))
                .body("'data'.'countries'[0].'location'.'lat'", numberMatches(13.17))
                .body("'data'.'countries'[0].'location'.'long'", numberMatches(-59.5525))
                .body("'data'.'countries'[0].'name'", containsString("Barbados"))
                .body("'data'.'countries'[1].'alpha2Code'", containsString("BY"))
                .body("'data'.'countries'[1].'capital'.'name'", containsString("Minsk"))
                .body("'data'.'countries'[1].'capital'.'timeZoneDST'", nullValue())
                .body("'data'.'countries'[1].'cities'.size()", equalTo(12))
                .body("'data'.'countries'[1].'cities'[0].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[1].'cities'[0].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[1].'cities'[0].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[1].'cities'[0].'geonamesID'", numberMatches(627907.0))
                .body("'data'.'countries'[1].'cities'[0].'location'.'long'", numberMatches(30.983333))
                .body("'data'.'countries'[1].'cities'[0].'population'", numberMatches(510300.0))
                .body("'data'.'countries'[1].'cities'[0].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[1].'cities'[1].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[1].'cities'[1].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[1].'cities'[1].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[1].'cities'[1].'geonamesID'", numberMatches(623549.0))
                .body("'data'.'countries'[1].'cities'[1].'location'.'long'", numberMatches(26.103056))
                .body("'data'.'countries'[1].'cities'[1].'population'", numberMatches(125900.0))
                .body("'data'.'countries'[1].'cities'[1].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[1].'cities'[2].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[1].'cities'[2].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[1].'cities'[2].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[1].'cities'[2].'geonamesID'", numberMatches(627904.0))
                .body("'data'.'countries'[1].'cities'[2].'location'.'long'", numberMatches(23.816667))
                .body("'data'.'countries'[1].'cities'[2].'population'", numberMatches(356900.0))
                .body("'data'.'countries'[1].'cities'[2].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[1].'cities'[3].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[1].'cities'[3].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[1].'cities'[3].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[1].'cities'[3].'geonamesID'", numberMatches(629634.0))
                .body("'data'.'countries'[1].'cities'[3].'location'.'long'", numberMatches(23.656944))
                .body("'data'.'countries'[1].'cities'[3].'population'", numberMatches(340318.0))
                .body("'data'.'countries'[1].'cities'[3].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[1].'cities'[4].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[1].'cities'[4].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[1].'cities'[4].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[1].'cities'[4].'geonamesID'", numberMatches(630376.0))
                .body("'data'.'countries'[1].'cities'[4].'location'.'long'", numberMatches(28.51198))
                .body("'data'.'countries'[1].'cities'[4].'population'", numberMatches(139481.0))
                .body("'data'.'countries'[1].'cities'[4].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[1].'cities'[5].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[1].'cities'[5].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[1].'cities'[5].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[1].'cities'[5].'geonamesID'", numberMatches(622428.0))
                .body("'data'.'countries'[1].'cities'[5].'location'.'long'", numberMatches(27.5425))
                .body("'data'.'countries'[1].'cities'[5].'population'", numberMatches(100824.0))
                .body("'data'.'countries'[1].'cities'[5].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[1].'cities'[6].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[1].'cities'[6].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[1].'cities'[6].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[1].'cities'[6].'geonamesID'", numberMatches(630429.0))
                .body("'data'.'countries'[1].'cities'[6].'location'.'long'", numberMatches(25.983333))
                .body("'data'.'countries'[1].'cities'[6].'population'", numberMatches(174183.0))
                .body("'data'.'countries'[1].'cities'[6].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[1].'cities'[7].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[1].'cities'[7].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[1].'cities'[7].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[1].'cities'[7].'geonamesID'", numberMatches(630468.0))
                .body("'data'.'countries'[1].'cities'[7].'location'.'long'", numberMatches(29.233333))
                .body("'data'.'countries'[1].'cities'[7].'population'", numberMatches(212200.0))
                .body("'data'.'countries'[1].'cities'[7].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[1].'cities'[8].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[1].'cities'[8].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[1].'cities'[8].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[1].'cities'[8].'geonamesID'", numberMatches(625143.0))
                .body("'data'.'countries'[1].'cities'[8].'location'.'long'", numberMatches(27.561837))
                .body("'data'.'countries'[1].'cities'[8].'population'", numberMatches(2009786.0))
                .body("'data'.'countries'[1].'cities'[8].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[1].'cities'[9].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[1].'cities'[9].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[1].'cities'[9].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[1].'cities'[9].'geonamesID'", numberMatches(620127.0))
                .body("'data'.'countries'[1].'cities'[9].'location'.'long'", numberMatches(30.166667))
                .body("'data'.'countries'[1].'cities'[9].'population'", numberMatches(364800.0))
                .body("'data'.'countries'[1].'cities'[9].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[1].'cities'[10].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[1].'cities'[10].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[1].'cities'[10].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[1].'cities'[10].'geonamesID'", numberMatches(625324.0))
                .body("'data'.'countries'[1].'cities'[10].'location'.'long'", numberMatches(29.233333))
                .body("'data'.'countries'[1].'cities'[10].'population'", numberMatches(105439.0))
                .body("'data'.'countries'[1].'cities'[10].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[1].'cities'[11].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[1].'cities'[11].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[1].'cities'[11].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[1].'cities'[11].'geonamesID'", numberMatches(625665.0))
                .body("'data'.'countries'[1].'cities'[11].'location'.'long'", numberMatches(30.34296))
                .body("'data'.'countries'[1].'cities'[11].'population'", numberMatches(357100.0))
                .body("'data'.'countries'[1].'cities'[11].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[1].'geonamesID'", numberMatches(630336.0))
                .body("'data'.'countries'[1].'languages'.size()", equalTo(2))
                .body("'data'.'countries'[1].'languages'[0].'alpha2Code'", containsString("be"))
                .body("'data'.'countries'[1].'languages'[0].'name'", containsString("Belarusian"))
                .body("'data'.'countries'[1].'languages'[1].'alpha2Code'", containsString("ru"))
                .body("'data'.'countries'[1].'languages'[1].'name'", containsString("Russian"))
                .body("'data'.'countries'[1].'location'.'lat'", numberMatches(53.528333))
                .body("'data'.'countries'[1].'location'.'long'", numberMatches(28.046667))
                .body("'data'.'countries'[1].'name'", containsString("Belarus"))
                .body("'data'.'countries'[2].'alpha2Code'", containsString("BE"))
                .body("'data'.'countries'[2].'capital'.'name'", containsString("City of Brussels"))
                .body("'data'.'countries'[2].'capital'.'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'.size()", equalTo(84))
                .body("'data'.'countries'[2].'cities'[0].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[0].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[0].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[0].'geonamesID'", numberMatches(2803201.0))
                .body("'data'.'countries'[2].'cities'[0].'location'.'long'", numberMatches(4.329722))
                .body("'data'.'countries'[2].'cities'[0].'population'", numberMatches(117412.0))
                .body("'data'.'countries'[2].'cities'[0].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[1].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[1].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[1].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[1].'geonamesID'", numberMatches(2789530.0))
                .body("'data'.'countries'[2].'cities'[1].'location'.'long'", numberMatches(3.6))
                .body("'data'.'countries'[2].'cities'[1].'population'", numberMatches(28517.0))
                .body("'data'.'countries'[2].'cities'[1].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[2].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[2].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[2].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[2].'geonamesID'", numberMatches(2799398.0))
                .body("'data'.'countries'[2].'cities'[2].'location'.'long'", numberMatches(5.0514))
                .body("'data'.'countries'[2].'cities'[2].'population'", numberMatches(23824.0))
                .body("'data'.'countries'[2].'cities'[2].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[3].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[3].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[3].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[3].'geonamesID'", numberMatches(2786421.0))
                .body("'data'.'countries'[2].'cities'[3].'location'.'long'", numberMatches(4.066667))
                .body("'data'.'countries'[2].'cities'[3].'population'", numberMatches(27603.0))
                .body("'data'.'countries'[2].'cities'[3].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[4].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[4].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[4].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[4].'geonamesID'", numberMatches(2803430.0))
                .body("'data'.'countries'[2].'cities'[4].'location'.'long'", numberMatches(4.8333))
                .body("'data'.'countries'[2].'cities'[4].'population'", numberMatches(29965.0))
                .body("'data'.'countries'[2].'cities'[4].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[5].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[5].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[5].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[5].'geonamesID'", numberMatches(2795114.0))
                .body("'data'.'countries'[2].'cities'[5].'location'.'long'", numberMatches(5.233333))
                .body("'data'.'countries'[2].'cities'[5].'population'", numberMatches(21293.0))
                .body("'data'.'countries'[2].'cities'[5].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[6].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[6].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[6].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[6].'geonamesID'", numberMatches(2800866.0))
                .body("'data'.'countries'[2].'cities'[6].'location'.'long'", numberMatches(4.351667))
                .body("'data'.'countries'[2].'cities'[6].'population'", numberMatches(185103.0))
                .body("'data'.'countries'[2].'cities'[6].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[7].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[7].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[7].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[7].'geonamesID'", numberMatches(2796492.0))
                .body("'data'.'countries'[2].'cities'[7].'location'.'long'", numberMatches(5.338497))
                .body("'data'.'countries'[2].'cities'[7].'population'", numberMatches(77651.0))
                .body("'data'.'countries'[2].'cities'[7].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[8].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[8].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[8].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[8].'geonamesID'", numberMatches(2792406.0))
                .body("'data'.'countries'[2].'cities'[8].'location'.'long'", numberMatches(4.569722))
                .body("'data'.'countries'[2].'cities'[8].'population'", numberMatches(36646.0))
                .body("'data'.'countries'[2].'cities'[8].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[9].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[9].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[9].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[9].'geonamesID'", numberMatches(2800482.0))
                .body("'data'.'countries'[2].'cities'[9].'location'.'long'", numberMatches(4.444167))
                .body("'data'.'countries'[2].'cities'[9].'population'", numberMatches(201816.0))
                .body("'data'.'countries'[2].'cities'[9].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[10].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[10].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[10].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[10].'geonamesID'", numberMatches(2787770.0))
                .body("'data'.'countries'[2].'cities'[10].'location'.'long'", numberMatches(3.6))
                .body("'data'.'countries'[2].'cities'[10].'population'", numberMatches(26337.0))
                .body("'data'.'countries'[2].'cities'[10].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[11].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[11].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[11].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[11].'geonamesID'", numberMatches(2800931.0))
                .body("'data'.'countries'[2].'cities'[11].'location'.'long'", numberMatches(3.224167))
                .body("'data'.'countries'[2].'cities'[11].'population'", numberMatches(118053.0))
                .body("'data'.'countries'[2].'cities'[11].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[12].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[12].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[12].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[12].'geonamesID'", numberMatches(2791538.0))
                .body("'data'.'countries'[2].'cities'[12].'location'.'long'", numberMatches(4.480278))
                .body("'data'.'countries'[2].'cities'[12].'population'", numberMatches(86921.0))
                .body("'data'.'countries'[2].'cities'[12].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[13].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[13].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[13].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[13].'geonamesID'", numberMatches(2795010.0))
                .body("'data'.'countries'[2].'cities'[13].'location'.'long'", numberMatches(3.215))
                .body("'data'.'countries'[2].'cities'[13].'population'", numberMatches(27729.0))
                .body("'data'.'countries'[2].'cities'[13].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[14].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[14].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[14].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[14].'geonamesID'", numberMatches(2797657.0))
                .body("'data'.'countries'[2].'cities'[14].'location'.'long'", numberMatches(3.725278))
                .body("'data'.'countries'[2].'cities'[14].'population'", numberMatches(262219.0))
                .body("'data'.'countries'[2].'cities'[14].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[15].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[15].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[15].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[15].'geonamesID'", numberMatches(2798988.0))
                .body("'data'.'countries'[2].'cities'[15].'location'.'long'", numberMatches(3.5639))
                .body("'data'.'countries'[2].'cities'[15].'population'", numberMatches(20890.0))
                .body("'data'.'countries'[2].'cities'[15].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[16].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[16].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[16].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[16].'geonamesID'", numberMatches(2786546.0))
                .body("'data'.'countries'[2].'cities'[16].'location'.'long'", numberMatches(5.183333))
                .body("'data'.'countries'[2].'cities'[16].'population'", numberMatches(40672.0))
                .body("'data'.'countries'[2].'cities'[16].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[17].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[17].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[17].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[17].'geonamesID'", numberMatches(2787149.0))
                .body("'data'.'countries'[2].'cities'[17].'location'.'long'", numberMatches(4.373611))
                .body("'data'.'countries'[2].'cities'[17].'population'", numberMatches(132799.0))
                .body("'data'.'countries'[2].'cities'[17].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[18].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[18].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[18].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[18].'geonamesID'", numberMatches(2784605.0))
                .body("'data'.'countries'[2].'cities'[18].'location'.'long'", numberMatches(4.424489))
                .body("'data'.'countries'[2].'cities'[18].'population'", numberMatches(44015.0))
                .body("'data'.'countries'[2].'cities'[18].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[19].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[19].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[19].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[19].'geonamesID'", numberMatches(2792180.0))
                .body("'data'.'countries'[2].'cities'[19].'location'.'long'", numberMatches(5.316667))
                .body("'data'.'countries'[2].'cities'[19].'population'", numberMatches(34044.0))
                .body("'data'.'countries'[2].'cities'[19].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[20].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[20].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[20].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[20].'geonamesID'", numberMatches(2791344.0))
                .body("'data'.'countries'[2].'cities'[20].'location'.'long'", numberMatches(3.121667))
                .body("'data'.'countries'[2].'cities'[20].'population'", numberMatches(33190.0))
                .body("'data'.'countries'[2].'cities'[20].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[21].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[21].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[21].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[21].'geonamesID'", numberMatches(2797714.0))
                .body("'data'.'countries'[2].'cities'[21].'location'.'long'", numberMatches(4.6922))
                .body("'data'.'countries'[2].'cities'[21].'population'", numberMatches(25933.0))
                .body("'data'.'countries'[2].'cities'[21].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[22].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[22].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[22].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[22].'geonamesID'", numberMatches(2798298.0))
                .body("'data'.'countries'[2].'cities'[22].'location'.'long'", numberMatches(4.533333))
                .body("'data'.'countries'[2].'cities'[22].'population'", numberMatches(22738.0))
                .body("'data'.'countries'[2].'cities'[22].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[23].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[23].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[23].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[23].'geonamesID'", numberMatches(2798574.0))
                .body("'data'.'countries'[2].'cities'[23].'location'.'long'", numberMatches(6.033333))
                .body("'data'.'countries'[2].'cities'[23].'population'", numberMatches(19526.0))
                .body("'data'.'countries'[2].'cities'[23].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[24].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[24].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[24].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[24].'geonamesID'", numberMatches(2799363.0))
                .body("'data'.'countries'[2].'cities'[24].'location'.'long'", numberMatches(5.7178))
                .body("'data'.'countries'[2].'cities'[24].'population'", numberMatches(20454.0))
                .body("'data'.'countries'[2].'cities'[24].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[25].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[25].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[25].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[25].'geonamesID'", numberMatches(2801858.0))
                .body("'data'.'countries'[2].'cities'[25].'location'.'long'", numberMatches(3.116667))
                .body("'data'.'countries'[2].'cities'[25].'population'", numberMatches(20349.0))
                .body("'data'.'countries'[2].'cities'[25].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[26].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[26].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[26].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[26].'geonamesID'", numberMatches(2790677.0))
                .body("'data'.'countries'[2].'cities'[26].'location'.'long'", numberMatches(4.456667))
                .body("'data'.'countries'[2].'cities'[26].'population'", numberMatches(25824.0))
                .body("'data'.'countries'[2].'cities'[26].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[27].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[27].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[27].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[27].'geonamesID'", numberMatches(2800867.0))
                .body("'data'.'countries'[2].'cities'[27].'location'.'long'", numberMatches(4.35))
                .body("'data'.'countries'[2].'cities'[27].'population'", numberMatches(1218255.0))
                .body("'data'.'countries'[2].'cities'[27].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[28].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[28].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[28].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[28].'geonamesID'", numberMatches(2792483.0))
                .body("'data'.'countries'[2].'cities'[28].'location'.'long'", numberMatches(4.704444))
                .body("'data'.'countries'[2].'cities'[28].'population'", numberMatches(100291.0))
                .body("'data'.'countries'[2].'cities'[28].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[29].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[29].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[29].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[29].'geonamesID'", numberMatches(2803011.0))
                .body("'data'.'countries'[2].'cities'[29].'location'.'long'", numberMatches(3.776941))
                .body("'data'.'countries'[2].'cities'[29].'population'", numberMatches(29164.0))
                .body("'data'.'countries'[2].'cities'[29].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[30].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[30].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[30].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[30].'geonamesID'", numberMatches(2795399.0))
                .body("'data'.'countries'[2].'cities'[30].'location'.'long'", numberMatches(4.761111))
                .body("'data'.'countries'[2].'cities'[30].'population'", numberMatches(21333.0))
                .body("'data'.'countries'[2].'cities'[30].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[31].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[31].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[31].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[31].'geonamesID'", numberMatches(2801923.0))
                .body("'data'.'countries'[2].'cities'[31].'location'.'long'", numberMatches(4.165163))
                .body("'data'.'countries'[2].'cities'[31].'population'", numberMatches(33598.0))
                .body("'data'.'countries'[2].'cities'[31].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[32].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[32].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[32].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[32].'geonamesID'", numberMatches(2795101.0))
                .body("'data'.'countries'[2].'cities'[32].'location'.'long'", numberMatches(2.883333))
                .body("'data'.'countries'[2].'cities'[32].'population'", numberMatches(34964.0))
                .body("'data'.'countries'[2].'cities'[32].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[33].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[33].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[33].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[33].'geonamesID'", numberMatches(2797780.0))
                .body("'data'.'countries'[2].'cities'[33].'location'.'long'", numberMatches(4.990278))
                .body("'data'.'countries'[2].'cities'[33].'population'", numberMatches(39923.0))
                .body("'data'.'countries'[2].'cities'[33].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[34].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[34].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[34].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[34].'geonamesID'", numberMatches(2790472.0))
                .body("'data'.'countries'[2].'cities'[34].'location'.'long'", numberMatches(4.866667))
                .body("'data'.'countries'[2].'cities'[34].'population'", numberMatches(110939.0))
                .body("'data'.'countries'[2].'cities'[34].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[35].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[35].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[35].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[35].'geonamesID'", numberMatches(2789571.0))
                .body("'data'.'countries'[2].'cities'[35].'location'.'long'", numberMatches(4.5))
                .body("'data'.'countries'[2].'cities'[35].'population'", numberMatches(31385.0))
                .body("'data'.'countries'[2].'cities'[35].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[36].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[36].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[36].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[36].'geonamesID'", numberMatches(2784190.0))
                .body("'data'.'countries'[2].'cities'[36].'location'.'long'", numberMatches(4.4322))
                .body("'data'.'countries'[2].'cities'[36].'population'", numberMatches(18376.0))
                .body("'data'.'countries'[2].'cities'[36].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[37].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[37].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[37].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[37].'geonamesID'", numberMatches(2785478.0))
                .body("'data'.'countries'[2].'cities'[37].'location'.'long'", numberMatches(3.3258))
                .body("'data'.'countries'[2].'cities'[37].'population'", numberMatches(20422.0))
                .body("'data'.'countries'[2].'cities'[37].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[38].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[38].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[38].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[38].'geonamesID'", numberMatches(2800196.0))
                .body("'data'.'countries'[2].'cities'[38].'location'.'long'", numberMatches(3.0))
                .body("'data'.'countries'[2].'cities'[38].'population'", numberMatches(18063.0))
                .body("'data'.'countries'[2].'cities'[38].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[39].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[39].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[39].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[39].'geonamesID'", numberMatches(2792073.0))
                .body("'data'.'countries'[2].'cities'[39].'location'.'long'", numberMatches(4.611194))
                .body("'data'.'countries'[2].'cities'[39].'population'", numberMatches(31551.0))
                .body("'data'.'countries'[2].'cities'[39].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[40].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[40].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[40].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[40].'geonamesID'", numberMatches(2785471.0))
                .body("'data'.'countries'[2].'cities'[40].'location'.'long'", numberMatches(4.933333))
                .body("'data'.'countries'[2].'cities'[40].'population'", numberMatches(34675.0))
                .body("'data'.'countries'[2].'cities'[40].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[41].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[41].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[41].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[41].'geonamesID'", numberMatches(2786825.0))
                .body("'data'.'countries'[2].'cities'[41].'location'.'long'", numberMatches(5.5122))
                .body("'data'.'countries'[2].'cities'[41].'population'", numberMatches(64270.0))
                .body("'data'.'countries'[2].'cities'[41].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[42].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[42].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[42].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[42].'geonamesID'", numberMatches(2795931.0))
                .body("'data'.'countries'[2].'cities'[42].'location'.'long'", numberMatches(5.63))
                .body("'data'.'countries'[2].'cities'[42].'population'", numberMatches(39958.0))
                .body("'data'.'countries'[2].'cities'[42].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[43].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[43].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[43].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[43].'geonamesID'", numberMatches(2790102.0))
                .body("'data'.'countries'[2].'cities'[43].'location'.'long'", numberMatches(4.3236))
                .body("'data'.'countries'[2].'cities'[43].'population'", numberMatches(28521.0))
                .body("'data'.'countries'[2].'cities'[43].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[44].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[44].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[44].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[44].'geonamesID'", numberMatches(2785170.0))
                .body("'data'.'countries'[2].'cities'[44].'location'.'long'", numberMatches(4.205))
                .body("'data'.'countries'[2].'cities'[44].'population'", numberMatches(25914.0))
                .body("'data'.'countries'[2].'cities'[44].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[45].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[45].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[45].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[45].'geonamesID'", numberMatches(2802172.0))
                .body("'data'.'countries'[2].'cities'[45].'location'.'long'", numberMatches(5.216667))
                .body("'data'.'countries'[2].'cities'[45].'population'", numberMatches(46065.0))
                .body("'data'.'countries'[2].'cities'[45].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[46].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[46].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[46].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[46].'geonamesID'", numberMatches(2785390.0))
                .body("'data'.'countries'[2].'cities'[46].'location'.'long'", numberMatches(5.4631))
                .body("'data'.'countries'[2].'cities'[46].'population'", numberMatches(31142.0))
                .body("'data'.'countries'[2].'cities'[46].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[47].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[47].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[47].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[47].'geonamesID'", numberMatches(2795937.0))
                .body("'data'.'countries'[2].'cities'[47].'location'.'long'", numberMatches(3.2156))
                .body("'data'.'countries'[2].'cities'[47].'population'", numberMatches(57773.0))
                .body("'data'.'countries'[2].'cities'[47].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[48].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[48].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[48].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[48].'geonamesID'", numberMatches(2790115.0))
                .body("'data'.'countries'[2].'cities'[48].'location'.'long'", numberMatches(4.016667))
                .body("'data'.'countries'[2].'cities'[48].'population'", numberMatches(38692.0))
                .body("'data'.'countries'[2].'cities'[48].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[49].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[49].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[49].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[49].'geonamesID'", numberMatches(2792414.0))
                .body("'data'.'countries'[2].'cities'[49].'location'.'long'", numberMatches(5.570556))
                .body("'data'.'countries'[2].'cities'[49].'population'", numberMatches(197885.0))
                .body("'data'.'countries'[2].'cities'[49].'timeZoneDST'.'name'", containsString("UTC+02:00"))
                .body("'data'.'countries'[2].'cities'[49].'timeZoneDST'.'offset'", numberMatches(2.0))
                .body("'data'.'countries'[2].'cities'[50].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[50].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[50].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[50].'geonamesID'", numberMatches(2796697.0))
                .body("'data'.'countries'[2].'cities'[50].'location'.'long'", numberMatches(4.237222))
                .body("'data'.'countries'[2].'cities'[50].'population'", numberMatches(39096.0))
                .body("'data'.'countries'[2].'cities'[50].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[51].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[51].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[51].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[51].'geonamesID'", numberMatches(2796543.0))
                .body("'data'.'countries'[2].'cities'[51].'location'.'long'", numberMatches(3.3131))
                .body("'data'.'countries'[2].'cities'[51].'population'", numberMatches(27886.0))
                .body("'data'.'countries'[2].'cities'[51].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[52].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[52].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[52].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[52].'geonamesID'", numberMatches(2792568.0))
                .body("'data'.'countries'[2].'cities'[52].'location'.'long'", numberMatches(3.83))
                .body("'data'.'countries'[2].'cities'[52].'population'", numberMatches(18552.0))
                .body("'data'.'countries'[2].'cities'[52].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[53].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[53].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[53].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[53].'geonamesID'", numberMatches(2788727.0))
                .body("'data'.'countries'[2].'cities'[53].'location'.'long'", numberMatches(2.7256))
                .body("'data'.'countries'[2].'cities'[53].'population'", numberMatches(19718.0))
                .body("'data'.'countries'[2].'cities'[53].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[54].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[54].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[54].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[54].'geonamesID'", numberMatches(2785365.0))
                .body("'data'.'countries'[2].'cities'[54].'location'.'long'", numberMatches(3.1))
                .body("'data'.'countries'[2].'cities'[54].'population'", numberMatches(20530.0))
                .body("'data'.'countries'[2].'cities'[54].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[55].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[55].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[55].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[55].'geonamesID'", numberMatches(2793509.0))
                .body("'data'.'countries'[2].'cities'[55].'location'.'long'", numberMatches(4.188056))
                .body("'data'.'countries'[2].'cities'[55].'population'", numberMatches(80986.0))
                .body("'data'.'countries'[2].'cities'[55].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[56].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[56].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[56].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[56].'geonamesID'", numberMatches(2800449.0))
                .body("'data'.'countries'[2].'cities'[56].'location'.'long'", numberMatches(4.516667))
                .body("'data'.'countries'[2].'cities'[56].'population'", numberMatches(36101.0))
                .body("'data'.'countries'[2].'cities'[56].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[57].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[57].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[57].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[57].'geonamesID'", numberMatches(2783176.0))
                .body("'data'.'countries'[2].'cities'[57].'location'.'long'", numberMatches(3.816667))
                .body("'data'.'countries'[2].'cities'[57].'population'", numberMatches(26373.0))
                .body("'data'.'countries'[2].'cities'[57].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[58].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[58].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[58].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[58].'geonamesID'", numberMatches(2792197.0))
                .body("'data'.'countries'[2].'cities'[58].'location'.'long'", numberMatches(3.983333))
                .body("'data'.'countries'[2].'cities'[58].'population'", numberMatches(41057.0))
                .body("'data'.'countries'[2].'cities'[58].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[59].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[59].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[59].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[59].'geonamesID'", numberMatches(2790871.0))
                .body("'data'.'countries'[2].'cities'[59].'location'.'long'", numberMatches(3.951958))
                .body("'data'.'countries'[2].'cities'[59].'population'", numberMatches(95299.0))
                .body("'data'.'countries'[2].'cities'[59].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[60].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[60].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[60].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[60].'geonamesID'", numberMatches(2784822.0))
                .body("'data'.'countries'[2].'cities'[60].'location'.'long'", numberMatches(5.85))
                .body("'data'.'countries'[2].'cities'[60].'population'", numberMatches(55198.0))
                .body("'data'.'countries'[2].'cities'[60].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[61].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[61].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[61].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[61].'geonamesID'", numberMatches(2787061.0))
                .body("'data'.'countries'[2].'cities'[61].'location'.'long'", numberMatches(4.9728))
                .body("'data'.'countries'[2].'cities'[61].'population'", numberMatches(22952.0))
                .body("'data'.'countries'[2].'cities'[61].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[62].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[62].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[62].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[62].'geonamesID'", numberMatches(2783942.0))
                .body("'data'.'countries'[2].'cities'[62].'location'.'long'", numberMatches(4.6))
                .body("'data'.'countries'[2].'cities'[62].'population'", numberMatches(34305.0))
                .body("'data'.'countries'[2].'cities'[62].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[63].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[63].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[63].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[63].'geonamesID'", numberMatches(2783821.0))
                .body("'data'.'countries'[2].'cities'[63].'location'.'long'", numberMatches(3.04))
                .body("'data'.'countries'[2].'cities'[63].'population'", numberMatches(18643.0))
                .body("'data'.'countries'[2].'cities'[63].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[64].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[64].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[64].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[64].'geonamesID'", numberMatches(2789788.0))
                .body("'data'.'countries'[2].'cities'[64].'location'.'long'", numberMatches(2.933333))
                .body("'data'.'countries'[2].'cities'[64].'population'", numberMatches(70600.0))
                .body("'data'.'countries'[2].'cities'[64].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[65].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[65].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[65].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[65].'geonamesID'", numberMatches(2797639.0))
                .body("'data'.'countries'[2].'cities'[65].'location'.'long'", numberMatches(3.866667))
                .body("'data'.'countries'[2].'cities'[65].'population'", numberMatches(33403.0))
                .body("'data'.'countries'[2].'cities'[65].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[66].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[66].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[66].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[66].'geonamesID'", numberMatches(2791965.0))
                .body("'data'.'countries'[2].'cities'[66].'location'.'long'", numberMatches(5.785556))
                .body("'data'.'countries'[2].'cities'[66].'population'", numberMatches(25201.0))
                .body("'data'.'countries'[2].'cities'[66].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[67].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[67].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[67].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[67].'geonamesID'", numberMatches(2784069.0))
                .body("'data'.'countries'[2].'cities'[67].'location'.'long'", numberMatches(3.400099))
                .body("'data'.'countries'[2].'cities'[67].'population'", numberMatches(38347.0))
                .body("'data'.'countries'[2].'cities'[67].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[68].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[68].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[68].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[68].'geonamesID'", numberMatches(2796010.0))
                .body("'data'.'countries'[2].'cities'[68].'location'.'long'", numberMatches(4.836389))
                .body("'data'.'countries'[2].'cities'[68].'population'", numberMatches(28272.0))
                .body("'data'.'countries'[2].'cities'[68].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[69].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[69].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[69].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[69].'geonamesID'", numberMatches(2803139.0))
                .body("'data'.'countries'[2].'cities'[69].'location'.'long'", numberMatches(4.399722))
                .body("'data'.'countries'[2].'cities'[69].'population'", numberMatches(529247.0))
                .body("'data'.'countries'[2].'cities'[69].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[70].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[70].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[70].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[70].'geonamesID'", numberMatches(2801925.0))
                .body("'data'.'countries'[2].'cities'[70].'location'.'long'", numberMatches(5.516667))
                .body("'data'.'countries'[2].'cities'[70].'population'", numberMatches(32318.0))
                .body("'data'.'countries'[2].'cities'[70].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[71].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[71].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[71].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[71].'geonamesID'", numberMatches(2787891.0))
                .body("'data'.'countries'[2].'cities'[71].'location'.'long'", numberMatches(3.123333))
                .body("'data'.'countries'[2].'cities'[71].'population'", numberMatches(62301.0))
                .body("'data'.'countries'[2].'cities'[71].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[72].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[72].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[72].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[72].'geonamesID'", numberMatches(2785142.0))
                .body("'data'.'countries'[2].'cities'[72].'location'.'long'", numberMatches(4.933333))
                .body("'data'.'countries'[2].'cities'[72].'population'", numberMatches(44136.0))
                .body("'data'.'countries'[2].'cities'[72].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[73].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[73].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[73].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[73].'geonamesID'", numberMatches(2787417.0))
                .body("'data'.'countries'[2].'cities'[73].'location'.'long'", numberMatches(3.816667))
                .body("'data'.'countries'[2].'cities'[73].'population'", numberMatches(23335.0))
                .body("'data'.'countries'[2].'cities'[73].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[74].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[74].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[74].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[74].'geonamesID'", numberMatches(2797671.0))
                .body("'data'.'countries'[2].'cities'[74].'location'.'long'", numberMatches(5.5))
                .body("'data'.'countries'[2].'cities'[74].'population'", numberMatches(66110.0))
                .body("'data'.'countries'[2].'cities'[74].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[75].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[75].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[75].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[75].'geonamesID'", numberMatches(2801151.0))
                .body("'data'.'countries'[2].'cities'[75].'location'.'long'", numberMatches(4.133333))
                .body("'data'.'countries'[2].'cities'[75].'population'", numberMatches(21649.0))
                .body("'data'.'countries'[2].'cities'[75].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[76].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[76].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[76].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[76].'geonamesID'", numberMatches(2786579.0))
                .body("'data'.'countries'[2].'cities'[76].'location'.'long'", numberMatches(4.139167))
                .body("'data'.'countries'[2].'cities'[76].'population'", numberMatches(76756.0))
                .body("'data'.'countries'[2].'cities'[76].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[77].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[77].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[77].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[77].'geonamesID'", numberMatches(2803074.0))
                .body("'data'.'countries'[2].'cities'[77].'location'.'long'", numberMatches(5.816667))
                .body("'data'.'countries'[2].'cities'[77].'population'", numberMatches(29733.0))
                .body("'data'.'countries'[2].'cities'[77].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[78].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[78].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[78].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[78].'geonamesID'", numberMatches(2794056.0))
                .body("'data'.'countries'[2].'cities'[78].'location'.'long'", numberMatches(3.266667))
                .body("'data'.'countries'[2].'cities'[78].'population'", numberMatches(76265.0))
                .body("'data'.'countries'[2].'cities'[78].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[79].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[79].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[79].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[79].'geonamesID'", numberMatches(2785342.0))
                .body("'data'.'countries'[2].'cities'[79].'location'.'long'", numberMatches(3.383333))
                .body("'data'.'countries'[2].'cities'[79].'population'", numberMatches(69554.0))
                .body("'data'.'countries'[2].'cities'[79].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[80].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[80].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[80].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[80].'geonamesID'", numberMatches(2799646.0))
                .body("'data'.'countries'[2].'cities'[80].'location'.'long'", numberMatches(4.1))
                .body("'data'.'countries'[2].'cities'[80].'population'", numberMatches(45673.0))
                .body("'data'.'countries'[2].'cities'[80].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[81].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[81].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[81].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[81].'geonamesID'", numberMatches(2799747.0))
                .body("'data'.'countries'[2].'cities'[81].'location'.'long'", numberMatches(3.527222))
                .body("'data'.'countries'[2].'cities'[81].'population'", numberMatches(31085.0))
                .body("'data'.'countries'[2].'cities'[81].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[82].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[82].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[82].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[82].'geonamesID'", numberMatches(2803205.0))
                .body("'data'.'countries'[2].'cities'[82].'location'.'long'", numberMatches(5.1))
                .body("'data'.'countries'[2].'cities'[82].'population'", numberMatches(27573.0))
                .body("'data'.'countries'[2].'cities'[82].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'cities'[83].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[2].'cities'[83].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[2].'cities'[83].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'cities'[83].'geonamesID'", numberMatches(2803448.0))
                .body("'data'.'countries'[2].'cities'[83].'location'.'long'", numberMatches(4.039167))
                .body("'data'.'countries'[2].'cities'[83].'population'", numberMatches(85715.0))
                .body("'data'.'countries'[2].'cities'[83].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[2].'geonamesID'", numberMatches(2802361.0))
                .body("'data'.'countries'[2].'languages'.size()", equalTo(3))
                .body("'data'.'countries'[2].'languages'[0].'alpha2Code'", containsString("nl"))
                .body("'data'.'countries'[2].'languages'[0].'name'", containsString("Dutch"))
                .body("'data'.'countries'[2].'languages'[1].'alpha2Code'", containsString("fr"))
                .body("'data'.'countries'[2].'languages'[1].'name'", containsString("French"))
                .body("'data'.'countries'[2].'languages'[2].'alpha2Code'", containsString("de"))
                .body("'data'.'countries'[2].'languages'[2].'name'", containsString("German"))
                .body("'data'.'countries'[2].'location'.'lat'", numberMatches(50.641111))
                .body("'data'.'countries'[2].'location'.'long'", numberMatches(4.668056))
                .body("'data'.'countries'[2].'name'", containsString("Belgium"))
                .body("'data'.'countries'[3].'alpha2Code'", containsString("BZ"))
                .body("'data'.'countries'[3].'capital'", nullValue())
                .body("'data'.'countries'[3].'cities'.size()", equalTo(1))
                .body("'data'.'countries'[3].'cities'[0].'continent'.'geonamesID'", numberMatches(6255149.0))
                .body("'data'.'countries'[3].'cities'[0].'continent'.'name'", containsString("North America"))
                .body("'data'.'countries'[3].'cities'[0].'continent'.'population'", numberMatches(5.79E8))
                .body("'data'.'countries'[3].'cities'[0].'geonamesID'", numberMatches(3582677.0))
                .body("'data'.'countries'[3].'cities'[0].'location'.'long'", numberMatches(-88.188611))
                .body("'data'.'countries'[3].'cities'[0].'population'", numberMatches(57169.0))
                .body("'data'.'countries'[3].'cities'[0].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[3].'geonamesID'", numberMatches(3582678.0))
                .body("'data'.'countries'[3].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[3].'languages'[0].'alpha2Code'", containsString("en"))
                .body("'data'.'countries'[3].'languages'[0].'name'", containsString("English"))
                .body("'data'.'countries'[3].'location'.'lat'", numberMatches(17.066667))
                .body("'data'.'countries'[3].'location'.'long'", numberMatches(-88.7))
                .body("'data'.'countries'[3].'name'", containsString("Belize"))
                .body("'data'.'countries'[4].'alpha2Code'", containsString("BJ"))
                .body("'data'.'countries'[4].'capital'", nullValue())
                .body("'data'.'countries'[4].'cities'.size()", equalTo(1))
                .body("'data'.'countries'[4].'cities'[0].'continent'.'geonamesID'", numberMatches(6255146.0))
                .body("'data'.'countries'[4].'cities'[0].'continent'.'name'", containsString("Africa"))
                .body("'data'.'countries'[4].'cities'[0].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[4].'cities'[0].'geonamesID'", numberMatches(2391893.0))
                .body("'data'.'countries'[4].'cities'[0].'location'.'long'", numberMatches(2.4866))
                .body("'data'.'countries'[4].'cities'[0].'population'", numberMatches(31444.0))
                .body("'data'.'countries'[4].'cities'[0].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[4].'geonamesID'", numberMatches(2395170.0))
                .body("'data'.'countries'[4].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[4].'languages'[0].'alpha2Code'", containsString("fr"))
                .body("'data'.'countries'[4].'languages'[0].'name'", containsString("French"))
                .body("'data'.'countries'[4].'location'.'lat'", numberMatches(8.833333))
                .body("'data'.'countries'[4].'location'.'long'", numberMatches(2.183333))
                .body("'data'.'countries'[4].'name'", containsString("Benin"))
                .body("'data'.'countries'[5].'alpha2Code'", containsString("BT"))
                .body("'data'.'countries'[5].'capital'.'name'", containsString("Thimphu"))
                .body("'data'.'countries'[5].'capital'.'timeZoneDST'", nullValue())
                .body("'data'.'countries'[5].'cities'.size()", equalTo(1))
                .body("'data'.'countries'[5].'cities'[0].'continent'.'geonamesID'", numberMatches(6255147.0))
                .body("'data'.'countries'[5].'cities'[0].'continent'.'name'", containsString("Asia"))
                .body("'data'.'countries'[5].'cities'[0].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[5].'cities'[0].'geonamesID'", numberMatches(1252416.0))
                .body("'data'.'countries'[5].'cities'[0].'location'.'long'", numberMatches(89.633333))
                .body("'data'.'countries'[5].'cities'[0].'population'", numberMatches(104000.0))
                .body("'data'.'countries'[5].'cities'[0].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[5].'geonamesID'", numberMatches(1252634.0))
                .body("'data'.'countries'[5].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[5].'languages'[0].'alpha2Code'", containsString("dz"))
                .body("'data'.'countries'[5].'languages'[0].'name'", containsString("Dzongkha"))
                .body("'data'.'countries'[5].'location'.'lat'", numberMatches(27.45))
                .body("'data'.'countries'[5].'location'.'long'", numberMatches(90.5))
                .body("'data'.'countries'[5].'name'", containsString("Bhutan"))
                .body("'data'.'countries'[6].'alpha2Code'", containsString("BO"))
                .body("'data'.'countries'[6].'capital'.'name'", containsString("Sucre"))
                .body("'data'.'countries'[6].'capital'.'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'.size()", equalTo(26))
                .body("'data'.'countries'[6].'cities'[0].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[0].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[0].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[0].'geonamesID'", numberMatches(3919998.0))
                .body("'data'.'countries'[6].'cities'[0].'location'.'long'", numberMatches(-68.753745))
                .body("'data'.'countries'[6].'cities'[0].'population'", numberMatches(46267.0))
                .body("'data'.'countries'[6].'cities'[0].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[1].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[1].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[1].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[1].'geonamesID'", numberMatches(3905658.0))
                .body("'data'.'countries'[6].'cities'[1].'location'.'long'", numberMatches(-60.95))
                .body("'data'.'countries'[6].'cities'[1].'population'", numberMatches(23569.0))
                .body("'data'.'countries'[6].'cities'[1].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[2].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[2].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[2].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[2].'geonamesID'", numberMatches(3904906.0))
                .body("'data'.'countries'[6].'cities'[2].'location'.'long'", numberMatches(-63.1975))
                .body("'data'.'countries'[6].'cities'[2].'population'", numberMatches(3151676.0))
                .body("'data'.'countries'[6].'cities'[2].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[3].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[3].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[3].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[3].'geonamesID'", numberMatches(3901301.0))
                .body("'data'.'countries'[6].'cities'[3].'location'.'long'", numberMatches(-63.164722))
                .body("'data'.'countries'[6].'cities'[3].'population'", numberMatches(214216.0))
                .body("'data'.'countries'[6].'cities'[3].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[4].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[4].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[4].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[4].'geonamesID'", numberMatches(3906791.0))
                .body("'data'.'countries'[6].'cities'[4].'location'.'long'", numberMatches(-66.281667))
                .body("'data'.'countries'[6].'cities'[4].'population'", numberMatches(137182.0))
                .body("'data'.'countries'[6].'cities'[4].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[5].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[5].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[5].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[5].'geonamesID'", numberMatches(3903987.0))
                .body("'data'.'countries'[6].'cities'[5].'location'.'long'", numberMatches(-65.25917))
                .body("'data'.'countries'[6].'cities'[5].'population'", numberMatches(300000.0))
                .body("'data'.'countries'[6].'cities'[5].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[6].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[6].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[6].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[6].'geonamesID'", numberMatches(1.1467676E7))
                .body("'data'.'countries'[6].'cities'[6].'location'.'long'", numberMatches(-66.7475))
                .body("'data'.'countries'[6].'cities'[6].'population'", numberMatches(24610.0))
                .body("'data'.'countries'[6].'cities'[6].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[7].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[7].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[7].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[7].'geonamesID'", numberMatches(3909234.0))
                .body("'data'.'countries'[6].'cities'[7].'location'.'long'", numberMatches(-67.116667))
                .body("'data'.'countries'[6].'cities'[7].'population'", numberMatches(264683.0))
                .body("'data'.'countries'[6].'cities'[7].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[8].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[8].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[8].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[8].'geonamesID'", numberMatches(3902202.0))
                .body("'data'.'countries'[6].'cities'[8].'location'.'long'", numberMatches(-65.719))
                .body("'data'.'countries'[6].'cities'[8].'population'", numberMatches(23100.0))
                .body("'data'.'countries'[6].'cities'[8].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[9].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[9].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[9].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[9].'geonamesID'", numberMatches(3901903.0))
                .body("'data'.'countries'[6].'cities'[9].'location'.'long'", numberMatches(-66.82405))
                .body("'data'.'countries'[6].'cities'[9].'population'", numberMatches(26958.0))
                .body("'data'.'countries'[6].'cities'[9].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[10].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[10].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[10].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[10].'geonamesID'", numberMatches(3901742.0))
                .body("'data'.'countries'[6].'cities'[10].'location'.'long'", numberMatches(-68.283333))
                .body("'data'.'countries'[6].'cities'[10].'population'", numberMatches(29108.0))
                .body("'data'.'countries'[6].'cities'[10].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[11].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[11].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[11].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[11].'geonamesID'", numberMatches(3902949.0))
                .body("'data'.'countries'[6].'cities'[11].'location'.'long'", numberMatches(-66.218889))
                .body("'data'.'countries'[6].'cities'[11].'population'", numberMatches(31264.0))
                .body("'data'.'countries'[6].'cities'[11].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[12].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[12].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[12].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[12].'geonamesID'", numberMatches(3915350.0))
                .body("'data'.'countries'[6].'cities'[12].'location'.'long'", numberMatches(-65.356667))
                .body("'data'.'countries'[6].'cities'[12].'population'", numberMatches(36008.0))
                .body("'data'.'countries'[6].'cities'[12].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[13].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[13].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[13].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[13].'geonamesID'", numberMatches(3911925.0))
                .body("'data'.'countries'[6].'cities'[13].'location'.'long'", numberMatches(-68.1475))
                .body("'data'.'countries'[6].'cities'[13].'population'", numberMatches(2867504.0))
                .body("'data'.'countries'[6].'cities'[13].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[14].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[14].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[14].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[14].'geonamesID'", numberMatches(1.1494539E7))
                .body("'data'.'countries'[6].'cities'[14].'location'.'long'", numberMatches(-66.157014))
                .body("'data'.'countries'[6].'cities'[14].'population'", numberMatches(632013.0))
                .body("'data'.'countries'[6].'cities'[14].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[15].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[15].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[15].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[15].'geonamesID'", numberMatches(3914197.0))
                .body("'data'.'countries'[6].'cities'[15].'location'.'long'", numberMatches(-66.566667))
                .body("'data'.'countries'[6].'cities'[15].'population'", numberMatches(23658.0))
                .body("'data'.'countries'[6].'cities'[15].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[16].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[16].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[16].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[16].'geonamesID'", numberMatches(3906194.0))
                .body("'data'.'countries'[6].'cities'[16].'location'.'long'", numberMatches(-66.040833))
                .body("'data'.'countries'[6].'cities'[16].'population'", numberMatches(172466.0))
                .body("'data'.'countries'[6].'cities'[16].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[17].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[17].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[17].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[17].'geonamesID'", numberMatches(3908339.0))
                .body("'data'.'countries'[6].'cities'[17].'location'.'long'", numberMatches(-67.916667))
                .body("'data'.'countries'[6].'cities'[17].'population'", numberMatches(22858.0))
                .body("'data'.'countries'[6].'cities'[17].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[18].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[18].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[18].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[18].'geonamesID'", numberMatches(3903320.0))
                .body("'data'.'countries'[6].'cities'[18].'location'.'long'", numberMatches(-64.731111))
                .body("'data'.'countries'[6].'cities'[18].'population'", numberMatches(179528.0))
                .body("'data'.'countries'[6].'cities'[18].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[19].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[19].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[19].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[19].'geonamesID'", numberMatches(3901514.0))
                .body("'data'.'countries'[6].'cities'[19].'location'.'long'", numberMatches(-65.42))
                .body("'data'.'countries'[6].'cities'[19].'population'", numberMatches(71386.0))
                .body("'data'.'countries'[6].'cities'[19].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[20].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[20].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[20].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[20].'geonamesID'", numberMatches(3910027.0))
                .body("'data'.'countries'[6].'cities'[20].'location'.'long'", numberMatches(-63.383333))
                .body("'data'.'countries'[6].'cities'[20].'population'", numberMatches(112837.0))
                .body("'data'.'countries'[6].'cities'[20].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[21].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[21].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[21].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[21].'geonamesID'", numberMatches(3902377.0))
                .body("'data'.'countries'[6].'cities'[21].'location'.'long'", numberMatches(-64.9))
                .body("'data'.'countries'[6].'cities'[21].'population'", numberMatches(101454.0))
                .body("'data'.'countries'[6].'cities'[21].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[22].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[22].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[22].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[22].'geonamesID'", numberMatches(3922414.0))
                .body("'data'.'countries'[6].'cities'[22].'location'.'long'", numberMatches(-63.533333))
                .body("'data'.'countries'[6].'cities'[22].'population'", numberMatches(33838.0))
                .body("'data'.'countries'[6].'cities'[22].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[23].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[23].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[23].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[23].'geonamesID'", numberMatches(3907584.0))
                .body("'data'.'countries'[6].'cities'[23].'location'.'long'", numberMatches(-65.75))
                .body("'data'.'countries'[6].'cities'[23].'population'", numberMatches(189652.0))
                .body("'data'.'countries'[6].'cities'[23].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[24].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[24].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[24].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[24].'geonamesID'", numberMatches(3918378.0))
                .body("'data'.'countries'[6].'cities'[24].'location'.'long'", numberMatches(-68.2))
                .body("'data'.'countries'[6].'cities'[24].'population'", numberMatches(842378.0))
                .body("'data'.'countries'[6].'cities'[24].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'cities'[25].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[6].'cities'[25].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[6].'cities'[25].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[6].'cities'[25].'geonamesID'", numberMatches(3901547.0))
                .body("'data'.'countries'[6].'cities'[25].'location'.'long'", numberMatches(-63.458611))
                .body("'data'.'countries'[6].'cities'[25].'population'", numberMatches(39800.0))
                .body("'data'.'countries'[6].'cities'[25].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[6].'geonamesID'", numberMatches(3923057.0))
                .body("'data'.'countries'[6].'languages'.size()", equalTo(3))
                .body("'data'.'countries'[6].'languages'[0].'alpha2Code'", containsString("ay"))
                .body("'data'.'countries'[6].'languages'[0].'name'", containsString("Aymara"))
                .body("'data'.'countries'[6].'languages'[1].'alpha2Code'", containsString("gn"))
                .body("'data'.'countries'[6].'languages'[1].'name'", containsString("Guarani"))
                .body("'data'.'countries'[6].'languages'[2].'alpha2Code'", containsString("es"))
                .body("'data'.'countries'[6].'languages'[2].'name'", containsString("Spanish"))
                .body("'data'.'countries'[6].'location'.'lat'", numberMatches(-17.05687))
                .body("'data'.'countries'[6].'location'.'long'", numberMatches(-64.991229))
                .body("'data'.'countries'[6].'name'", containsString("Bolivia"))
                .body("'data'.'countries'[7].'alpha2Code'", containsString("BA"))
                .body("'data'.'countries'[7].'capital'.'name'", containsString("Sarajevo"))
                .body("'data'.'countries'[7].'capital'.'timeZoneDST'", nullValue())
                .body("'data'.'countries'[7].'cities'.size()", equalTo(11))
                .body("'data'.'countries'[7].'cities'[0].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[7].'cities'[0].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[7].'cities'[0].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[7].'cities'[0].'geonamesID'", numberMatches(3294894.0))
                .body("'data'.'countries'[7].'cities'[0].'location'.'long'", numberMatches(18.133333))
                .body("'data'.'countries'[7].'cities'[0].'population'", numberMatches(68514.0))
                .body("'data'.'countries'[7].'cities'[0].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[7].'cities'[1].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[7].'cities'[1].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[7].'cities'[1].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[7].'cities'[1].'geonamesID'", numberMatches(3188582.0))
                .body("'data'.'countries'[7].'cities'[1].'location'.'long'", numberMatches(18.676111))
                .body("'data'.'countries'[7].'cities'[1].'population'", numberMatches(110979.0))
                .body("'data'.'countries'[7].'cities'[1].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[7].'cities'[2].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[7].'cities'[2].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[7].'cities'[2].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[7].'cities'[2].'geonamesID'", numberMatches(3203521.0))
                .body("'data'.'countries'[7].'cities'[2].'location'.'long'", numberMatches(18.809167))
                .body("'data'.'countries'[7].'cities'[2].'population'", numberMatches(39893.0))
                .body("'data'.'countries'[7].'cities'[2].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[7].'cities'[3].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[7].'cities'[3].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[7].'cities'[3].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[7].'cities'[3].'geonamesID'", numberMatches(3191281.0))
                .body("'data'.'countries'[7].'cities'[3].'location'.'long'", numberMatches(18.413222))
                .body("'data'.'countries'[7].'cities'[3].'population'", numberMatches(275524.0))
                .body("'data'.'countries'[7].'cities'[3].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[7].'cities'[4].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[7].'cities'[4].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[7].'cities'[4].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[7].'cities'[4].'geonamesID'", numberMatches(3204222.0))
                .body("'data'.'countries'[7].'cities'[4].'location'.'long'", numberMatches(15.866667))
                .body("'data'.'countries'[7].'cities'[4].'population'", numberMatches(43007.0))
                .body("'data'.'countries'[7].'cities'[4].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[7].'cities'[5].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[7].'cities'[5].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[7].'cities'[5].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[7].'cities'[5].'geonamesID'", numberMatches(3188893.0))
                .body("'data'.'countries'[7].'cities'[5].'location'.'long'", numberMatches(18.321667))
                .body("'data'.'countries'[7].'cities'[5].'population'", numberMatches(31433.0))
                .body("'data'.'countries'[7].'cities'[5].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[7].'cities'[6].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[7].'cities'[6].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[7].'cities'[6].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[7].'cities'[6].'geonamesID'", numberMatches(3186573.0))
                .body("'data'.'countries'[7].'cities'[6].'location'.'long'", numberMatches(17.903889))
                .body("'data'.'countries'[7].'cities'[6].'population'", numberMatches(70553.0))
                .body("'data'.'countries'[7].'cities'[6].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[7].'cities'[7].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[7].'cities'[7].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[7].'cities'[7].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[7].'cities'[7].'geonamesID'", numberMatches(3261342.0))
                .body("'data'.'countries'[7].'cities'[7].'location'.'long'", numberMatches(17.7))
                .body("'data'.'countries'[7].'cities'[7].'population'", numberMatches(28122.0))
                .body("'data'.'countries'[7].'cities'[7].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[7].'cities'[8].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[7].'cities'[8].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[7].'cities'[8].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[7].'cities'[8].'geonamesID'", numberMatches(3204541.0))
                .body("'data'.'countries'[7].'cities'[8].'location'.'long'", numberMatches(17.183333))
                .body("'data'.'countries'[7].'cities'[8].'population'", numberMatches(199191.0))
                .body("'data'.'countries'[7].'cities'[8].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[7].'cities'[9].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[7].'cities'[9].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[7].'cities'[9].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[7].'cities'[9].'geonamesID'", numberMatches(3192409.0))
                .body("'data'.'countries'[7].'cities'[9].'location'.'long'", numberMatches(16.7))
                .body("'data'.'countries'[7].'cities'[9].'population'", numberMatches(89397.0))
                .body("'data'.'countries'[7].'cities'[9].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[7].'cities'[10].'continent'.'geonamesID'", numberMatches(6255148.0))
                .body("'data'.'countries'[7].'cities'[10].'continent'.'name'", containsString("Europe"))
                .body("'data'.'countries'[7].'cities'[10].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[7].'cities'[10].'geonamesID'", numberMatches(3294896.0))
                .body("'data'.'countries'[7].'cities'[10].'location'.'long'", numberMatches(19.216667))
                .body("'data'.'countries'[7].'cities'[10].'population'", numberMatches(114663.0))
                .body("'data'.'countries'[7].'cities'[10].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[7].'geonamesID'", numberMatches(3277605.0))
                .body("'data'.'countries'[7].'languages'.size()", equalTo(3))
                .body("'data'.'countries'[7].'languages'[0].'alpha2Code'", containsString("bs"))
                .body("'data'.'countries'[7].'languages'[0].'name'", containsString("Bosnian"))
                .body("'data'.'countries'[7].'languages'[1].'alpha2Code'", containsString("hr"))
                .body("'data'.'countries'[7].'languages'[1].'name'", containsString("Croatian"))
                .body("'data'.'countries'[7].'languages'[2].'alpha2Code'", containsString("sr"))
                .body("'data'.'countries'[7].'languages'[2].'name'", containsString("Serbian"))
                .body("'data'.'countries'[7].'location'.'lat'", numberMatches(44.0))
                .body("'data'.'countries'[7].'location'.'long'", numberMatches(18.0))
                .body("'data'.'countries'[7].'name'", containsString("Bosnia and Herzegovina"))
                .body("'data'.'countries'[8].'alpha2Code'", containsString("BW"))
                .body("'data'.'countries'[8].'capital'.'name'", containsString("Gaborone"))
                .body("'data'.'countries'[8].'capital'.'timeZoneDST'", nullValue())
                .body("'data'.'countries'[8].'cities'.size()", equalTo(5))
                .body("'data'.'countries'[8].'cities'[0].'continent'.'geonamesID'", numberMatches(6255146.0))
                .body("'data'.'countries'[8].'cities'[0].'continent'.'name'", containsString("Africa"))
                .body("'data'.'countries'[8].'cities'[0].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[8].'cities'[0].'geonamesID'", numberMatches(933521.0))
                .body("'data'.'countries'[8].'cities'[0].'location'.'long'", numberMatches(25.666667))
                .body("'data'.'countries'[8].'cities'[0].'population'", numberMatches(26900.0))
                .body("'data'.'countries'[8].'cities'[0].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[8].'cities'[1].'continent'.'geonamesID'", numberMatches(6255146.0))
                .body("'data'.'countries'[8].'cities'[1].'continent'.'name'", containsString("Africa"))
                .body("'data'.'countries'[8].'cities'[1].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[8].'cities'[1].'geonamesID'", numberMatches(933305.0))
                .body("'data'.'countries'[8].'cities'[1].'location'.'long'", numberMatches(25.4951))
                .body("'data'.'countries'[8].'cities'[1].'population'", numberMatches(67598.0))
                .body("'data'.'countries'[8].'cities'[1].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[8].'cities'[2].'continent'.'geonamesID'", numberMatches(6255146.0))
                .body("'data'.'countries'[8].'cities'[2].'continent'.'name'", containsString("Africa"))
                .body("'data'.'countries'[8].'cities'[2].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[8].'cities'[2].'geonamesID'", numberMatches(933773.0))
                .body("'data'.'countries'[8].'cities'[2].'location'.'long'", numberMatches(25.908611))
                .body("'data'.'countries'[8].'cities'[2].'population'", numberMatches(231626.0))
                .body("'data'.'countries'[8].'cities'[2].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[8].'cities'[3].'continent'.'geonamesID'", numberMatches(6255146.0))
                .body("'data'.'countries'[8].'cities'[3].'continent'.'name'", containsString("Africa"))
                .body("'data'.'countries'[8].'cities'[3].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[8].'cities'[3].'geonamesID'", numberMatches(933099.0))
                .body("'data'.'countries'[8].'cities'[3].'location'.'long'", numberMatches(27.916667))
                .body("'data'.'countries'[8].'cities'[3].'population'", numberMatches(49724.0))
                .body("'data'.'countries'[8].'cities'[3].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[8].'cities'[4].'continent'.'geonamesID'", numberMatches(6255146.0))
                .body("'data'.'countries'[8].'cities'[4].'continent'.'name'", containsString("Africa"))
                .body("'data'.'countries'[8].'cities'[4].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[8].'cities'[4].'geonamesID'", numberMatches(933182.0))
                .body("'data'.'countries'[8].'cities'[4].'location'.'long'", numberMatches(27.133333))
                .body("'data'.'countries'[8].'cities'[4].'population'", numberMatches(36211.0))
                .body("'data'.'countries'[8].'cities'[4].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[8].'geonamesID'", numberMatches(933860.0))
                .body("'data'.'countries'[8].'languages'.size()", equalTo(1))
                .body("'data'.'countries'[8].'languages'[0].'alpha2Code'", containsString("en"))
                .body("'data'.'countries'[8].'languages'[0].'name'", containsString("English"))
                .body("'data'.'countries'[8].'location'.'lat'", numberMatches(-22.2))
                .body("'data'.'countries'[8].'location'.'long'", numberMatches(23.7))
                .body("'data'.'countries'[8].'name'", containsString("Botswana"))
                .body("'data'.'countries'[9].'alpha2Code'", containsString("BR"))
                .body("'data'.'countries'[9].'capital'.'name'", containsString("Brasília"))
                .body("'data'.'countries'[9].'capital'.'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'.size()", equalTo(313))
                .body("'data'.'countries'[9].'cities'[0].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[0].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[0].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[0].'geonamesID'", numberMatches(3460584.0))
                .body("'data'.'countries'[9].'cities'[0].'location'.'long'", numberMatches(-44.575833))
                .body("'data'.'countries'[9].'cities'[0].'population'", numberMatches(93847.0))
                .body("'data'.'countries'[9].'cities'[0].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[1].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[1].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[1].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[1].'geonamesID'", numberMatches(3386361.0))
                .body("'data'.'countries'[9].'cities'[1].'location'.'long'", numberMatches(-42.836944))
                .body("'data'.'countries'[9].'cities'[1].'population'", numberMatches(170222.0))
                .body("'data'.'countries'[9].'cities'[1].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[2].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[2].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[2].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[2].'geonamesID'", numberMatches(3406910.0))
                .body("'data'.'countries'[9].'cities'[2].'location'.'long'", numberMatches(-44.78))
                .body("'data'.'countries'[9].'cities'[2].'population'", numberMatches(100014.0))
                .body("'data'.'countries'[9].'cities'[2].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[3].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[3].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[3].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[3].'geonamesID'", numberMatches(6316674.0))
                .body("'data'.'countries'[9].'cities'[3].'location'.'long'", numberMatches(-35.035))
                .body("'data'.'countries'[9].'cities'[3].'population'", numberMatches(185025.0))
                .body("'data'.'countries'[9].'cities'[3].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[4].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[4].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[4].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[4].'geonamesID'", numberMatches(3445156.0))
                .body("'data'.'countries'[9].'cities'[4].'location'.'long'", numberMatches(-51.022778))
                .body("'data'.'countries'[9].'cities'[4].'population'", numberMatches(256302.0))
                .body("'data'.'countries'[9].'cities'[4].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[5].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[5].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[5].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[5].'geonamesID'", numberMatches(3454847.0))
                .body("'data'.'countries'[9].'cities'[5].'location'.'long'", numberMatches(-46.61))
                .body("'data'.'countries'[9].'cities'[5].'population'", numberMatches(106290.0))
                .body("'data'.'countries'[9].'cities'[5].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[6].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[6].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[6].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[6].'geonamesID'", numberMatches(3447651.0))
                .body("'data'.'countries'[9].'cities'[6].'location'.'long'", numberMatches(-47.99))
                .body("'data'.'countries'[9].'cities'[6].'population'", numberMatches(120152.0))
                .body("'data'.'countries'[9].'cities'[6].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[7].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[7].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[7].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[7].'geonamesID'", numberMatches(3448439.0))
                .body("'data'.'countries'[9].'cities'[7].'location'.'long'", numberMatches(-46.633947))
                .body("'data'.'countries'[9].'cities'[7].'population'", numberMatches(1.2325232E7))
                .body("'data'.'countries'[9].'cities'[7].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[8].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[8].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[8].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[8].'geonamesID'", numberMatches(3465284.0))
                .body("'data'.'countries'[9].'cities'[8].'location'.'long'", numberMatches(-46.918889))
                .body("'data'.'countries'[9].'cities'[8].'population'", numberMatches(229548.0))
                .body("'data'.'countries'[9].'cities'[8].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[9].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[9].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[9].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[9].'geonamesID'", numberMatches(3458696.0))
                .body("'data'.'countries'[9].'cities'[9].'location'.'long'", numberMatches(-45.0))
                .body("'data'.'countries'[9].'cities'[9].'population'", numberMatches(104783.0))
                .body("'data'.'countries'[9].'cities'[9].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[10].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[10].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[10].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[10].'geonamesID'", numberMatches(3388376.0))
                .body("'data'.'countries'[9].'cities'[10].'location'.'long'", numberMatches(-35.017778))
                .body("'data'.'countries'[9].'cities'[10].'population'", numberMatches(102895.0))
                .body("'data'.'countries'[9].'cities'[10].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[11].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[11].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[11].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[11].'geonamesID'", numberMatches(3407326.0))
                .body("'data'.'countries'[9].'cities'[11].'location'.'long'", numberMatches(-36.65))
                .body("'data'.'countries'[9].'cities'[11].'population'", numberMatches(234185.0))
                .body("'data'.'countries'[9].'cities'[11].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[12].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[12].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[12].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[12].'geonamesID'", numberMatches(3448622.0))
                .body("'data'.'countries'[9].'cities'[12].'location'.'long'", numberMatches(-51.146944))
                .body("'data'.'countries'[9].'cities'[12].'population'", numberMatches(214087.0))
                .body("'data'.'countries'[9].'cities'[12].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[13].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[13].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[13].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[13].'geonamesID'", numberMatches(3459462.0))
                .body("'data'.'countries'[9].'cities'[13].'location'.'long'", numberMatches(-46.884167))
                .body("'data'.'countries'[9].'cities'[13].'population'", numberMatches(401896.0))
                .body("'data'.'countries'[9].'cities'[13].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[14].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[14].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[14].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[14].'geonamesID'", numberMatches(3395473.0))
                .body("'data'.'countries'[9].'cities'[14].'location'.'long'", numberMatches(-38.625833))
                .body("'data'.'countries'[9].'cities'[14].'population'", numberMatches(229458.0))
                .body("'data'.'countries'[9].'cities'[14].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[15].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[15].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[15].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[15].'geonamesID'", numberMatches(3467467.0))
                .body("'data'.'countries'[9].'cities'[15].'location'.'long'", numberMatches(-51.18))
                .body("'data'.'countries'[9].'cities'[15].'population'", numberMatches(323827.0))
                .body("'data'.'countries'[9].'cities'[15].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[16].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[16].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[16].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[16].'geonamesID'", numberMatches(6321583.0))
                .body("'data'.'countries'[9].'cities'[16].'location'.'long'", numberMatches(-43.863611))
                .body("'data'.'countries'[9].'cities'[16].'population'", numberMatches(361915.0))
                .body("'data'.'countries'[9].'cities'[16].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[17].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[17].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[17].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[17].'geonamesID'", numberMatches(3451353.0))
                .body("'data'.'countries'[9].'cities'[17].'location'.'long'", numberMatches(-44.086944))
                .body("'data'.'countries'[9].'cities'[17].'population'", numberMatches(331045.0))
                .body("'data'.'countries'[9].'cities'[17].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[18].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[18].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[18].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[18].'geonamesID'", numberMatches(6318732.0))
                .body("'data'.'countries'[9].'cities'[18].'location'.'long'", numberMatches(-48.952778))
                .body("'data'.'countries'[9].'cities'[18].'population'", numberMatches(79297.0))
                .body("'data'.'countries'[9].'cities'[18].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[19].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[19].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[19].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[19].'geonamesID'", numberMatches(3453186.0))
                .body("'data'.'countries'[9].'cities'[19].'location'.'long'", numberMatches(-50.161944))
                .body("'data'.'countries'[9].'cities'[19].'population'", numberMatches(311611.0))
                .body("'data'.'countries'[9].'cities'[19].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[20].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[20].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[20].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[20].'geonamesID'", numberMatches(3464460.0))
                .body("'data'.'countries'[9].'cities'[20].'location'.'long'", numberMatches(-54.805833))
                .body("'data'.'countries'[9].'cities'[20].'population'", numberMatches(225495.0))
                .body("'data'.'countries'[9].'cities'[20].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[21].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[21].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[21].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[21].'geonamesID'", numberMatches(3455070.0))
                .body("'data'.'countries'[9].'cities'[21].'location'.'long'", numberMatches(-48.509444))
                .body("'data'.'countries'[9].'cities'[21].'population'", numberMatches(140469.0))
                .body("'data'.'countries'[9].'cities'[21].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[22].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[22].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[22].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[22].'geonamesID'", numberMatches(3397147.0))
                .body("'data'.'countries'[9].'cities'[22].'location'.'long'", numberMatches(-39.315))
                .body("'data'.'countries'[9].'cities'[22].'population'", numberMatches(249939.0))
                .body("'data'.'countries'[9].'cities'[22].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[23].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[23].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[23].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[23].'geonamesID'", numberMatches(6320189.0))
                .body("'data'.'countries'[9].'cities'[23].'location'.'long'", numberMatches(-35.208889))
                .body("'data'.'countries'[9].'cities'[23].'population'", numberMatches(877662.0))
                .body("'data'.'countries'[9].'cities'[23].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[24].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[24].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[24].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[24].'geonamesID'", numberMatches(3448351.0))
                .body("'data'.'countries'[9].'cities'[24].'location'.'long'", numberMatches(-42.102778))
                .body("'data'.'countries'[9].'cities'[24].'population'", numberMatches(87875.0))
                .body("'data'.'countries'[9].'cities'[24].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[25].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[25].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[25].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[25].'geonamesID'", numberMatches(3451668.0))
                .body("'data'.'countries'[9].'cities'[25].'location'.'long'", numberMatches(-44.446944))
                .body("'data'.'countries'[9].'cities'[25].'population'", numberMatches(125214.0))
                .body("'data'.'countries'[9].'cities'[25].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[26].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[26].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[26].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[26].'geonamesID'", numberMatches(3461563.0))
                .body("'data'.'countries'[9].'cities'[26].'location'.'long'", numberMatches(-44.058889))
                .body("'data'.'countries'[9].'cities'[26].'population'", numberMatches(158954.0))
                .body("'data'.'countries'[9].'cities'[26].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[27].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[27].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[27].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[27].'geonamesID'", numberMatches(3448632.0))
                .body("'data'.'countries'[9].'cities'[27].'location'.'long'", numberMatches(-49.205833))
                .body("'data'.'countries'[9].'cities'[27].'population'", numberMatches(264210.0))
                .body("'data'.'countries'[9].'cities'[27].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[28].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[28].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[28].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[28].'geonamesID'", numberMatches(3465038.0))
                .body("'data'.'countries'[9].'cities'[28].'location'.'long'", numberMatches(-56.096944))
                .body("'data'.'countries'[9].'cities'[28].'population'", numberMatches(585367.0))
                .body("'data'.'countries'[9].'cities'[28].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[29].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[29].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[29].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[29].'geonamesID'", numberMatches(3470044.0))
                .body("'data'.'countries'[9].'cities'[29].'location'.'long'", numberMatches(-44.197778))
                .body("'data'.'countries'[9].'cities'[29].'population'", numberMatches(378089.0))
                .body("'data'.'countries'[9].'cities'[29].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[30].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[30].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[30].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[30].'geonamesID'", numberMatches(3406545.0))
                .body("'data'.'countries'[9].'cities'[30].'location'.'long'", numberMatches(-46.035833))
                .body("'data'.'countries'[9].'cities'[30].'population'", numberMatches(101456.0))
                .body("'data'.'countries'[9].'cities'[30].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[31].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[31].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[31].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[31].'geonamesID'", numberMatches(3445993.0))
                .body("'data'.'countries'[9].'cities'[31].'location'.'long'", numberMatches(-49.006944))
                .body("'data'.'countries'[9].'cities'[31].'population'", numberMatches(106422.0))
                .body("'data'.'countries'[9].'cities'[31].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[32].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[32].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[32].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[32].'geonamesID'", numberMatches(3461311.0))
                .body("'data'.'countries'[9].'cities'[32].'location'.'long'", numberMatches(-47.218056))
                .body("'data'.'countries'[9].'cities'[32].'population'", numberMatches(231033.0))
                .body("'data'.'countries'[9].'cities'[32].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[33].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[33].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[33].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[33].'geonamesID'", numberMatches(6319369.0))
                .body("'data'.'countries'[9].'cities'[33].'location'.'long'", numberMatches(-48.371944))
                .body("'data'.'countries'[9].'cities'[33].'population'", numberMatches(535547.0))
                .body("'data'.'countries'[9].'cities'[33].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[34].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[34].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[34].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[34].'geonamesID'", numberMatches(3468403.0))
                .body("'data'.'countries'[9].'cities'[34].'location'.'long'", numberMatches(-51.093889))
                .body("'data'.'countries'[9].'cities'[34].'population'", numberMatches(118278.0))
                .body("'data'.'countries'[9].'cities'[34].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[35].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[35].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[35].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[35].'geonamesID'", numberMatches(3386496.0))
                .body("'data'.'countries'[9].'cities'[35].'location'.'long'", numberMatches(-42.8042))
                .body("'data'.'countries'[9].'cities'[35].'population'", numberMatches(847430.0))
                .body("'data'.'countries'[9].'cities'[35].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[36].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[36].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[36].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[36].'geonamesID'", numberMatches(3449344.0))
                .body("'data'.'countries'[9].'cities'[36].'location'.'long'", numberMatches(-46.565))
                .body("'data'.'countries'[9].'cities'[36].'population'", numberMatches(816925.0))
                .body("'data'.'countries'[9].'cities'[36].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[37].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[37].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[37].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[37].'geonamesID'", numberMatches(3465644.0))
                .body("'data'.'countries'[9].'cities'[37].'location'.'long'", numberMatches(-43.785833))
                .body("'data'.'countries'[9].'cities'[37].'population'", numberMatches(129606.0))
                .body("'data'.'countries'[9].'cities'[37].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[38].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[38].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[38].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[38].'geonamesID'", numberMatches(6324325.0))
                .body("'data'.'countries'[9].'cities'[38].'location'.'long'", numberMatches(-38.221944))
                .body("'data'.'countries'[9].'cities'[38].'population'", numberMatches(119214.0))
                .body("'data'.'countries'[9].'cities'[38].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[39].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[39].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[39].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[39].'geonamesID'", numberMatches(3408424.0))
                .body("'data'.'countries'[9].'cities'[39].'location'.'long'", numberMatches(-48.882778))
                .body("'data'.'countries'[9].'cities'[39].'population'", numberMatches(159080.0))
                .body("'data'.'countries'[9].'cities'[39].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[40].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[40].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[40].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[40].'geonamesID'", numberMatches(3404817.0))
                .body("'data'.'countries'[9].'cities'[40].'location'.'long'", numberMatches(-50.48))
                .body("'data'.'countries'[9].'cities'[40].'population'", numberMatches(99080.0))
                .body("'data'.'countries'[9].'cities'[40].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[41].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[41].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[41].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[41].'geonamesID'", numberMatches(3662762.0))
                .body("'data'.'countries'[9].'cities'[41].'location'.'long'", numberMatches(-63.903889))
                .body("'data'.'countries'[9].'cities'[41].'population'", numberMatches(428527.0))
                .body("'data'.'countries'[9].'cities'[41].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[42].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[42].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[42].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[42].'geonamesID'", numberMatches(3461879.0))
                .body("'data'.'countries'[9].'cities'[42].'location'.'long'", numberMatches(-51.457778))
                .body("'data'.'countries'[9].'cities'[42].'population'", numberMatches(167328.0))
                .body("'data'.'countries'[9].'cities'[42].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[43].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[43].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[43].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[43].'geonamesID'", numberMatches(3447399.0))
                .body("'data'.'countries'[9].'cities'[43].'location'.'long'", numberMatches(-47.457778))
                .body("'data'.'countries'[9].'cities'[43].'population'", numberMatches(644919.0))
                .body("'data'.'countries'[9].'cities'[43].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[44].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[44].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[44].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[44].'geonamesID'", numberMatches(3460845.0))
                .body("'data'.'countries'[9].'cities'[44].'location'.'long'", numberMatches(-48.661944))
                .body("'data'.'countries'[9].'cities'[44].'population'", numberMatches(223112.0))
                .body("'data'.'countries'[9].'cities'[44].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[45].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[45].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[45].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[45].'geonamesID'", numberMatches(6319248.0))
                .body("'data'.'countries'[9].'cities'[45].'location'.'long'", numberMatches(-60.145833))
                .body("'data'.'countries'[9].'cities'[45].'population'", numberMatches(93745.0))
                .body("'data'.'countries'[9].'cities'[45].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[46].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[46].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[46].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[46].'geonamesID'", numberMatches(3453535.0))
                .body("'data'.'countries'[9].'cities'[46].'location'.'long'", numberMatches(-49.062778))
                .body("'data'.'countries'[9].'cities'[46].'population'", numberMatches(93207.0))
                .body("'data'.'countries'[9].'cities'[46].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[47].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[47].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[47].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[47].'geonamesID'", numberMatches(3446621.0))
                .body("'data'.'countries'[9].'cities'[47].'location'.'long'", numberMatches(-41.505))
                .body("'data'.'countries'[9].'cities'[47].'population'", numberMatches(140937.0))
                .body("'data'.'countries'[9].'cities'[47].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[48].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[48].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[48].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[48].'geonamesID'", numberMatches(3384987.0))
                .body("'data'.'countries'[9].'cities'[48].'location'.'long'", numberMatches(-35.3075))
                .body("'data'.'countries'[9].'cities'[48].'population'", numberMatches(129974.0))
                .body("'data'.'countries'[9].'cities'[48].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[49].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[49].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[49].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[49].'geonamesID'", numberMatches(3450269.0))
                .body("'data'.'countries'[9].'cities'[49].'location'.'long'", numberMatches(-52.425833))
                .body("'data'.'countries'[9].'cities'[49].'population'", numberMatches(118374.0))
                .body("'data'.'countries'[9].'cities'[49].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[50].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[50].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[50].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[50].'geonamesID'", numberMatches(6322386.0))
                .body("'data'.'countries'[9].'cities'[50].'location'.'long'", numberMatches(-46.193056))
                .body("'data'.'countries'[9].'cities'[50].'population'", numberMatches(424633.0))
                .body("'data'.'countries'[9].'cities'[50].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[51].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[51].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[51].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[51].'geonamesID'", numberMatches(3407882.0))
                .body("'data'.'countries'[9].'cities'[51].'location'.'long'", numberMatches(-52.205833))
                .body("'data'.'countries'[9].'cities'[51].'population'", numberMatches(109938.0))
                .body("'data'.'countries'[9].'cities'[51].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[52].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[52].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[52].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[52].'geonamesID'", numberMatches(3391360.0))
                .body("'data'.'countries'[9].'cities'[52].'location'.'long'", numberMatches(-51.175))
                .body("'data'.'countries'[9].'cities'[52].'population'", numberMatches(112218.0))
                .body("'data'.'countries'[9].'cities'[52].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[53].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[53].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[53].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[53].'geonamesID'", numberMatches(3454857.0))
                .body("'data'.'countries'[9].'cities'[53].'location'.'long'", numberMatches(-52.406944))
                .body("'data'.'countries'[9].'cities'[53].'population'", numberMatches(184826.0))
                .body("'data'.'countries'[9].'cities'[53].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[54].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[54].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[54].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[54].'geonamesID'", numberMatches(3452640.0))
                .body("'data'.'countries'[9].'cities'[54].'location'.'long'", numberMatches(-39.065))
                .body("'data'.'countries'[9].'cities'[54].'population'", numberMatches(145431.0))
                .body("'data'.'countries'[9].'cities'[54].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[55].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[55].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[55].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[55].'geonamesID'", numberMatches(3392998.0))
                .body("'data'.'countries'[9].'cities'[55].'location'.'long'", numberMatches(-35.262778))
                .body("'data'.'countries'[9].'cities'[55].'population'", numberMatches(202456.0))
                .body("'data'.'countries'[9].'cities'[55].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[56].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[56].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[56].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[56].'geonamesID'", numberMatches(3459712.0))
                .body("'data'.'countries'[9].'cities'[56].'location'.'long'", numberMatches(-48.845833))
                .body("'data'.'countries'[9].'cities'[56].'population'", numberMatches(515288.0))
                .body("'data'.'countries'[9].'cities'[56].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[57].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[57].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[57].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[57].'geonamesID'", numberMatches(6316328.0))
                .body("'data'.'countries'[9].'cities'[57].'location'.'long'", numberMatches(-48.281944))
                .body("'data'.'countries'[9].'cities'[57].'population'", numberMatches(217698.0))
                .body("'data'.'countries'[9].'cities'[57].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[58].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[58].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[58].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[58].'geonamesID'", numberMatches(3445446.0))
                .body("'data'.'countries'[9].'cities'[58].'location'.'long'", numberMatches(-46.827778))
                .body("'data'.'countries'[9].'cities'[58].'population'", numberMatches(116601.0))
                .body("'data'.'countries'[9].'cities'[58].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[59].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[59].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[59].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[59].'geonamesID'", numberMatches(3467978.0))
                .body("'data'.'countries'[9].'cities'[59].'location'.'long'", numberMatches(-51.277778))
                .body("'data'.'countries'[9].'cities'[59].'population'", numberMatches(107341.0))
                .body("'data'.'countries'[9].'cities'[59].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[60].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[60].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[60].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[60].'geonamesID'", numberMatches(6321685.0))
                .body("'data'.'countries'[9].'cities'[60].'location'.'long'", numberMatches(-46.560833))
                .body("'data'.'countries'[9].'cities'[60].'population'", numberMatches(168641.0))
                .body("'data'.'countries'[9].'cities'[60].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[61].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[61].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[61].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[61].'geonamesID'", numberMatches(3395981.0))
                .body("'data'.'countries'[9].'cities'[61].'location'.'long'", numberMatches(-35.735))
                .body("'data'.'countries'[9].'cities'[61].'population'", numberMatches(1029129.0))
                .body("'data'.'countries'[9].'cities'[61].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[62].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[62].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[62].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[62].'geonamesID'", numberMatches(3465059.0))
                .body("'data'.'countries'[9].'cities'[62].'location'.'long'", numberMatches(-46.425556))
                .body("'data'.'countries'[9].'cities'[62].'population'", numberMatches(127006.0))
                .body("'data'.'countries'[9].'cities'[62].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[63].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[63].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[63].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[63].'geonamesID'", numberMatches(3460728.0))
                .body("'data'.'countries'[9].'cities'[63].'location'.'long'", numberMatches(-48.053056))
                .body("'data'.'countries'[9].'cities'[63].'population'", numberMatches(157016.0))
                .body("'data'.'countries'[9].'cities'[63].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[64].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[64].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[64].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[64].'geonamesID'", numberMatches(3397909.0))
                .body("'data'.'countries'[9].'cities'[64].'location'.'long'", numberMatches(-39.578889))
                .body("'data'.'countries'[9].'cities'[64].'population'", numberMatches(130539.0))
                .body("'data'.'countries'[9].'cities'[64].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[65].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[65].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[65].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[65].'geonamesID'", numberMatches(3403741.0))
                .body("'data'.'countries'[9].'cities'[65].'location'.'long'", numberMatches(-34.980833))
                .body("'data'.'countries'[9].'cities'[65].'population'", numberMatches(155054.0))
                .body("'data'.'countries'[9].'cities'[65].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[66].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[66].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[66].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[66].'geonamesID'", numberMatches(3450083.0))
                .body("'data'.'countries'[9].'cities'[66].'location'.'long'", numberMatches(-53.806944))
                .body("'data'.'countries'[9].'cities'[66].'population'", numberMatches(261031.0))
                .body("'data'.'countries'[9].'cities'[66].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[67].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[67].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[67].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[67].'geonamesID'", numberMatches(3463030.0))
                .body("'data'.'countries'[9].'cities'[67].'location'.'long'", numberMatches(-54.5875))
                .body("'data'.'countries'[9].'cities'[67].'population'", numberMatches(258248.0))
                .body("'data'.'countries'[9].'cities'[67].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[68].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[68].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[68].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[68].'geonamesID'", numberMatches(3402383.0))
                .body("'data'.'countries'[9].'cities'[68].'location'.'long'", numberMatches(-43.355833))
                .body("'data'.'countries'[9].'cities'[68].'population'", numberMatches(155129.0))
                .body("'data'.'countries'[9].'cities'[68].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[69].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[69].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[69].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[69].'geonamesID'", numberMatches(6323326.0))
                .body("'data'.'countries'[9].'cities'[69].'location'.'long'", numberMatches(-51.083889))
                .body("'data'.'countries'[9].'cities'[69].'population'", numberMatches(195673.0))
                .body("'data'.'countries'[9].'cities'[69].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[70].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[70].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[70].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[70].'geonamesID'", numberMatches(6321898.0))
                .body("'data'.'countries'[9].'cities'[70].'location'.'long'", numberMatches(-47.931944))
                .body("'data'.'countries'[9].'cities'[70].'population'", numberMatches(325279.0))
                .body("'data'.'countries'[9].'cities'[70].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[71].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[71].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[71].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[71].'geonamesID'", numberMatches(3458498.0))
                .body("'data'.'countries'[9].'cities'[71].'location'.'long'", numberMatches(-40.06506))
                .body("'data'.'countries'[9].'cities'[71].'population'", numberMatches(176688.0))
                .body("'data'.'countries'[9].'cities'[71].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[72].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[72].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[72].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[72].'geonamesID'", numberMatches(3458131.0))
                .body("'data'.'countries'[9].'cities'[72].'location'.'long'", numberMatches(-46.586944))
                .body("'data'.'countries'[9].'cities'[72].'population'", numberMatches(100179.0))
                .body("'data'.'countries'[9].'cities'[72].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[73].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[73].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[73].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[73].'geonamesID'", numberMatches(3388441.0))
                .body("'data'.'countries'[9].'cities'[73].'location'.'long'", numberMatches(-44.053889))
                .body("'data'.'countries'[9].'cities'[73].'population'", numberMatches(179028.0))
                .body("'data'.'countries'[9].'cities'[73].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[74].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[74].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[74].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[74].'geonamesID'", numberMatches(3456166.0))
                .body("'data'.'countries'[9].'cities'[74].'location'.'long'", numberMatches(-42.530833))
                .body("'data'.'countries'[9].'cities'[74].'population'", numberMatches(191158.0))
                .body("'data'.'countries'[9].'cities'[74].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[75].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[75].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[75].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[75].'geonamesID'", numberMatches(3453643.0))
                .body("'data'.'countries'[9].'cities'[75].'location'.'long'", numberMatches(-47.649167))
                .body("'data'.'countries'[9].'cities'[75].'population'", numberMatches(391449.0))
                .body("'data'.'countries'[9].'cities'[75].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[76].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[76].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[76].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[76].'geonamesID'", numberMatches(6319198.0))
                .body("'data'.'countries'[9].'cities'[76].'location'.'long'", numberMatches(-43.450833))
                .body("'data'.'countries'[9].'cities'[76].'population'", numberMatches(797435.0))
                .body("'data'.'countries'[9].'cities'[76].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[77].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[77].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[77].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[77].'geonamesID'", numberMatches(6319515.0))
                .body("'data'.'countries'[9].'cities'[77].'location'.'long'", numberMatches(-48.206944))
                .body("'data'.'countries'[9].'cities'[77].'population'", numberMatches(150484.0))
                .body("'data'.'countries'[9].'cities'[77].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[78].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[78].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[78].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[78].'geonamesID'", numberMatches(3456500.0))
                .body("'data'.'countries'[9].'cities'[78].'location'.'long'", numberMatches(-42.365833))
                .body("'data'.'countries'[9].'cities'[78].'population'", numberMatches(100765.0))
                .body("'data'.'countries'[9].'cities'[78].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[79].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[79].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[79].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[79].'geonamesID'", numberMatches(3471766.0))
                .body("'data'.'countries'[9].'cities'[79].'location'.'long'", numberMatches(-48.175833))
                .body("'data'.'countries'[9].'cities'[79].'population'", numberMatches(226508.0))
                .body("'data'.'countries'[9].'cities'[79].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[80].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[80].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[80].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[80].'geonamesID'", numberMatches(3450144.0))
                .body("'data'.'countries'[9].'cities'[80].'location'.'long'", numberMatches(-43.850833))
                .body("'data'.'countries'[9].'cities'[80].'population'", numberMatches(202942.0))
                .body("'data'.'countries'[9].'cities'[80].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[81].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[81].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[81].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[81].'geonamesID'", numberMatches(3472518.0))
                .body("'data'.'countries'[9].'cities'[81].'location'.'long'", numberMatches(-49.31))
                .body("'data'.'countries'[9].'cities'[81].'population'", numberMatches(103204.0))
                .body("'data'.'countries'[9].'cities'[81].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[82].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[82].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[82].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[82].'geonamesID'", numberMatches(3470142.0))
                .body("'data'.'countries'[9].'cities'[82].'location'.'long'", numberMatches(-43.398889))
                .body("'data'.'countries'[9].'cities'[82].'population'", numberMatches(469332.0))
                .body("'data'.'countries'[9].'cities'[82].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[83].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[83].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[83].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[83].'geonamesID'", numberMatches(3466692.0))
                .body("'data'.'countries'[9].'cities'[83].'location'.'long'", numberMatches(-48.972778))
                .body("'data'.'countries'[9].'cities'[83].'population'", numberMatches(119480.0))
                .body("'data'.'countries'[9].'cities'[83].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[84].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[84].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[84].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[84].'geonamesID'", numberMatches(3396016.0))
                .body("'data'.'countries'[9].'cities'[84].'location'.'long'", numberMatches(-51.065311))
                .body("'data'.'countries'[9].'cities'[84].'population'", numberMatches(474706.0))
                .body("'data'.'countries'[9].'cities'[84].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[85].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[85].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[85].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[85].'geonamesID'", numberMatches(6322035.0))
                .body("'data'.'countries'[9].'cities'[85].'location'.'long'", numberMatches(-42.818889))
                .body("'data'.'countries'[9].'cities'[85].'population'", numberMatches(164504.0))
                .body("'data'.'countries'[9].'cities'[85].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[86].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[86].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[86].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[86].'geonamesID'", numberMatches(3463140.0))
                .body("'data'.'countries'[9].'cities'[86].'location'.'long'", numberMatches(-47.333889))
                .body("'data'.'countries'[9].'cities'[86].'population'", numberMatches(123684.0))
                .body("'data'.'countries'[9].'cities'[86].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[87].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[87].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[87].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[87].'geonamesID'", numberMatches(3465476.0))
                .body("'data'.'countries'[9].'cities'[87].'location'.'long'", numberMatches(-42.628889))
                .body("'data'.'countries'[9].'cities'[87].'population'", numberMatches(110290.0))
                .body("'data'.'countries'[9].'cities'[87].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[88].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[88].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[88].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[88].'geonamesID'", numberMatches(3445782.0))
                .body("'data'.'countries'[9].'cities'[88].'location'.'long'", numberMatches(-53.325))
                .body("'data'.'countries'[9].'cities'[88].'population'", numberMatches(100676.0))
                .body("'data'.'countries'[9].'cities'[88].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[89].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[89].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[89].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[89].'geonamesID'", numberMatches(6318755.0))
                .body("'data'.'countries'[9].'cities'[89].'location'.'long'", numberMatches(-39.741944))
                .body("'data'.'countries'[9].'cities'[89].'population'", numberMatches(157804.0))
                .body("'data'.'countries'[9].'cities'[89].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[90].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[90].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[90].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[90].'geonamesID'", numberMatches(3408404.0))
                .body("'data'.'countries'[9].'cities'[90].'location'.'long'", numberMatches(-34.902778))
                .body("'data'.'countries'[9].'cities'[90].'population'", numberMatches(94429.0))
                .body("'data'.'countries'[9].'cities'[90].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[91].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[91].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[91].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[91].'geonamesID'", numberMatches(3455729.0))
                .body("'data'.'countries'[9].'cities'[91].'location'.'long'", numberMatches(-49.870833))
                .body("'data'.'countries'[9].'cities'[91].'population'", numberMatches(110282.0))
                .body("'data'.'countries'[9].'cities'[91].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[92].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[92].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[92].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[92].'geonamesID'", numberMatches(3449433.0))
                .body("'data'.'countries'[9].'cities'[92].'location'.'long'", numberMatches(-46.333889))
                .body("'data'.'countries'[9].'cities'[92].'population'", numberMatches(433966.0))
                .body("'data'.'countries'[9].'cities'[92].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[93].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[93].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[93].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[93].'geonamesID'", numberMatches(6322373.0))
                .body("'data'.'countries'[9].'cities'[93].'location'.'long'", numberMatches(-46.460833))
                .body("'data'.'countries'[9].'cities'[93].'population'", numberMatches(453286.0))
                .body("'data'.'countries'[9].'cities'[93].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[94].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[94].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[94].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[94].'geonamesID'", numberMatches(3447259.0))
                .body("'data'.'countries'[9].'cities'[94].'location'.'long'", numberMatches(-47.266944))
                .body("'data'.'countries'[9].'cities'[94].'population'", numberMatches(265955.0))
                .body("'data'.'countries'[9].'cities'[94].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[95].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[95].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[95].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[95].'geonamesID'", numberMatches(3665199.0))
                .body("'data'.'countries'[9].'cities'[95].'location'.'long'", numberMatches(-63.040833))
                .body("'data'.'countries'[9].'cities'[95].'population'", numberMatches(109523.0))
                .body("'data'.'countries'[9].'cities'[95].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[96].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[96].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[96].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[96].'geonamesID'", numberMatches(3460949.0))
                .body("'data'.'countries'[9].'cities'[96].'location'.'long'", numberMatches(-39.28))
                .body("'data'.'countries'[9].'cities'[96].'population'", numberMatches(219680.0))
                .body("'data'.'countries'[9].'cities'[96].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[97].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[97].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[97].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[97].'geonamesID'", numberMatches(3398269.0))
                .body("'data'.'countries'[9].'cities'[97].'location'.'long'", numberMatches(-47.475833))
                .body("'data'.'countries'[9].'cities'[97].'population'", numberMatches(259337.0))
                .body("'data'.'countries'[9].'cities'[97].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[98].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[98].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[98].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[98].'geonamesID'", numberMatches(3448519.0))
                .body("'data'.'countries'[9].'cities'[98].'location'.'long'", numberMatches(-39.858889))
                .body("'data'.'countries'[9].'cities'[98].'population'", numberMatches(132642.0))
                .body("'data'.'countries'[9].'cities'[98].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[99].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[99].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[99].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[99].'geonamesID'", numberMatches(3459505.0))
                .body("'data'.'countries'[9].'cities'[99].'location'.'long'", numberMatches(-43.35))
                .body("'data'.'countries'[9].'cities'[99].'population'", numberMatches(555284.0))
                .body("'data'.'countries'[9].'cities'[99].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[100].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[100].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[100].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[100].'geonamesID'", numberMatches(3465944.0))
                .body("'data'.'countries'[9].'cities'[100].'location'.'long'", numberMatches(-40.630833))
                .body("'data'.'countries'[9].'cities'[100].'population'", numberMatches(111788.0))
                .body("'data'.'countries'[9].'cities'[100].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[101].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[101].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[101].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[101].'geonamesID'", numberMatches(3460522.0))
                .body("'data'.'countries'[9].'cities'[101].'location'.'long'", numberMatches(-49.217778))
                .body("'data'.'countries'[9].'cities'[101].'population'", numberMatches(105809.0))
                .body("'data'.'countries'[9].'cities'[101].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[102].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[102].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[102].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[102].'geonamesID'", numberMatches(3392887.0))
                .body("'data'.'countries'[9].'cities'[102].'location'.'long'", numberMatches(-37.28))
                .body("'data'.'countries'[9].'cities'[102].'population'", numberMatches(106314.0))
                .body("'data'.'countries'[9].'cities'[102].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[103].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[103].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[103].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[103].'geonamesID'", numberMatches(3395448.0))
                .body("'data'.'countries'[9].'cities'[103].'location'.'long'", numberMatches(-38.685833))
                .body("'data'.'countries'[9].'cities'[103].'population'", numberMatches(130346.0))
                .body("'data'.'countries'[9].'cities'[103].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[104].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[104].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[104].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[104].'geonamesID'", numberMatches(3405870.0))
                .body("'data'.'countries'[9].'cities'[104].'location'.'long'", numberMatches(-48.503889))
                .body("'data'.'countries'[9].'cities'[104].'population'", numberMatches(1499641.0))
                .body("'data'.'countries'[9].'cities'[104].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[105].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[105].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[105].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[105].'geonamesID'", numberMatches(3460132.0))
                .body("'data'.'countries'[9].'cities'[105].'location'.'long'", numberMatches(-43.652778))
                .body("'data'.'countries'[9].'cities'[105].'population'", numberMatches(95492.0))
                .body("'data'.'countries'[9].'cities'[105].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[106].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[106].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[106].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[106].'geonamesID'", numberMatches(6319219.0))
                .body("'data'.'countries'[9].'cities'[106].'location'.'long'", numberMatches(-51.518889))
                .body("'data'.'countries'[9].'cities'[106].'population'", numberMatches(121803.0))
                .body("'data'.'countries'[9].'cities'[106].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[107].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[107].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[107].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[107].'geonamesID'", numberMatches(3445487.0))
                .body("'data'.'countries'[9].'cities'[107].'location'.'long'", numberMatches(-45.43))
                .body("'data'.'countries'[9].'cities'[107].'population'", numberMatches(123081.0))
                .body("'data'.'countries'[9].'cities'[107].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[108].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[108].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[108].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[108].'geonamesID'", numberMatches(3464739.0))
                .body("'data'.'countries'[9].'cities'[108].'location'.'long'", numberMatches(-46.622778))
                .body("'data'.'countries'[9].'cities'[108].'population'", numberMatches(412428.0))
                .body("'data'.'countries'[9].'cities'[108].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[109].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[109].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[109].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[109].'geonamesID'", numberMatches(3451136.0))
                .body("'data'.'countries'[9].'cities'[109].'location'.'long'", numberMatches(-52.098889))
                .body("'data'.'countries'[9].'cities'[109].'population'", numberMatches(211965.0))
                .body("'data'.'countries'[9].'cities'[109].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[110].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[110].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[110].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[110].'geonamesID'", numberMatches(6322568.0))
                .body("'data'.'countries'[9].'cities'[110].'location'.'long'", numberMatches(-46.550833))
                .body("'data'.'countries'[9].'cities'[110].'population'", numberMatches(158024.0))
                .body("'data'.'countries'[9].'cities'[110].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[111].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[111].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[111].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[111].'geonamesID'", numberMatches(3460102.0))
                .body("'data'.'countries'[9].'cities'[111].'location'.'long'", numberMatches(-49.066944))
                .body("'data'.'countries'[9].'cities'[111].'population'", numberMatches(143123.0))
                .body("'data'.'countries'[9].'cities'[111].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[112].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[112].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[112].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[112].'geonamesID'", numberMatches(6322041.0))
                .body("'data'.'countries'[9].'cities'[112].'location'.'long'", numberMatches(-43.103611))
                .body("'data'.'countries'[9].'cities'[112].'population'", numberMatches(496696.0))
                .body("'data'.'countries'[9].'cities'[112].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[113].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[113].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[113].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[113].'geonamesID'", numberMatches(6316751.0))
                .body("'data'.'countries'[9].'cities'[113].'location'.'long'", numberMatches(-41.323889))
                .body("'data'.'countries'[9].'cities'[113].'population'", numberMatches(463731.0))
                .body("'data'.'countries'[9].'cities'[113].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[114].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[114].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[114].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[114].'geonamesID'", numberMatches(3471830.0))
                .body("'data'.'countries'[9].'cities'[114].'location'.'long'", numberMatches(-48.186944))
                .body("'data'.'countries'[9].'cities'[114].'population'", numberMatches(116871.0))
                .body("'data'.'countries'[9].'cities'[114].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[115].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[115].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[115].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[115].'geonamesID'", numberMatches(3471039.0))
                .body("'data'.'countries'[9].'cities'[115].'location'.'long'", numberMatches(-48.635))
                .body("'data'.'countries'[9].'cities'[115].'population'", numberMatches(124557.0))
                .body("'data'.'countries'[9].'cities'[115].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[116].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[116].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[116].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[116].'geonamesID'", numberMatches(6319062.0))
                .body("'data'.'countries'[9].'cities'[116].'location'.'long'", numberMatches(-34.977778))
                .body("'data'.'countries'[9].'cities'[116].'population'", numberMatches(134940.0))
                .body("'data'.'countries'[9].'cities'[116].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[117].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[117].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[117].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[117].'geonamesID'", numberMatches(6316298.0))
                .body("'data'.'countries'[9].'cities'[117].'location'.'long'", numberMatches(-47.505))
                .body("'data'.'countries'[9].'cities'[117].'population'", numberMatches(104047.0))
                .body("'data'.'countries'[9].'cities'[117].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[118].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[118].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[118].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[118].'geonamesID'", numberMatches(6322114.0))
                .body("'data'.'countries'[9].'cities'[118].'location'.'long'", numberMatches(-46.550556))
                .body("'data'.'countries'[9].'cities'[118].'population'", numberMatches(137187.0))
                .body("'data'.'countries'[9].'cities'[118].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[119].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[119].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[119].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[119].'geonamesID'", numberMatches(3464688.0))
                .body("'data'.'countries'[9].'cities'[119].'location'.'long'", numberMatches(-44.883889))
                .body("'data'.'countries'[9].'cities'[119].'population'", numberMatches(213016.0))
                .body("'data'.'countries'[9].'cities'[119].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[120].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[120].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[120].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[120].'geonamesID'", numberMatches(6322078.0))
                .body("'data'.'countries'[9].'cities'[120].'location'.'long'", numberMatches(-42.965833))
                .body("'data'.'countries'[9].'cities'[120].'population'", numberMatches(163746.0))
                .body("'data'.'countries'[9].'cities'[120].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[121].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[121].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[121].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[121].'geonamesID'", numberMatches(3464305.0))
                .body("'data'.'countries'[9].'cities'[121].'location'.'long'", numberMatches(-46.851944))
                .body("'data'.'countries'[9].'cities'[121].'population'", numberMatches(261781.0))
                .body("'data'.'countries'[9].'cities'[121].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[122].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[122].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[122].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[122].'geonamesID'", numberMatches(3463237.0))
                .body("'data'.'countries'[9].'cities'[122].'location'.'long'", numberMatches(-48.553047))
                .body("'data'.'countries'[9].'cities'[122].'population'", numberMatches(477798.0))
                .body("'data'.'countries'[9].'cities'[122].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[123].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[123].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[123].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[123].'geonamesID'", numberMatches(3458575.0))
                .body("'data'.'countries'[9].'cities'[123].'location'.'long'", numberMatches(-47.401667))
                .body("'data'.'countries'[9].'cities'[123].'population'", numberMatches(296440.0))
                .body("'data'.'countries'[9].'cities'[123].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[124].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[124].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[124].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[124].'geonamesID'", numberMatches(3464073.0))
                .body("'data'.'countries'[9].'cities'[124].'location'.'long'", numberMatches(-52.273889))
                .body("'data'.'countries'[9].'cities'[124].'population'", numberMatches(96087.0))
                .body("'data'.'countries'[9].'cities'[124].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[125].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[125].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[125].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[125].'geonamesID'", numberMatches(3403697.0))
                .body("'data'.'countries'[9].'cities'[125].'location'.'long'", numberMatches(-49.495833))
                .body("'data'.'countries'[9].'cities'[125].'population'", numberMatches(139364.0))
                .body("'data'.'countries'[9].'cities'[125].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[126].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[126].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[126].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[126].'geonamesID'", numberMatches(3454031.0))
                .body("'data'.'countries'[9].'cities'[126].'location'.'long'", numberMatches(-43.178889))
                .body("'data'.'countries'[9].'cities'[126].'population'", numberMatches(298142.0))
                .body("'data'.'countries'[9].'cities'[126].'timeZoneDST'.'name'", containsString("UTC−02:00"))
                .body("'data'.'countries'[9].'cities'[126].'timeZoneDST'.'offset'", numberMatches(-2.0))
                .body("'data'.'countries'[9].'cities'[127].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[127].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[127].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[127].'geonamesID'", numberMatches(3461888.0))
                .body("'data'.'countries'[9].'cities'[127].'location'.'long'", numberMatches(-40.510833))
                .body("'data'.'countries'[9].'cities'[127].'population'", numberMatches(126701.0))
                .body("'data'.'countries'[9].'cities'[127].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[128].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[128].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[128].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[128].'geonamesID'", numberMatches(6319443.0))
                .body("'data'.'countries'[9].'cities'[128].'location'.'long'", numberMatches(-49.901944))
                .body("'data'.'countries'[9].'cities'[128].'population'", numberMatches(153908.0))
                .body("'data'.'countries'[9].'cities'[128].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[129].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[129].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[129].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[129].'geonamesID'", numberMatches(3468376.0))
                .body("'data'.'countries'[9].'cities'[129].'location'.'long'", numberMatches(-41.112778))
                .body("'data'.'countries'[9].'cities'[129].'population'", numberMatches(210589.0))
                .body("'data'.'countries'[9].'cities'[129].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[130].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[130].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[130].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[130].'geonamesID'", numberMatches(3448639.0))
                .body("'data'.'countries'[9].'cities'[130].'location'.'long'", numberMatches(-49.378889))
                .body("'data'.'countries'[9].'cities'[130].'population'", numberMatches(442548.0))
                .body("'data'.'countries'[9].'cities'[130].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[131].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[131].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[131].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[131].'geonamesID'", numberMatches(3393001.0))
                .body("'data'.'countries'[9].'cities'[131].'location'.'long'", numberMatches(-41.776944))
                .body("'data'.'countries'[9].'cities'[131].'population'", numberMatches(153482.0))
                .body("'data'.'countries'[9].'cities'[131].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[132].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[132].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[132].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[132].'geonamesID'", numberMatches(6322675.0))
                .body("'data'.'countries'[9].'cities'[132].'location'.'long'", numberMatches(-51.460833))
                .body("'data'.'countries'[9].'cities'[132].'population'", numberMatches(120919.0))
                .body("'data'.'countries'[9].'cities'[132].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[133].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[133].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[133].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[133].'geonamesID'", numberMatches(3472342.0))
                .body("'data'.'countries'[9].'cities'[133].'location'.'long'", numberMatches(-47.330833))
                .body("'data'.'countries'[9].'cities'[133].'population'", numberMatches(229322.0))
                .body("'data'.'countries'[9].'cities'[133].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[134].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[134].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[134].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[134].'geonamesID'", numberMatches(6319376.0))
                .body("'data'.'countries'[9].'cities'[134].'location'.'long'", numberMatches(-48.625833))
                .body("'data'.'countries'[9].'cities'[134].'population'", numberMatches(118537.0))
                .body("'data'.'countries'[9].'cities'[134].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[135].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[135].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[135].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[135].'geonamesID'", numberMatches(3456290.0))
                .body("'data'.'countries'[9].'cities'[135].'location'.'long'", numberMatches(-43.413889))
                .body("'data'.'countries'[9].'cities'[135].'population'", numberMatches(157425.0))
                .body("'data'.'countries'[9].'cities'[135].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[136].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[136].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[136].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[136].'geonamesID'", numberMatches(3460960.0))
                .body("'data'.'countries'[9].'cities'[136].'location'.'long'", numberMatches(-43.226944))
                .body("'data'.'countries'[9].'cities'[136].'population'", numberMatches(109783.0))
                .body("'data'.'countries'[9].'cities'[136].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[137].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[137].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[137].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[137].'geonamesID'", numberMatches(6318694.0))
                .body("'data'.'countries'[9].'cities'[137].'location'.'long'", numberMatches(-38.403889))
                .body("'data'.'countries'[9].'cities'[137].'population'", numberMatches(133202.0))
                .body("'data'.'countries'[9].'cities'[137].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[138].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[138].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[138].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[138].'geonamesID'", numberMatches(3460523.0))
                .body("'data'.'countries'[9].'cities'[138].'location'.'long'", numberMatches(-49.465))
                .body("'data'.'countries'[9].'cities'[138].'population'", numberMatches(105255.0))
                .body("'data'.'countries'[9].'cities'[138].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[139].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[139].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[139].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[139].'geonamesID'", numberMatches(6322334.0))
                .body("'data'.'countries'[9].'cities'[139].'location'.'long'", numberMatches(-46.902778))
                .body("'data'.'countries'[9].'cities'[139].'population'", numberMatches(118832.0))
                .body("'data'.'countries'[9].'cities'[139].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[140].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[140].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[140].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[140].'geonamesID'", numberMatches(3445026.0))
                .body("'data'.'countries'[9].'cities'[140].'location'.'long'", numberMatches(-40.293611))
                .body("'data'.'countries'[9].'cities'[140].'population'", numberMatches(472762.0))
                .body("'data'.'countries'[9].'cities'[140].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[141].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[141].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[141].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[141].'geonamesID'", numberMatches(3397966.0))
                .body("'data'.'countries'[9].'cities'[141].'location'.'long'", numberMatches(-55.983889))
                .body("'data'.'countries'[9].'cities'[141].'population'", numberMatches(101395.0))
                .body("'data'.'countries'[9].'cities'[141].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[142].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[142].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[142].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[142].'geonamesID'", numberMatches(3471758.0))
                .body("'data'.'countries'[9].'cities'[142].'location'.'long'", numberMatches(-47.383889))
                .body("'data'.'countries'[9].'cities'[142].'population'", numberMatches(128895.0))
                .body("'data'.'countries'[9].'cities'[142].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[143].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[143].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[143].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[143].'geonamesID'", numberMatches(3460005.0))
                .body("'data'.'countries'[9].'cities'[143].'location'.'long'", numberMatches(-48.557778))
                .body("'data'.'countries'[9].'cities'[143].'population'", numberMatches(143283.0))
                .body("'data'.'countries'[9].'cities'[143].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[144].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[144].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[144].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[144].'geonamesID'", numberMatches(3447212.0))
                .body("'data'.'countries'[9].'cities'[144].'location'.'long'", numberMatches(-46.310833))
                .body("'data'.'countries'[9].'cities'[144].'population'", numberMatches(285280.0))
                .body("'data'.'countries'[9].'cities'[144].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[145].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[145].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[145].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[145].'geonamesID'", numberMatches(3470636.0))
                .body("'data'.'countries'[9].'cities'[145].'location'.'long'", numberMatches(-44.170833))
                .body("'data'.'countries'[9].'cities'[145].'population'", numberMatches(179915.0))
                .body("'data'.'countries'[9].'cities'[145].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[146].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[146].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[146].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[146].'geonamesID'", numberMatches(6319328.0))
                .body("'data'.'countries'[9].'cities'[146].'location'.'long'", numberMatches(-60.016667))
                .body("'data'.'countries'[9].'cities'[146].'population'", numberMatches(1802014.0))
                .body("'data'.'countries'[9].'cities'[146].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[147].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[147].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[147].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[147].'geonamesID'", numberMatches(3460598.0))
                .body("'data'.'countries'[9].'cities'[147].'location'.'long'", numberMatches(-46.838889))
                .body("'data'.'countries'[9].'cities'[147].'population'", numberMatches(113284.0))
                .body("'data'.'countries'[9].'cities'[147].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[148].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[148].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[148].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[148].'geonamesID'", numberMatches(6323695.0))
                .body("'data'.'countries'[9].'cities'[148].'location'.'long'", numberMatches(-57.087778))
                .body("'data'.'countries'[9].'cities'[148].'population'", numberMatches(126866.0))
                .body("'data'.'countries'[9].'cities'[148].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[149].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[149].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[149].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[149].'geonamesID'", numberMatches(6300604.0))
                .body("'data'.'countries'[9].'cities'[149].'location'.'long'", numberMatches(-43.773889))
                .body("'data'.'countries'[9].'cities'[149].'population'", numberMatches(126284.0))
                .body("'data'.'countries'[9].'cities'[149].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[150].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[150].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[150].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[150].'geonamesID'", numberMatches(3466954.0))
                .body("'data'.'countries'[9].'cities'[150].'location'.'long'", numberMatches(-40.42))
                .body("'data'.'countries'[9].'cities'[150].'population'", numberMatches(383917.0))
                .body("'data'.'countries'[9].'cities'[150].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[151].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[151].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[151].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[151].'geonamesID'", numberMatches(3471859.0))
                .body("'data'.'countries'[9].'cities'[151].'location'.'long'", numberMatches(-50.432778))
                .body("'data'.'countries'[9].'cities'[151].'population'", numberMatches(192757.0))
                .body("'data'.'countries'[9].'cities'[151].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[152].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[152].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[152].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[152].'geonamesID'", numberMatches(3449521.0))
                .body("'data'.'countries'[9].'cities'[152].'location'.'long'", numberMatches(-39.261081))
                .body("'data'.'countries'[9].'cities'[152].'population'", numberMatches(101548.0))
                .body("'data'.'countries'[9].'cities'[152].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[153].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[153].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[153].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[153].'geonamesID'", numberMatches(3403642.0))
                .body("'data'.'countries'[9].'cities'[153].'location'.'long'", numberMatches(-35.881111))
                .body("'data'.'countries'[9].'cities'[153].'population'", numberMatches(405072.0))
                .body("'data'.'countries'[9].'cities'[153].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[154].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[154].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[154].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[154].'geonamesID'", numberMatches(3397277.0))
                .body("'data'.'countries'[9].'cities'[154].'location'.'long'", numberMatches(-34.88))
                .body("'data'.'countries'[9].'cities'[154].'population'", numberMatches(817511.0))
                .body("'data'.'countries'[9].'cities'[154].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[155].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[155].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[155].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[155].'geonamesID'", numberMatches(3446370.0))
                .body("'data'.'countries'[9].'cities'[155].'location'.'long'", numberMatches(-53.742778))
                .body("'data'.'countries'[9].'cities'[155].'population'", numberMatches(142645.0))
                .body("'data'.'countries'[9].'cities'[155].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[156].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[156].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[156].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[156].'geonamesID'", numberMatches(3468031.0))
                .body("'data'.'countries'[9].'cities'[156].'location'.'long'", numberMatches(-38.323889))
                .body("'data'.'countries'[9].'cities'[156].'population'", numberMatches(286919.0))
                .body("'data'.'countries'[9].'cities'[156].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[157].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[157].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[157].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[157].'geonamesID'", numberMatches(3467736.0))
                .body("'data'.'countries'[9].'cities'[157].'location'.'long'", numberMatches(-49.527778))
                .body("'data'.'countries'[9].'cities'[157].'population'", numberMatches(112377.0))
                .body("'data'.'countries'[9].'cities'[157].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[158].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[158].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[158].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[158].'geonamesID'", numberMatches(3450594.0))
                .body("'data'.'countries'[9].'cities'[158].'location'.'long'", numberMatches(-47.286944))
                .body("'data'.'countries'[9].'cities'[158].'population'", numberMatches(114171.0))
                .body("'data'.'countries'[9].'cities'[158].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[159].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[159].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[159].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[159].'geonamesID'", numberMatches(6322239.0))
                .body("'data'.'countries'[9].'cities'[159].'location'.'long'", numberMatches(-46.368889))
                .body("'data'.'countries'[9].'cities'[159].'population'", numberMatches(184700.0))
                .body("'data'.'countries'[9].'cities'[159].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[160].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[160].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[160].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[160].'geonamesID'", numberMatches(6322514.0))
                .body("'data'.'countries'[9].'cities'[160].'location'.'long'", numberMatches(-46.412778))
                .body("'data'.'countries'[9].'cities'[160].'population'", numberMatches(120396.0))
                .body("'data'.'countries'[9].'cities'[160].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[161].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[161].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[161].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[161].'geonamesID'", numberMatches(3466696.0))
                .body("'data'.'countries'[9].'cities'[161].'location'.'long'", numberMatches(-47.941944))
                .body("'data'.'countries'[9].'cities'[161].'population'", numberMatches(110983.0))
                .body("'data'.'countries'[9].'cities'[161].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[162].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[162].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[162].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[162].'geonamesID'", numberMatches(3462315.0))
                .body("'data'.'countries'[9].'cities'[162].'location'.'long'", numberMatches(-41.948889))
                .body("'data'.'countries'[9].'cities'[162].'population'", numberMatches(278363.0))
                .body("'data'.'countries'[9].'cities'[162].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[163].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[163].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[163].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[163].'geonamesID'", numberMatches(3455478.0))
                .body("'data'.'countries'[9].'cities'[163].'location'.'long'", numberMatches(-48.667778))
                .body("'data'.'countries'[9].'cities'[163].'population'", numberMatches(137334.0))
                .body("'data'.'countries'[9].'cities'[163].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[164].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[164].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[164].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[164].'geonamesID'", numberMatches(3456117.0))
                .body("'data'.'countries'[9].'cities'[164].'location'.'long'", numberMatches(-44.983889))
                .body("'data'.'countries'[9].'cities'[164].'population'", numberMatches(105520.0))
                .body("'data'.'countries'[9].'cities'[164].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[165].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[165].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[165].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[165].'geonamesID'", numberMatches(3444866.0))
                .body("'data'.'countries'[9].'cities'[165].'location'.'long'", numberMatches(-47.437778))
                .body("'data'.'countries'[9].'cities'[165].'population'", numberMatches(117794.0))
                .body("'data'.'countries'[9].'cities'[165].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[166].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[166].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[166].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[166].'geonamesID'", numberMatches(6317464.0))
                .body("'data'.'countries'[9].'cities'[166].'location'.'long'", numberMatches(-38.326944))
                .body("'data'.'countries'[9].'cities'[166].'population'", numberMatches(191436.0))
                .body("'data'.'countries'[9].'cities'[166].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[167].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[167].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[167].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[167].'geonamesID'", numberMatches(3460733.0))
                .body("'data'.'countries'[9].'cities'[167].'location'.'long'", numberMatches(-41.887778))
                .body("'data'.'countries'[9].'cities'[167].'population'", numberMatches(95841.0))
                .body("'data'.'countries'[9].'cities'[167].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[168].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[168].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[168].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[168].'geonamesID'", numberMatches(3402429.0))
                .body("'data'.'countries'[9].'cities'[168].'location'.'long'", numberMatches(-38.655833))
                .body("'data'.'countries'[9].'cities'[168].'population'", numberMatches(325441.0))
                .body("'data'.'countries'[9].'cities'[168].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[169].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[169].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[169].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[169].'geonamesID'", numberMatches(3456068.0))
                .body("'data'.'countries'[9].'cities'[169].'location'.'long'", numberMatches(-51.130833))
                .body("'data'.'countries'[9].'cities'[169].'population'", numberMatches(238940.0))
                .body("'data'.'countries'[9].'cities'[169].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[170].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[170].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[170].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[170].'geonamesID'", numberMatches(3467081.0))
                .body("'data'.'countries'[9].'cities'[170].'location'.'long'", numberMatches(-45.412778))
                .body("'data'.'countries'[9].'cities'[170].'population'", numberMatches(113317.0))
                .body("'data'.'countries'[9].'cities'[170].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[171].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[171].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[171].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[171].'geonamesID'", numberMatches(3445578.0))
                .body("'data'.'countries'[9].'cities'[171].'location'.'long'", numberMatches(-46.995833))
                .body("'data'.'countries'[9].'cities'[171].'population'", numberMatches(120258.0))
                .body("'data'.'countries'[9].'cities'[171].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[172].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[172].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[172].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[172].'geonamesID'", numberMatches(3444876.0))
                .body("'data'.'countries'[9].'cities'[172].'location'.'long'", numberMatches(-44.10417))
                .body("'data'.'countries'[9].'cities'[172].'population'", numberMatches(262970.0))
                .body("'data'.'countries'[9].'cities'[172].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[173].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[173].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[173].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[173].'geonamesID'", numberMatches(6322737.0))
                .body("'data'.'countries'[9].'cities'[173].'location'.'long'", numberMatches(-49.223889))
                .body("'data'.'countries'[9].'cities'[173].'population'", numberMatches(246540.0))
                .body("'data'.'countries'[9].'cities'[173].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[174].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[174].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[174].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[174].'geonamesID'", numberMatches(3450554.0))
                .body("'data'.'countries'[9].'cities'[174].'location'.'long'", numberMatches(-38.510833))
                .body("'data'.'countries'[9].'cities'[174].'population'", numberMatches(2886698.0))
                .body("'data'.'countries'[9].'cities'[174].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[175].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[175].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[175].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[175].'geonamesID'", numberMatches(3390760.0))
                .body("'data'.'countries'[9].'cities'[175].'location'.'long'", numberMatches(-34.880833))
                .body("'data'.'countries'[9].'cities'[175].'population'", numberMatches(1653461.0))
                .body("'data'.'countries'[9].'cities'[175].'timeZoneDST'.'name'", containsString("UTC−02:00"))
                .body("'data'.'countries'[9].'cities'[175].'timeZoneDST'.'offset'", numberMatches(-2.0))
                .body("'data'.'countries'[9].'cities'[176].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[176].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[176].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[176].'geonamesID'", numberMatches(3405004.0))
                .body("'data'.'countries'[9].'cities'[176].'location'.'long'", numberMatches(-46.772778))
                .body("'data'.'countries'[9].'cities'[176].'population'", numberMatches(122881.0))
                .body("'data'.'countries'[9].'cities'[176].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[177].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[177].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[177].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[177].'geonamesID'", numberMatches(6321992.0))
                .body("'data'.'countries'[9].'cities'[177].'location'.'long'", numberMatches(-40.307778))
                .body("'data'.'countries'[9].'cities'[177].'population'", numberMatches(485376.0))
                .body("'data'.'countries'[9].'cities'[177].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[178].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[178].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[178].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[178].'geonamesID'", numberMatches(3457692.0))
                .body("'data'.'countries'[9].'cities'[178].'location'.'long'", numberMatches(-49.945833))
                .body("'data'.'countries'[9].'cities'[178].'population'", numberMatches(232006.0))
                .body("'data'.'countries'[9].'cities'[178].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[179].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[179].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[179].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[179].'geonamesID'", numberMatches(3387295.0))
                .body("'data'.'countries'[9].'cities'[179].'location'.'long'", numberMatches(-40.344167))
                .body("'data'.'countries'[9].'cities'[179].'population'", numberMatches(210711.0))
                .body("'data'.'countries'[9].'cities'[179].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[180].'continent'.'geonamesID'", numberMatches(6255150.0))
                .body("'data'.'countries'[9].'cities'[180].'continent'.'name'", containsString("South America"))
                .body("'data'.'countries'[9].'cities'[180].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[9].'cities'[180].'geonamesID'", numberMatches(6319201.0))
                .body("'data'.'countries'[9].'cities'[180].'location'.'long'", numberMatches(-43.428889))
                .body("'data'.'countries'[9].'cities'[180].'population'", numberMatches(168376.0))
                .body("'data'.'countries'[9].'cities'[180].'timeZoneDST'", nullValue())
                .body("'data'.'countries'[9].'cities'[181].'geonamesID'", numberMatches(3445859.0))
                .body("'data'.'countries'[9].'cities'[181].'population'", numberMatches(116797.0))
                .body("'data'.'countries'[9].'cities'[182].'geonamesID'", numberMatches(3446692.0))
                .body("'data'.'countries'[9].'cities'[182].'population'", numberMatches(116682.0))
                .body("'data'.'countries'[9].'cities'[183].'geonamesID'", numberMatches(6322244.0))
                .body("'data'.'countries'[9].'cities'[183].'population'", numberMatches(168243.0))
                .body("'data'.'countries'[9].'cities'[184].'geonamesID'", numberMatches(3457671.0))
                .body("'data'.'countries'[9].'cities'[184].'population'", numberMatches(430157.0))
                .body("'data'.'countries'[9].'cities'[185].'geonamesID'", numberMatches(6322316.0))
                .body("'data'.'countries'[9].'cities'[185].'population'", numberMatches(352801.0))
                .body("'data'.'countries'[9].'cities'[186].'geonamesID'", numberMatches(3385935.0))
                .body("'data'.'countries'[9].'cities'[186].'population'", numberMatches(115144.0))
                .body("'data'.'countries'[9].'cities'[187].'geonamesID'", numberMatches(3452925.0))
                .body("'data'.'countries'[9].'cities'[187].'population'", numberMatches(1484941.0))
                .body("'data'.'countries'[9].'cities'[188].'geonamesID'", numberMatches(6323173.0))
                .body("'data'.'countries'[9].'cities'[188].'population'", numberMatches(156727.0))
                .body("'data'.'countries'[9].'cities'[189].'geonamesID'", numberMatches(3399058.0))
                .body("'data'.'countries'[9].'cities'[189].'population'", numberMatches(136949.0))
                .body("'data'.'countries'[9].'cities'[190].'geonamesID'", numberMatches(6317123.0))
                .body("'data'.'countries'[9].'cities'[190].'population'", numberMatches(102004.0))
                .body("'data'.'countries'[9].'cities'[191].'geonamesID'", numberMatches(3447624.0))
                .body("'data'.'countries'[9].'cities'[191].'population'", numberMatches(241835.0))
                .body("'data'.'countries'[9].'cities'[192].'geonamesID'", numberMatches(3457000.0))
                .body("'data'.'countries'[9].'cities'[192].'population'", numberMatches(147233.0))
                .body("'data'.'countries'[9].'cities'[193].'geonamesID'", numberMatches(3451205.0))
                .body("'data'.'countries'[9].'cities'[193].'population'", numberMatches(155193.0))
                .body("'data'.'countries'[9].'cities'[194].'geonamesID'", numberMatches(3451328.0))
                .body("'data'.'countries'[9].'cities'[194].'population'", numberMatches(666323.0))
                .body("'data'.'countries'[9].'cities'[195].'geonamesID'", numberMatches(3449319.0))
                .body("'data'.'countries'[9].'cities'[195].'population'", numberMatches(241389.0))
                .body("'data'.'countries'[9].'cities'[196].'geonamesID'", numberMatches(3450817.0))
                .body("'data'.'countries'[9].'cities'[196].'population'", numberMatches(126269.0))
                .body("'data'.'countries'[9].'cities'[197].'geonamesID'", numberMatches(3464975.0))
                .body("'data'.'countries'[9].'cities'[197].'population'", numberMatches(1879355.0))
                .body("'data'.'countries'[9].'cities'[198].'geonamesID'", numberMatches(3470353.0))
                .body("'data'.'countries'[9].'cities'[198].'population'", numberMatches(262275.0))
                .body("'data'.'countries'[9].'cities'[199].'geonamesID'", numberMatches(3460899.0))
                .body("'data'.'countries'[9].'cities'[199].'population'", numberMatches(119143.0))
                .body("'data'.'countries'[9].'cities'[200].'geonamesID'", numberMatches(3458329.0))
                .body("'data'.'countries'[9].'cities'[200].'population'", numberMatches(174531.0))
                .body("'data'.'countries'[9].'cities'[201].'geonamesID'", numberMatches(6322185.0))
                .body("'data'.'countries'[9].'cities'[201].'population'", numberMatches(392294.0))
                .body("'data'.'countries'[9].'cities'[202].'geonamesID'", numberMatches(3460950.0))
                .body("'data'.'countries'[9].'cities'[202].'population'", numberMatches(242543.0))
                .body("'data'.'countries'[9].'cities'[203].'geonamesID'", numberMatches(3664980.0))
                .body("'data'.'countries'[9].'cities'[203].'population'", numberMatches(326419.0))
                .body("'data'.'countries'[9].'cities'[204].'geonamesID'", numberMatches(6318856.0))
                .body("'data'.'countries'[9].'cities'[204].'population'", numberMatches(132982.0))
                .body("'data'.'countries'[9].'cities'[205].'geonamesID'", numberMatches(3456223.0))
                .body("'data'.'countries'[9].'cities'[205].'population'", numberMatches(177344.0))
                .body("'data'.'countries'[9].'cities'[206].'geonamesID'", numberMatches(3446038.0))
                .body("'data'.'countries'[9].'cities'[206].'population'", numberMatches(104488.0))
                .body("'data'.'countries'[9].'cities'[207].'geonamesID'", numberMatches(3395503.0))
                .body("'data'.'countries'[9].'cities'[207].'population'", numberMatches(283542.0))
                .body("'data'.'countries'[9].'cities'[208].'geonamesID'", numberMatches(3401544.0))
                .body("'data'.'countries'[9].'cities'[208].'population'", numberMatches(121428.0))
                .body("'data'.'countries'[9].'cities'[209].'geonamesID'", numberMatches(3465342.0))
                .body("'data'.'countries'[9].'cities'[209].'population'", numberMatches(112058.0))
                .body("'data'.'countries'[9].'cities'[210].'geonamesID'", numberMatches(3466779.0))
                .body("'data'.'countries'[9].'cities'[210].'population'", numberMatches(286205.0))
                .body("'data'.'countries'[9].'cities'[211].'geonamesID'", numberMatches(6323790.0))
                .body("'data'.'countries'[9].'cities'[211].'population'", numberMatches(115561.0))
                .body("'data'.'countries'[9].'cities'[212].'geonamesID'", numberMatches(3470451.0))
                .body("'data'.'countries'[9].'cities'[212].'population'", numberMatches(119243.0))
                .body("'data'.'countries'[9].'cities'[213].'geonamesID'", numberMatches(3472287.0))
                .body("'data'.'countries'[9].'cities'[213].'population'", numberMatches(366491.0))
                .body("'data'.'countries'[9].'cities'[214].'geonamesID'", numberMatches(6323885.0))
                .body("'data'.'countries'[9].'cities'[214].'population'", numberMatches(271339.0))
                .body("'data'.'countries'[9].'cities'[215].'geonamesID'", numberMatches(3452073.0))
                .body("'data'.'countries'[9].'cities'[215].'population'", numberMatches(143632.0))
                .body("'data'.'countries'[9].'cities'[216].'geonamesID'", numberMatches(3468615.0))
                .body("'data'.'countries'[9].'cities'[216].'population'", numberMatches(186227.0))
                .body("'data'.'countries'[9].'cities'[217].'geonamesID'", numberMatches(3460748.0))
                .body("'data'.'countries'[9].'cities'[217].'population'", numberMatches(167236.0))
                .body("'data'.'countries'[9].'cities'[218].'geonamesID'", numberMatches(3471715.0))
                .body("'data'.'countries'[9].'cities'[218].'population'", numberMatches(134293.0))
                .body("'data'.'countries'[9].'cities'[219].'geonamesID'", numberMatches(3471196.0))
                .body("'data'.'countries'[9].'cities'[219].'population'", numberMatches(116794.0))
                .body("'data'.'countries'[9].'cities'[220].'geonamesID'", numberMatches(3458266.0))
                .body("'data'.'countries'[9].'cities'[220].'population'", numberMatches(234628.0))
                .body("'data'.'countries'[9].'cities'[221].'geonamesID'", numberMatches(3448877.0))
                .body("'data'.'countries'[9].'cities'[221].'population'", numberMatches(460541.0))
                .body("'data'.'countries'[9].'cities'[222].'geonamesID'", numberMatches(3459943.0))
                .body("'data'.'countries'[9].'cities'[222].'population'", numberMatches(161528.0))
                .body("'data'.'countries'[9].'cities'[223].'geonamesID'", numberMatches(3399415.0))
                .body("'data'.'countries'[9].'cities'[223].'population'", numberMatches(2452185.0))
                .body("'data'.'countries'[9].'cities'[224].'geonamesID'", numberMatches(3461144.0))
                .body("'data'.'countries'[9].'cities'[224].'population'", numberMatches(265409.0))
                .body("'data'.'countries'[9].'cities'[225].'geonamesID'", numberMatches(3472764.0))
                .body("'data'.'countries'[9].'cities'[225].'population'", numberMatches(154495.0))
                .body("'data'.'countries'[9].'cities'[226].'geonamesID'", numberMatches(3462377.0))
                .body("'data'.'countries'[9].'cities'[226].'population'", numberMatches(1393575.0))
                .body("'data'.'countries'[9].'cities'[227].'geonamesID'", numberMatches(3448130.0))
                .body("'data'.'countries'[9].'cities'[227].'population'", numberMatches(355542.0))
                .body("'data'.'countries'[9].'cities'[228].'geonamesID'", numberMatches(3925033.0))
                .body("'data'.'countries'[9].'cities'[228].'population'", numberMatches(131560.0))
                .body("'data'.'countries'[9].'cities'[229].'geonamesID'", numberMatches(3447186.0))
                .body("'data'.'countries'[9].'cities'[229].'population'", numberMatches(272177.0))
                .body("'data'.'countries'[9].'cities'[230].'geonamesID'", numberMatches(3466537.0))
                .body("'data'.'countries'[9].'cities'[230].'population'", numberMatches(517451.0))
                .body("'data'.'countries'[9].'cities'[231].'geonamesID'", numberMatches(3398352.0))
                .body("'data'.'countries'[9].'cities'[231].'population'", numberMatches(118370.0))
                .body("'data'.'countries'[9].'cities'[232].'geonamesID'", numberMatches(3460718.0))
                .body("'data'.'countries'[9].'cities'[232].'population'", numberMatches(223404.0))
                .body("'data'.'countries'[9].'cities'[233].'geonamesID'", numberMatches(3471697.0))
                .body("'data'.'countries'[9].'cities'[233].'population'", numberMatches(119123.0))
                .body("'data'.'countries'[9].'cities'[234].'geonamesID'", numberMatches(3461786.0))
                .body("'data'.'countries'[9].'cities'[234].'population'", numberMatches(1324781.0))
                .body("'data'.'countries'[9].'cities'[235].'geonamesID'", numberMatches(3467747.0))
                .body("'data'.'countries'[9].'cities'[235].'population'", numberMatches(906092.0))
                .body("'data'.'countries'[9].'cities'[236].'geonamesID'", numberMatches(3451190.0))
                .body("'data'.'countries'[9].'cities'[236].'population'", numberMatches(6747815.0))
                .body("'data'.'countries'[9].'cities'[237].'geonamesID'", numberMatches(3459337.0))
                .body("'data'.'countries'[9].'cities'[237].'population'", numberMatches(94861.0))
                .body("'data'.'countries'[9].'cities'[238].'geonamesID'", numberMatches(6317953.0))
                .body("'data'.'countries'[9].'cities'[238].'population'", numberMatches(117008.0))
                .body("'data'.'countries'[9].'cities'[239].'geonamesID'", numberMatches(3451234.0))
                .body("'data'.'countries'[9].'cities'[239].'population'", numberMatches(199961.0))
                .body("'data'.'countries'[9].'cities'[240].'geonamesID'", numberMatches(3460535.0))
                .body("'data'.'countries'[9].'cities'[240].'population'", numberMatches(167095.0))
                .body("'data'.'countries'[9].'cities'[241].'geonamesID'", numberMatches(3450404.0))
                .body("'data'.'countries'[9].'cities'[241].'population'", numberMatches(190139.0))
                .body("'data'.'countries'[9].'cities'[242].'geonamesID'", numberMatches(3469968.0))
                .body("'data'.'countries'[9].'cities'[242].'population'", numberMatches(361855.0))
                .body("'data'.'countries'[9].'cities'[243].'geonamesID'", numberMatches(3465624.0))
                .body("'data'.'countries'[9].'cities'[243].'population'", numberMatches(648766.0))
                .body("'data'.'countries'[9].'cities'[244].'geonamesID'", numberMatches(6318696.0))
                .body("'data'.'countries'[9].'cities'[244].'population'", numberMatches(132934.0))
                .body("'data'.'countries'[9].'cities'[245].'geonamesID'", numberMatches(3463478.0))
                .body("'data'.'countries'[9].'cities'[245].'population'", numberMatches(617528.0))
                .body("'data'.'countries'[9].'cities'[246].'geonamesID'", numberMatches(3463690.0))
                .body("'data'.'countries'[9].'cities'[246].'population'", numberMatches(113191.0))
                .body("'data'.'countries'[9].'cities'[247].'geonamesID'", numberMatches(3464374.0))
                .body("'data'.'countries'[9].'cities'[247].'population'", numberMatches(886917.0))
                .body("'data'.'countries'[9].'cities'[248].'geonamesID'", numberMatches(3445162.0))
                .body("'data'.'countries'[9].'cities'[248].'population'", numberMatches(104527.0))
                .body("'data'.'countries'[9].'cities'[249].'geonamesID'", numberMatches(3465196.0))
                .body("'data'.'countries'[9].'cities'[249].'population'", numberMatches(211369.0))
                .body("'data'.'countries'[9].'cities'[250].'geonamesID'", numberMatches(3444924.0))
                .body("'data'.'countries'[9].'cities'[250].'population'", numberMatches(355875.0))
                .body("'data'.'countries'[9].'cities'[251].'geonamesID'", numberMatches(3448744.0))
                .body("'data'.'countries'[9].'cities'[251].'population'", numberMatches(209804.0))
                .body("'data'.'countries'[9].'cities'[252].'geonamesID'", numberMatches(3470279.0))
                .body("'data'.'countries'[9].'cities'[252].'population'", numberMatches(366992.0))
                .body("'data'.'countries'[9].'cities'[253].'geonamesID'", numberMatches(3461859.0))
                .body("'data'.'countries'[9].'cities'[253].'population'", numberMatches(119073.0))
                .body("'data'.'countries'[9].'cities'[254].'geonamesID'", numberMatches(3472177.0))
                .body("'data'.'countries'[9].'cities'[254].'population'", numberMatches(188276.0))
                .body("'data'.'countries'[9].'cities'[255].'geonamesID'", numberMatches(6320527.0))
                .body("'data'.'countries'[9].'cities'[255].'population'", numberMatches(644620.0))
                .body("'data'.'countries'[9].'cities'[256].'geonamesID'", numberMatches(3393008.0))
                .body("'data'.'countries'[9].'cities'[256].'population'", numberMatches(111575.0))
                .body("'data'.'countries'[9].'cities'[257].'geonamesID'", numberMatches(3448636.0))
                .body("'data'.'countries'[9].'cities'[257].'population'", numberMatches(688597.0))
                .body("'data'.'countries'[9].'cities'[258].'geonamesID'", numberMatches(3452525.0))
                .body("'data'.'countries'[9].'cities'[258].'population'", numberMatches(130615.0))
                .body("'data'.'countries'[9].'cities'[259].'geonamesID'", numberMatches(3394682.0))
                .body("'data'.'countries'[9].'cities'[259].'population'", numberMatches(300618.0))
                .body("'data'.'countries'[9].'cities'[260].'geonamesID'", numberMatches(3454783.0))
                .body("'data'.'countries'[9].'cities'[260].'population'", numberMatches(150833.0))
                .body("'data'.'countries'[9].'cities'[261].'geonamesID'", numberMatches(3461408.0))
                .body("'data'.'countries'[9].'cities'[261].'population'", numberMatches(180213.0))
                .body("'data'.'countries'[9].'cities'[262].'geonamesID'", numberMatches(3471691.0))
                .body("'data'.'countries'[9].'cities'[262].'population'", numberMatches(103287.0))
                .body("'data'.'countries'[9].'cities'[263].'geonamesID'", numberMatches(6317548.0))
                .body("'data'.'countries'[9].'cities'[263].'population'", numberMatches(133685.0))
                .body("'data'.'countries'[9].'cities'[264].'geonamesID'", numberMatches(3458142.0))
                .body("'data'.'countries'[9].'cities'[264].'population'", numberMatches(246433.0))
                .body("'data'.'countries'[9].'cities'[265].'geonamesID'", numberMatches(6322552.0))
                .body("'data'.'countries'[9].'cities'[265].'population'", numberMatches(126574.0))
                .body("'data'.'countries'[9].'cities'[266].'geonamesID'", numberMatches(3470579.0))
                .body("'data'.'countries'[9].'cities'[266].'population'", numberMatches(153918.0))
                .body("'data'.'countries'[9].'cities'[267].'geonamesID'", numberMatches(3469136.0))
                .body("'data'.'countries'[9].'cities'[267].'population'", numberMatches(139483.0))
                .body("'data'.'countries'[9].'cities'[268].'geonamesID'", numberMatches(6322558.0))
                .body("'data'.'countries'[9].'cities'[268].'population'", numberMatches(710210.0))
                .body("'data'.'countries'[9].'cities'[269].'geonamesID'", numberMatches(3458449.0))
                .body("'data'.'countries'[9].'cities'[269].'population'", numberMatches(548249.0))
                .body("'data'.'countries'[9].'cities'[270].'geonamesID'", numberMatches(3471798.0))
                .body("'data'.'countries'[9].'cities'[270].'population'", numberMatches(124810.0))
                .body("'data'.'countries'[9].'cities'[271].'geonamesID'", numberMatches(3469058.0))
                .body("'data'.'countries'[9].'cities'[271].'population'", numberMatches(3015268.0))
                .body("'data'.'countries'[9].'cities'[272].'geonamesID'", numberMatches(3471848.0))
                .body("'data'.'countries'[9].'cities'[272].'population'", numberMatches(103101.0))
                .body("'data'.'countries'[9].'cities'[273].'geonamesID'", numberMatches(3444914.0))
                .body("'data'.'countries'[9].'cities'[273].'population'", numberMatches(343230.0))
                .body("'data'.'countries'[9].'cities'[274].'geonamesID'", numberMatches(3393536.0))
                .body("'data'.'countries'[9].'cities'[274].'population'", numberMatches(389494.0))
                .body("'data'.'countries'[9].'cities'[275].'geonamesID'", numberMatches(3392740.0))
                .body("'data'.'countries'[9].'cities'[275].'population'", numberMatches(300466.0))
                .body("'data'.'countries'[9].'cities'[276].'geonamesID'", numberMatches(3402000.0))
                .body("'data'.'countries'[9].'cities'[276].'population'", numberMatches(118038.0))
                .body("'data'.'countries'[9].'cities'[277].'geonamesID'", numberMatches(3389353.0))
                .body("'data'.'countries'[9].'cities'[277].'population'", numberMatches(292520.0))
                .body("'data'.'countries'[9].'cities'[278].'geonamesID'", numberMatches(3455775.0))
                .body("'data'.'countries'[9].'cities'[278].'population'", numberMatches(694844.0))
                .body("'data'.'countries'[9].'cities'[279].'geonamesID'", numberMatches(6317837.0))
                .body("'data'.'countries'[9].'cities'[279].'population'", numberMatches(105121.0))
                .body("'data'.'countries'[9].'cities'[280].'geonamesID'", numberMatches(6318977.0))
                .body("'data'.'countries'[9].'cities'[280].'population'", numberMatches(130957.0))
                .body("'data'.'countries'[9].'cities'[281].'geonamesID'", numberMatches(6320682.0))
                .body("'data'.'countries'[9].'cities'[281].'population'", numberMatches(632744.0))
                .body("'data'.'countries'[9].'cities'[282].'geonamesID'", numberMatches(3445831.0))
                .body("'data'.'countries'[9].'cities'[282].'population'", numberMatches(699097.0))
                .body("'data'.'countries'[9].'cities'[283].'geonamesID'", numberMatches(3467865.0))
                .body("'data'.'countries'[9].'cities'[283].'population'", numberMatches(1164098.0))
                .body("'data'.'countries'[9].'cities'[284].'geonamesID'", numberMatches(3471374.0))
                .body("'data'.'countries'[9].'cities'[284].'population'", numberMatches(101597.0))
                .body("'data'.'countries'[9].'cities'[285].'geonamesID'", numberMatches(3452465.0))
                .body("'data'.'countries'[9].'cities'[285].'population'", numberMatches(299261.0))
                .body("'data'.'countries'[9].'cities'[286].'geonamesID'", numberMatches(3462089.0))
                .body("'data'.'countries'[9].'cities'[286].'population'", numberMatches(255660.0))
                .body("'data'.'countries'[9].'cities'[287].'geonamesID'", numberMatches(6320490.0))
                .body("'data'.'countries'[9].'cities'[287].'population'", numberMatches(347088.0))
                .body("'data'.'countries'[9].'cities'[288].'geonamesID'", numberMatches(6324073.0))
                .body("'data'.'countries'[9].'cities'[288].'population'", numberMatches(176424.0))
                .body("'data'.'countries'[9].'cities'[289].'geonamesID'", numberMatches(3461789.0))
                .body("'data'.'countries'[9].'cities'[289].'population'", numberMatches(311230.0))
                .body("'data'.'countries'[9].'cities'[290].'geonamesID'", numberMatches(3454244.0))
                .body("'data'.'countries'[9].'cities'[290].'population'", numberMatches(328275.0))
                .body("'data'.'countries'[9].'cities'[291].'geonamesID'", numberMatches(3461655.0))
                .body("'data'.'countries'[9].'cities'[291].'population'", numberMatches(215819.0))
                .body("'data'.'countries'[9].'cities'[292].'geonamesID'", numberMatches(3470127.0))
                .body("'data'.'countries'[9].'cities'[292].'population'", numberMatches(2513451.0))
                .body("'data'.'countries'[9].'cities'[293].'geonamesID'", numberMatches(3453837.0))
                .body("'data'.'countries'[9].'cities'[293].'population'", numberMatches(160614.0))
                .body("'data'.'countries'[9].'cities'[294].'geonamesID'", numberMatches(3392242.0))
                .body("'data'.'countries'[9].'cities'[294].'population'", numberMatches(337683.0))
                .body("'data'.'countries'[9].'cities'[295].'geonamesID'", numberMatches(3466296.0))
                .body("'data'.'countries'[9].'cities'[295].'population'", numberMatches(224013.0))
                .body("'data'.'countries'[9].'cities'[296].'geonamesID'", numberMatches(6322476.0))
                .body("'data'.'countries'[9].'cities'[296].'population'", numberMatches(113793.0))
                .body("'data'.'countries'[9].'cities'[297].'geonamesID'", numberMatches(3388368.0))
                .body("'data'.'countries'[9].'cities'[297].'population'", numberMatches(1073893.0))
                .body("'data'.'countries'[9].'cities'[298].'geonamesID'", numberMatches(3450909.0))
                .body("'data'.'countries'[9].'cities'[298].'population'", numberMatches(228857.0))
                .body("'data'.'countries'[9].'cities'[299].'geonamesID'", numberMatches(3402582.0))
                .body("'data'.'countries'[9].'cities'[299].'population'", numberMatches(192571.0))
                .body("'data'.'countries'[9].'cities'[300].'geonamesID'", numberMatches(6322245.0))
                .body("'data'.'countries'[9].'cities'[300].'population'", numberMatches(145755.0))
                .body("'data'.'countries'[9].'cities'[301].'geonamesID'", numberMatches(3469092.0))
                .body("'data'.'countries'[9].'cities'[301].'population'", numberMatches(160665.0))
                .body("'data'.'countries'[9].'cities'[302].'geonamesID'", numberMatches(3449072.0))
                .body("'data'.'countries'[9].'cities'[302].'population'", numberMatches(1077687.0))
                .body("'data'.'countries'[9].'cities'[303].'geonamesID'", numberMatches(3468879.0))
                .body("'data'.'countries'[9].'cities'[303].'population'", numberMatches(131703.0))
                .body("'data'.'countries'[9].'cities'[304].'geonamesID'", numberMatches(3460370.0))
                .body("'data'.'countries'[9].'cities'[304].'population'", numberMatches(226539.0))
                .body("'data'.'countries'[9].'cities'[305].'geonamesID'", numberMatches(3446682.0))
                .body("'data'.'countries'[9].'cities'[305].'population'", numberMatches(302331.0))
                .body("'data'.'countries'[9].'cities'[306].'geonamesID'", numberMatches(6316406.0))
                .body("'data'.'countries'[9].'cities'[306].'population'", numberMatches(590146.0))
                .body("'data'.'countries'[9].'cities'[307].'geonamesID'", numberMatches(3452324.0))
                .body("'data'.'countries'[9].'cities'[307].'population'", numberMatches(222192.0))
                .body("'data'.'countries'[9].'cities'[308].'geonamesID'", numberMatches(3463011.0))
                .body("'data'.'countries'[9].'cities'[308].'population'", numberMatches(342112.0))
                .body("'data'.'countries'[9].'cities'[309].'geonamesID'", numberMatches(3397154.0))
                .body("'data'.'countries'[9].'cities'[309].'population'", numberMatches(220253.0))
                .body("'data'.'countries'[9].'cities'[310].'geonamesID'", numberMatches(3474574.0))
                .body("'data'.'countries'[9].'cities'[310].'population'", numberMatches(272726.0))
                .body("'data'.'countries'[9].'cities'[311].'geonamesID'", numberMatches(3469989.0))
                .body("'data'.'countries'[9].'cities'[311].'population'", numberMatches(118352.0))
                .body("'data'.'countries'[9].'cities'[312].'geonamesID'", numberMatches(3662574.0))
                .body("'data'.'countries'[9].'cities'[312].'population'", numberMatches(413418.0))
                .body("'data'.'countries'[9].'geonamesID'", numberMatches(3469034.0))
                .body("'data'.'countries'[9].'name'", containsString("Brazil"))
                .body("'data'.'countries'[10].'alpha2Code'", containsString("BN"))
                .body("'data'.'countries'[10].'geonamesID'", numberMatches(1820814.0))
                .body("'data'.'countries'[10].'name'", containsString("Brunei"))
                .body("'data'.'countries'[11].'alpha2Code'", containsString("BG"))
                .body("'data'.'countries'[11].'geonamesID'", numberMatches(732800.0))
                .body("'data'.'countries'[11].'name'", containsString("Bulgaria"))
                .body("'data'.'countries'[12].'alpha2Code'", containsString("BF"))
                .body("'data'.'countries'[12].'geonamesID'", numberMatches(2361809.0))
                .body("'data'.'countries'[12].'name'", containsString("Burkina Faso"))
                .body("'data'.'countries'[13].'alpha2Code'", containsString("BI"))
                .body("'data'.'countries'[13].'geonamesID'", numberMatches(433561.0))
                .body("'data'.'countries'[13].'name'", containsString("Burundi"))
                .body("'data'.'countries'[14].'alpha2Code'", containsString("KH"))
                .body("'data'.'countries'[14].'geonamesID'", numberMatches(1831722.0))
                .body("'data'.'countries'[14].'name'", containsString("Cambodia"))
                .body("'data'.'countries'[15].'alpha2Code'", containsString("CM"))
                .body("'data'.'countries'[15].'geonamesID'", numberMatches(2233387.0))
                .body("'data'.'countries'[15].'name'", containsString("Cameroon"))
                .body("'data'.'countries'[16].'alpha2Code'", containsString("CA"))
                .body("'data'.'countries'[16].'geonamesID'", numberMatches(6251999.0))
                .body("'data'.'countries'[16].'name'", containsString("Canada"))
                .body("'data'.'countries'[17].'alpha2Code'", containsString("CV"))
                .body("'data'.'countries'[17].'geonamesID'", numberMatches(3374766.0))
                .body("'data'.'countries'[17].'name'", containsString("Cape Verde"))
                .body("'data'.'countries'[18].'alpha2Code'", containsString("CF"))
                .body("'data'.'countries'[18].'geonamesID'", numberMatches(239880.0))
                .body("'data'.'countries'[18].'name'", containsString("Central African Republic"))
                .body("'data'.'countries'[19].'alpha2Code'", containsString("TD"))
                .body("'data'.'countries'[19].'geonamesID'", numberMatches(2434508.0))
                .body("'data'.'countries'[19].'name'", containsString("Chad"))
                .body("'data'.'countries'[20].'alpha2Code'", containsString("CL"))
                .body("'data'.'countries'[20].'geonamesID'", numberMatches(3895114.0))
                .body("'data'.'countries'[20].'name'", containsString("Chile"))
                .body("'data'.'countries'[21].'alpha2Code'", containsString("CO"))
                .body("'data'.'countries'[21].'geonamesID'", numberMatches(3686110.0))
                .body("'data'.'countries'[21].'name'", containsString("Colombia"))
                .body("'data'.'countries'[22].'alpha2Code'", containsString("KM"))
                .body("'data'.'countries'[22].'geonamesID'", numberMatches(921929.0))
                .body("'data'.'countries'[22].'name'", containsString("Comoros"))
                .body("'data'.'countries'[23].'alpha2Code'", containsString("CR"))
                .body("'data'.'countries'[23].'geonamesID'", numberMatches(3624060.0))
                .body("'data'.'countries'[23].'name'", containsString("Costa Rica"))
                .body("'data'.'countries'[24].'alpha2Code'", containsString("HR"))
                .body("'data'.'countries'[24].'geonamesID'", numberMatches(3202326.0))
                .body("'data'.'countries'[24].'name'", containsString("Croatia"))
                .body("'data'.'countries'[25].'alpha2Code'", containsString("CU"))
                .body("'data'.'countries'[25].'geonamesID'", numberMatches(3562981.0))
                .body("'data'.'countries'[25].'name'", containsString("Cuba"))
                .body("'data'.'countries'[26].'alpha2Code'", containsString("CY"))
                .body("'data'.'countries'[26].'geonamesID'", numberMatches(146669.0))
                .body("'data'.'countries'[26].'name'", containsString("Cyprus"))
                .body("'data'.'countries'[27].'alpha2Code'", containsString("CZ"))
                .body("'data'.'countries'[27].'geonamesID'", numberMatches(3077311.0))
                .body("'data'.'countries'[27].'name'", containsString("Czech Republic"))
                .body("'data'.'countries'[28].'alpha2Code'", containsString("CD"))
                .body("'data'.'countries'[28].'geonamesID'", numberMatches(203312.0))
                .body("'data'.'countries'[28].'name'", containsString("Democratic Republic of the Congo"))
                .body("'data'.'countries'[29].'alpha2Code'", containsString("DK"))
                .body("'data'.'countries'[29].'geonamesID'", numberMatches(2623032.0))
                .body("'data'.'countries'[29].'name'", containsString("Denmark"))
                .body("'data'.'countries'[30].'alpha2Code'", containsString("DJ"))
                .body("'data'.'countries'[30].'geonamesID'", numberMatches(223816.0))
                .body("'data'.'countries'[30].'name'", containsString("Djibouti"))
                .body("'data'.'countries'[31].'alpha2Code'", containsString("DM"))
                .body("'data'.'countries'[31].'geonamesID'", numberMatches(3575830.0))
                .body("'data'.'countries'[31].'name'", containsString("Dominica"))
                .body("'data'.'countries'[32].'alpha2Code'", containsString("DO"))
                .body("'data'.'countries'[32].'geonamesID'", numberMatches(3508796.0))
                .body("'data'.'countries'[32].'name'", containsString("Dominican Republic"))
                .body("'data'.'countries'[33].'alpha2Code'", containsString("TL"))
                .body("'data'.'countries'[33].'geonamesID'", numberMatches(1966436.0))
                .body("'data'.'countries'[33].'name'", containsString("East Timor"))
                .body("'data'.'countries'[34].'alpha2Code'", containsString("EC"))
                .body("'data'.'countries'[34].'geonamesID'", numberMatches(3658394.0))
                .body("'data'.'countries'[34].'name'", containsString("Ecuador"))
                .body("'data'.'countries'[35].'alpha2Code'", containsString("EG"))
                .body("'data'.'countries'[35].'geonamesID'", numberMatches(357994.0))
                .body("'data'.'countries'[35].'name'", containsString("Egypt"))
                .body("'data'.'countries'[36].'alpha2Code'", containsString("SV"))
                .body("'data'.'countries'[36].'geonamesID'", numberMatches(3585968.0))
                .body("'data'.'countries'[36].'name'", containsString("El Salvador"))
                .body("'data'.'countries'[37].'alpha2Code'", containsString("GQ"))
                .body("'data'.'countries'[37].'geonamesID'", numberMatches(2309096.0))
                .body("'data'.'countries'[37].'name'", containsString("Equatorial Guinea"))
                .body("'data'.'countries'[38].'alpha2Code'", containsString("ER"))
                .body("'data'.'countries'[38].'geonamesID'", numberMatches(338010.0))
                .body("'data'.'countries'[38].'name'", containsString("Eritrea"))
                .body("'data'.'countries'[39].'alpha2Code'", containsString("EE"))
                .body("'data'.'countries'[39].'geonamesID'", numberMatches(453733.0))
                .body("'data'.'countries'[39].'name'", containsString("Estonia"))
                .body("'data'.'countries'[40].'alpha2Code'", containsString("SZ"))
                .body("'data'.'countries'[40].'geonamesID'", numberMatches(934841.0))
                .body("'data'.'countries'[40].'name'", containsString("Eswatini"))
                .body("'data'.'countries'[41].'alpha2Code'", containsString("ET"))
                .body("'data'.'countries'[41].'geonamesID'", numberMatches(337996.0))
                .body("'data'.'countries'[41].'name'", containsString("Ethiopia"))
                .body("'data'.'countries'[42].'alpha2Code'", containsString("FM"))
                .body("'data'.'countries'[42].'geonamesID'", numberMatches(2081918.0))
                .body("'data'.'countries'[42].'name'", containsString("Federated States of Micronesia"))
                .body("'data'.'countries'[43].'alpha2Code'", containsString("FJ"))
                .body("'data'.'countries'[43].'geonamesID'", numberMatches(2205218.0))
                .body("'data'.'countries'[43].'name'", containsString("Fiji"))
                .body("'data'.'countries'[44].'alpha2Code'", containsString("FI"))
                .body("'data'.'countries'[44].'geonamesID'", numberMatches(660013.0))
                .body("'data'.'countries'[44].'name'", containsString("Finland"))
                .body("'data'.'countries'[45].'alpha2Code'", containsString("FR"))
                .body("'data'.'countries'[45].'geonamesID'", numberMatches(3017382.0))
                .body("'data'.'countries'[45].'name'", containsString("France"))
                .body("'data'.'countries'[46].'alpha2Code'", containsString("GA"))
                .body("'data'.'countries'[46].'geonamesID'", numberMatches(2400553.0))
                .body("'data'.'countries'[46].'name'", containsString("Gabon"))
                .body("'data'.'countries'[47].'alpha2Code'", containsString("GE"))
                .body("'data'.'countries'[47].'geonamesID'", numberMatches(614540.0))
                .body("'data'.'countries'[47].'name'", containsString("Georgia"))
                .body("'data'.'countries'[48].'alpha2Code'", containsString("DE"))
                .body("'data'.'countries'[48].'geonamesID'", numberMatches(2921044.0))
                .body("'data'.'countries'[48].'name'", containsString("Germany"))
                .body("'data'.'countries'[49].'alpha2Code'", containsString("GH"))
                .body("'data'.'countries'[49].'geonamesID'", numberMatches(2300660.0))
                .body("'data'.'countries'[49].'name'", containsString("Ghana"))
                .body("'data'.'countries'[50].'alpha2Code'", containsString("GR"))
                .body("'data'.'countries'[50].'geonamesID'", numberMatches(390903.0))
                .body("'data'.'countries'[50].'name'", containsString("Greece"))
                .body("'data'.'countries'[51].'alpha2Code'", containsString("GD"))
                .body("'data'.'countries'[51].'geonamesID'", numberMatches(3580239.0))
                .body("'data'.'countries'[51].'name'", containsString("Grenada"))
                .body("'data'.'countries'[52].'alpha2Code'", containsString("GT"))
                .body("'data'.'countries'[52].'geonamesID'", numberMatches(3595528.0))
                .body("'data'.'countries'[52].'name'", containsString("Guatemala"))
                .body("'data'.'countries'[53].'alpha2Code'", containsString("GN"))
                .body("'data'.'countries'[53].'geonamesID'", numberMatches(2420477.0))
                .body("'data'.'countries'[53].'name'", containsString("Guinea"))
                .body("'data'.'countries'[54].'alpha2Code'", containsString("GW"))
                .body("'data'.'countries'[54].'geonamesID'", numberMatches(2372248.0))
                .body("'data'.'countries'[54].'name'", containsString("Guinea-Bissau"))
                .body("'data'.'countries'[55].'alpha2Code'", containsString("GY"))
                .body("'data'.'countries'[55].'geonamesID'", numberMatches(3378535.0))
                .body("'data'.'countries'[55].'name'", containsString("Guyana"))
                .body("'data'.'countries'[56].'alpha2Code'", containsString("HT"))
                .body("'data'.'countries'[56].'geonamesID'", numberMatches(3723988.0))
                .body("'data'.'countries'[56].'name'", containsString("Haiti"))
                .body("'data'.'countries'[57].'alpha2Code'", containsString("HN"))
                .body("'data'.'countries'[57].'geonamesID'", numberMatches(3608932.0))
                .body("'data'.'countries'[57].'name'", containsString("Honduras"))
                .body("'data'.'countries'[58].'alpha2Code'", containsString("HU"))
                .body("'data'.'countries'[58].'geonamesID'", numberMatches(719819.0))
                .body("'data'.'countries'[58].'name'", containsString("Hungary"))
                .body("'data'.'countries'[59].'alpha2Code'", containsString("IS"))
                .body("'data'.'countries'[59].'geonamesID'", numberMatches(2629691.0))
                .body("'data'.'countries'[59].'name'", containsString("Iceland"))
                .body("'data'.'countries'[60].'alpha2Code'", containsString("IN"))
                .body("'data'.'countries'[60].'geonamesID'", numberMatches(1269750.0))
                .body("'data'.'countries'[60].'name'", containsString("India"))
                .body("'data'.'countries'[61].'alpha2Code'", containsString("ID"))
                .body("'data'.'countries'[61].'geonamesID'", numberMatches(1643084.0))
                .body("'data'.'countries'[61].'name'", containsString("Indonesia"))
                .body("'data'.'countries'[62].'alpha2Code'", containsString("IR"))
                .body("'data'.'countries'[62].'geonamesID'", numberMatches(130758.0))
                .body("'data'.'countries'[62].'name'", containsString("Iran"))
                .body("'data'.'countries'[63].'alpha2Code'", containsString("IQ"))
                .body("'data'.'countries'[63].'geonamesID'", numberMatches(99237.0))
                .body("'data'.'countries'[63].'name'", containsString("Iraq"))
                .body("'data'.'countries'[64].'alpha2Code'", containsString("IE"))
                .body("'data'.'countries'[64].'geonamesID'", numberMatches(2963597.0))
                .body("'data'.'countries'[64].'name'", containsString("Ireland"))
                .body("'data'.'countries'[65].'alpha2Code'", containsString("IL"))
                .body("'data'.'countries'[65].'geonamesID'", numberMatches(294640.0))
                .body("'data'.'countries'[65].'name'", containsString("Israel"))
                .body("'data'.'countries'[66].'alpha2Code'", containsString("IT"))
                .body("'data'.'countries'[66].'geonamesID'", numberMatches(3175395.0))
                .body("'data'.'countries'[66].'name'", containsString("Italy"))
                .body("'data'.'countries'[67].'alpha2Code'", containsString("CI"))
                .body("'data'.'countries'[67].'geonamesID'", numberMatches(2287781.0))
                .body("'data'.'countries'[67].'name'", containsString("Ivory Coast"))
                .body("'data'.'countries'[68].'alpha2Code'", containsString("JM"))
                .body("'data'.'countries'[68].'geonamesID'", numberMatches(3489940.0))
                .body("'data'.'countries'[68].'name'", containsString("Jamaica"))
                .body("'data'.'countries'[69].'alpha2Code'", containsString("JP"))
                .body("'data'.'countries'[69].'geonamesID'", numberMatches(1861060.0))
                .body("'data'.'countries'[69].'name'", containsString("Japan"))
                .body("'data'.'countries'[70].'alpha2Code'", containsString("JO"))
                .body("'data'.'countries'[70].'geonamesID'", numberMatches(248816.0))
                .body("'data'.'countries'[70].'name'", containsString("Jordan"))
                .body("'data'.'countries'[71].'alpha2Code'", containsString("KZ"))
                .body("'data'.'countries'[71].'geonamesID'", numberMatches(1522867.0))
                .body("'data'.'countries'[71].'name'", containsString("Kazakhstan"))
                .body("'data'.'countries'[72].'alpha2Code'", containsString("KE"))
                .body("'data'.'countries'[72].'geonamesID'", numberMatches(192950.0))
                .body("'data'.'countries'[72].'name'", containsString("Kenya"))
                .body("'data'.'countries'[73].'alpha2Code'", containsString("NL"))
                .body("'data'.'countries'[73].'geonamesID'", numberMatches(2750405.0))
                .body("'data'.'countries'[73].'name'", containsString("Kingdom of the Netherlands"))
                .body("'data'.'countries'[74].'alpha2Code'", containsString("KI"))
                .body("'data'.'countries'[74].'geonamesID'", numberMatches(4030945.0))
                .body("'data'.'countries'[74].'name'", containsString("Kiribati"))
                .body("'data'.'countries'[75].'alpha2Code'", containsString("KW"))
                .body("'data'.'countries'[75].'geonamesID'", numberMatches(285570.0))
                .body("'data'.'countries'[75].'name'", containsString("Kuwait"))
                .body("'data'.'countries'[76].'alpha2Code'", containsString("KG"))
                .body("'data'.'countries'[76].'geonamesID'", numberMatches(1527747.0))
                .body("'data'.'countries'[76].'name'", containsString("Kyrgyzstan"))
                .body("'data'.'countries'[77].'alpha2Code'", containsString("LA"))
                .body("'data'.'countries'[77].'geonamesID'", numberMatches(1655842.0))
                .body("'data'.'countries'[77].'name'", containsString("Laos"))
                .body("'data'.'countries'[78].'alpha2Code'", containsString("LV"))
                .body("'data'.'countries'[78].'geonamesID'", numberMatches(458258.0))
                .body("'data'.'countries'[78].'name'", containsString("Latvia"))
                .body("'data'.'countries'[79].'alpha2Code'", containsString("LB"))
                .body("'data'.'countries'[79].'geonamesID'", numberMatches(272103.0))
                .body("'data'.'countries'[79].'name'", containsString("Lebanon"))
                .body("'data'.'countries'[80].'alpha2Code'", containsString("LS"))
                .body("'data'.'countries'[80].'geonamesID'", numberMatches(932692.0))
                .body("'data'.'countries'[80].'name'", containsString("Lesotho"))
                .body("'data'.'countries'[81].'alpha2Code'", containsString("LR"))
                .body("'data'.'countries'[81].'geonamesID'", numberMatches(2275384.0))
                .body("'data'.'countries'[81].'name'", containsString("Liberia"))
                .body("'data'.'countries'[82].'alpha2Code'", containsString("LY"))
                .body("'data'.'countries'[82].'geonamesID'", numberMatches(2215636.0))
                .body("'data'.'countries'[82].'name'", containsString("Libya"))
                .body("'data'.'countries'[83].'alpha2Code'", containsString("LI"))
                .body("'data'.'countries'[83].'geonamesID'", numberMatches(3042058.0))
                .body("'data'.'countries'[83].'name'", containsString("Liechtenstein"))
                .body("'data'.'countries'[84].'alpha2Code'", containsString("LT"))
                .body("'data'.'countries'[84].'geonamesID'", numberMatches(597427.0))
                .body("'data'.'countries'[84].'name'", containsString("Lithuania"))
                .body("'data'.'countries'[85].'alpha2Code'", containsString("LU"))
                .body("'data'.'countries'[85].'geonamesID'", numberMatches(2960313.0))
                .body("'data'.'countries'[85].'name'", containsString("Luxembourg"))
                .body("'data'.'countries'[86].'alpha2Code'", containsString("MG"))
                .body("'data'.'countries'[86].'geonamesID'", numberMatches(1062947.0))
                .body("'data'.'countries'[86].'name'", containsString("Madagascar"))
                .body("'data'.'countries'[87].'alpha2Code'", containsString("MW"))
                .body("'data'.'countries'[87].'geonamesID'", numberMatches(927384.0))
                .body("'data'.'countries'[87].'name'", containsString("Malawi"))
                .body("'data'.'countries'[88].'alpha2Code'", containsString("MY"))
                .body("'data'.'countries'[88].'geonamesID'", numberMatches(1733045.0))
                .body("'data'.'countries'[88].'name'", containsString("Malaysia"))
                .body("'data'.'countries'[89].'alpha2Code'", containsString("MV"))
                .body("'data'.'countries'[89].'geonamesID'", numberMatches(1282028.0))
                .body("'data'.'countries'[89].'name'", containsString("Maldives"))
                .body("'errors'.size()", equalTo(718))
                .body("'errors'[0].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[0].'path'.size()", equalTo(5))
                .body("'errors'[0].'path'[0]", containsString("countries"))
                .body("'errors'[0].'path'[1]", numberMatches(9.0))
                .body("'errors'[0].'path'[2]", containsString("cities"))
                .body("'errors'[0].'path'[3]", numberMatches(181.0))
                .body("'errors'[0].'path'[4]", containsString("continent"))
                .body("'errors'[1].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[1].'path'.size()", equalTo(5))
                .body("'errors'[1].'path'[0]", containsString("countries"))
                .body("'errors'[1].'path'[1]", numberMatches(9.0))
                .body("'errors'[1].'path'[2]", containsString("cities"))
                .body("'errors'[1].'path'[3]", numberMatches(181.0))
                .body("'errors'[1].'path'[4]", containsString("location"))
                .body("'errors'[2].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[2].'path'.size()", equalTo(5))
                .body("'errors'[2].'path'[0]", containsString("countries"))
                .body("'errors'[2].'path'[1]", numberMatches(9.0))
                .body("'errors'[2].'path'[2]", containsString("cities"))
                .body("'errors'[2].'path'[3]", numberMatches(181.0))
                .body("'errors'[2].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[3].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[3].'path'.size()", equalTo(5))
                .body("'errors'[3].'path'[0]", containsString("countries"))
                .body("'errors'[3].'path'[1]", numberMatches(9.0))
                .body("'errors'[3].'path'[2]", containsString("cities"))
                .body("'errors'[3].'path'[3]", numberMatches(182.0))
                .body("'errors'[3].'path'[4]", containsString("continent"))
                .body("'errors'[4].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[4].'path'.size()", equalTo(5))
                .body("'errors'[4].'path'[0]", containsString("countries"))
                .body("'errors'[4].'path'[1]", numberMatches(9.0))
                .body("'errors'[4].'path'[2]", containsString("cities"))
                .body("'errors'[4].'path'[3]", numberMatches(182.0))
                .body("'errors'[4].'path'[4]", containsString("location"))
                .body("'errors'[5].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[5].'path'.size()", equalTo(5))
                .body("'errors'[5].'path'[0]", containsString("countries"))
                .body("'errors'[5].'path'[1]", numberMatches(9.0))
                .body("'errors'[5].'path'[2]", containsString("cities"))
                .body("'errors'[5].'path'[3]", numberMatches(182.0))
                .body("'errors'[5].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[6].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[6].'path'.size()", equalTo(5))
                .body("'errors'[6].'path'[0]", containsString("countries"))
                .body("'errors'[6].'path'[1]", numberMatches(9.0))
                .body("'errors'[6].'path'[2]", containsString("cities"))
                .body("'errors'[6].'path'[3]", numberMatches(183.0))
                .body("'errors'[6].'path'[4]", containsString("continent"))
                .body("'errors'[7].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[7].'path'.size()", equalTo(5))
                .body("'errors'[7].'path'[0]", containsString("countries"))
                .body("'errors'[7].'path'[1]", numberMatches(9.0))
                .body("'errors'[7].'path'[2]", containsString("cities"))
                .body("'errors'[7].'path'[3]", numberMatches(183.0))
                .body("'errors'[7].'path'[4]", containsString("location"))
                .body("'errors'[8].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[8].'path'.size()", equalTo(5))
                .body("'errors'[8].'path'[0]", containsString("countries"))
                .body("'errors'[8].'path'[1]", numberMatches(9.0))
                .body("'errors'[8].'path'[2]", containsString("cities"))
                .body("'errors'[8].'path'[3]", numberMatches(183.0))
                .body("'errors'[8].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[9].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[9].'path'.size()", equalTo(5))
                .body("'errors'[9].'path'[0]", containsString("countries"))
                .body("'errors'[9].'path'[1]", numberMatches(9.0))
                .body("'errors'[9].'path'[2]", containsString("cities"))
                .body("'errors'[9].'path'[3]", numberMatches(184.0))
                .body("'errors'[9].'path'[4]", containsString("continent"))
                .body("'errors'[10].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[10].'path'.size()", equalTo(5))
                .body("'errors'[10].'path'[0]", containsString("countries"))
                .body("'errors'[10].'path'[1]", numberMatches(9.0))
                .body("'errors'[10].'path'[2]", containsString("cities"))
                .body("'errors'[10].'path'[3]", numberMatches(184.0))
                .body("'errors'[10].'path'[4]", containsString("location"))
                .body("'errors'[11].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[11].'path'.size()", equalTo(5))
                .body("'errors'[11].'path'[0]", containsString("countries"))
                .body("'errors'[11].'path'[1]", numberMatches(9.0))
                .body("'errors'[11].'path'[2]", containsString("cities"))
                .body("'errors'[11].'path'[3]", numberMatches(184.0))
                .body("'errors'[11].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[12].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[12].'path'.size()", equalTo(5))
                .body("'errors'[12].'path'[0]", containsString("countries"))
                .body("'errors'[12].'path'[1]", numberMatches(9.0))
                .body("'errors'[12].'path'[2]", containsString("cities"))
                .body("'errors'[12].'path'[3]", numberMatches(185.0))
                .body("'errors'[12].'path'[4]", containsString("continent"))
                .body("'errors'[13].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[13].'path'.size()", equalTo(5))
                .body("'errors'[13].'path'[0]", containsString("countries"))
                .body("'errors'[13].'path'[1]", numberMatches(9.0))
                .body("'errors'[13].'path'[2]", containsString("cities"))
                .body("'errors'[13].'path'[3]", numberMatches(185.0))
                .body("'errors'[13].'path'[4]", containsString("location"))
                .body("'errors'[14].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[14].'path'.size()", equalTo(5))
                .body("'errors'[14].'path'[0]", containsString("countries"))
                .body("'errors'[14].'path'[1]", numberMatches(9.0))
                .body("'errors'[14].'path'[2]", containsString("cities"))
                .body("'errors'[14].'path'[3]", numberMatches(185.0))
                .body("'errors'[14].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[15].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[15].'path'.size()", equalTo(5))
                .body("'errors'[15].'path'[0]", containsString("countries"))
                .body("'errors'[15].'path'[1]", numberMatches(9.0))
                .body("'errors'[15].'path'[2]", containsString("cities"))
                .body("'errors'[15].'path'[3]", numberMatches(186.0))
                .body("'errors'[15].'path'[4]", containsString("continent"))
                .body("'errors'[16].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[16].'path'.size()", equalTo(5))
                .body("'errors'[16].'path'[0]", containsString("countries"))
                .body("'errors'[16].'path'[1]", numberMatches(9.0))
                .body("'errors'[16].'path'[2]", containsString("cities"))
                .body("'errors'[16].'path'[3]", numberMatches(186.0))
                .body("'errors'[16].'path'[4]", containsString("location"))
                .body("'errors'[17].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[17].'path'.size()", equalTo(5))
                .body("'errors'[17].'path'[0]", containsString("countries"))
                .body("'errors'[17].'path'[1]", numberMatches(9.0))
                .body("'errors'[17].'path'[2]", containsString("cities"))
                .body("'errors'[17].'path'[3]", numberMatches(186.0))
                .body("'errors'[17].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[18].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[18].'path'.size()", equalTo(5))
                .body("'errors'[18].'path'[0]", containsString("countries"))
                .body("'errors'[18].'path'[1]", numberMatches(9.0))
                .body("'errors'[18].'path'[2]", containsString("cities"))
                .body("'errors'[18].'path'[3]", numberMatches(187.0))
                .body("'errors'[18].'path'[4]", containsString("continent"))
                .body("'errors'[19].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[19].'path'.size()", equalTo(5))
                .body("'errors'[19].'path'[0]", containsString("countries"))
                .body("'errors'[19].'path'[1]", numberMatches(9.0))
                .body("'errors'[19].'path'[2]", containsString("cities"))
                .body("'errors'[19].'path'[3]", numberMatches(187.0))
                .body("'errors'[19].'path'[4]", containsString("location"))
                .body("'errors'[20].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[20].'path'.size()", equalTo(5))
                .body("'errors'[20].'path'[0]", containsString("countries"))
                .body("'errors'[20].'path'[1]", numberMatches(9.0))
                .body("'errors'[20].'path'[2]", containsString("cities"))
                .body("'errors'[20].'path'[3]", numberMatches(187.0))
                .body("'errors'[20].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[21].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[21].'path'.size()", equalTo(5))
                .body("'errors'[21].'path'[0]", containsString("countries"))
                .body("'errors'[21].'path'[1]", numberMatches(9.0))
                .body("'errors'[21].'path'[2]", containsString("cities"))
                .body("'errors'[21].'path'[3]", numberMatches(188.0))
                .body("'errors'[21].'path'[4]", containsString("continent"))
                .body("'errors'[22].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[22].'path'.size()", equalTo(5))
                .body("'errors'[22].'path'[0]", containsString("countries"))
                .body("'errors'[22].'path'[1]", numberMatches(9.0))
                .body("'errors'[22].'path'[2]", containsString("cities"))
                .body("'errors'[22].'path'[3]", numberMatches(188.0))
                .body("'errors'[22].'path'[4]", containsString("location"))
                .body("'errors'[23].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[23].'path'.size()", equalTo(5))
                .body("'errors'[23].'path'[0]", containsString("countries"))
                .body("'errors'[23].'path'[1]", numberMatches(9.0))
                .body("'errors'[23].'path'[2]", containsString("cities"))
                .body("'errors'[23].'path'[3]", numberMatches(188.0))
                .body("'errors'[23].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[24].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[24].'path'.size()", equalTo(5))
                .body("'errors'[24].'path'[0]", containsString("countries"))
                .body("'errors'[24].'path'[1]", numberMatches(9.0))
                .body("'errors'[24].'path'[2]", containsString("cities"))
                .body("'errors'[24].'path'[3]", numberMatches(189.0))
                .body("'errors'[24].'path'[4]", containsString("continent"))
                .body("'errors'[25].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[25].'path'.size()", equalTo(5))
                .body("'errors'[25].'path'[0]", containsString("countries"))
                .body("'errors'[25].'path'[1]", numberMatches(9.0))
                .body("'errors'[25].'path'[2]", containsString("cities"))
                .body("'errors'[25].'path'[3]", numberMatches(189.0))
                .body("'errors'[25].'path'[4]", containsString("location"))
                .body("'errors'[26].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[26].'path'.size()", equalTo(5))
                .body("'errors'[26].'path'[0]", containsString("countries"))
                .body("'errors'[26].'path'[1]", numberMatches(9.0))
                .body("'errors'[26].'path'[2]", containsString("cities"))
                .body("'errors'[26].'path'[3]", numberMatches(189.0))
                .body("'errors'[26].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[27].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[27].'path'.size()", equalTo(5))
                .body("'errors'[27].'path'[0]", containsString("countries"))
                .body("'errors'[27].'path'[1]", numberMatches(9.0))
                .body("'errors'[27].'path'[2]", containsString("cities"))
                .body("'errors'[27].'path'[3]", numberMatches(190.0))
                .body("'errors'[27].'path'[4]", containsString("continent"))
                .body("'errors'[28].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[28].'path'.size()", equalTo(5))
                .body("'errors'[28].'path'[0]", containsString("countries"))
                .body("'errors'[28].'path'[1]", numberMatches(9.0))
                .body("'errors'[28].'path'[2]", containsString("cities"))
                .body("'errors'[28].'path'[3]", numberMatches(190.0))
                .body("'errors'[28].'path'[4]", containsString("location"))
                .body("'errors'[29].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[29].'path'.size()", equalTo(5))
                .body("'errors'[29].'path'[0]", containsString("countries"))
                .body("'errors'[29].'path'[1]", numberMatches(9.0))
                .body("'errors'[29].'path'[2]", containsString("cities"))
                .body("'errors'[29].'path'[3]", numberMatches(190.0))
                .body("'errors'[29].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[30].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[30].'path'.size()", equalTo(5))
                .body("'errors'[30].'path'[0]", containsString("countries"))
                .body("'errors'[30].'path'[1]", numberMatches(9.0))
                .body("'errors'[30].'path'[2]", containsString("cities"))
                .body("'errors'[30].'path'[3]", numberMatches(191.0))
                .body("'errors'[30].'path'[4]", containsString("continent"))
                .body("'errors'[31].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[31].'path'.size()", equalTo(5))
                .body("'errors'[31].'path'[0]", containsString("countries"))
                .body("'errors'[31].'path'[1]", numberMatches(9.0))
                .body("'errors'[31].'path'[2]", containsString("cities"))
                .body("'errors'[31].'path'[3]", numberMatches(191.0))
                .body("'errors'[31].'path'[4]", containsString("location"))
                .body("'errors'[32].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[32].'path'.size()", equalTo(5))
                .body("'errors'[32].'path'[0]", containsString("countries"))
                .body("'errors'[32].'path'[1]", numberMatches(9.0))
                .body("'errors'[32].'path'[2]", containsString("cities"))
                .body("'errors'[32].'path'[3]", numberMatches(191.0))
                .body("'errors'[32].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[33].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[33].'path'.size()", equalTo(5))
                .body("'errors'[33].'path'[0]", containsString("countries"))
                .body("'errors'[33].'path'[1]", numberMatches(9.0))
                .body("'errors'[33].'path'[2]", containsString("cities"))
                .body("'errors'[33].'path'[3]", numberMatches(192.0))
                .body("'errors'[33].'path'[4]", containsString("continent"))
                .body("'errors'[34].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[34].'path'.size()", equalTo(5))
                .body("'errors'[34].'path'[0]", containsString("countries"))
                .body("'errors'[34].'path'[1]", numberMatches(9.0))
                .body("'errors'[34].'path'[2]", containsString("cities"))
                .body("'errors'[34].'path'[3]", numberMatches(192.0))
                .body("'errors'[34].'path'[4]", containsString("location"))
                .body("'errors'[35].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[35].'path'.size()", equalTo(5))
                .body("'errors'[35].'path'[0]", containsString("countries"))
                .body("'errors'[35].'path'[1]", numberMatches(9.0))
                .body("'errors'[35].'path'[2]", containsString("cities"))
                .body("'errors'[35].'path'[3]", numberMatches(192.0))
                .body("'errors'[35].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[36].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[36].'path'.size()", equalTo(5))
                .body("'errors'[36].'path'[0]", containsString("countries"))
                .body("'errors'[36].'path'[1]", numberMatches(9.0))
                .body("'errors'[36].'path'[2]", containsString("cities"))
                .body("'errors'[36].'path'[3]", numberMatches(193.0))
                .body("'errors'[36].'path'[4]", containsString("continent"))
                .body("'errors'[37].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[37].'path'.size()", equalTo(5))
                .body("'errors'[37].'path'[0]", containsString("countries"))
                .body("'errors'[37].'path'[1]", numberMatches(9.0))
                .body("'errors'[37].'path'[2]", containsString("cities"))
                .body("'errors'[37].'path'[3]", numberMatches(193.0))
                .body("'errors'[37].'path'[4]", containsString("location"))
                .body("'errors'[38].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[38].'path'.size()", equalTo(5))
                .body("'errors'[38].'path'[0]", containsString("countries"))
                .body("'errors'[38].'path'[1]", numberMatches(9.0))
                .body("'errors'[38].'path'[2]", containsString("cities"))
                .body("'errors'[38].'path'[3]", numberMatches(193.0))
                .body("'errors'[38].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[39].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[39].'path'.size()", equalTo(5))
                .body("'errors'[39].'path'[0]", containsString("countries"))
                .body("'errors'[39].'path'[1]", numberMatches(9.0))
                .body("'errors'[39].'path'[2]", containsString("cities"))
                .body("'errors'[39].'path'[3]", numberMatches(194.0))
                .body("'errors'[39].'path'[4]", containsString("continent"))
                .body("'errors'[40].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[40].'path'.size()", equalTo(5))
                .body("'errors'[40].'path'[0]", containsString("countries"))
                .body("'errors'[40].'path'[1]", numberMatches(9.0))
                .body("'errors'[40].'path'[2]", containsString("cities"))
                .body("'errors'[40].'path'[3]", numberMatches(194.0))
                .body("'errors'[40].'path'[4]", containsString("location"))
                .body("'errors'[41].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[41].'path'.size()", equalTo(5))
                .body("'errors'[41].'path'[0]", containsString("countries"))
                .body("'errors'[41].'path'[1]", numberMatches(9.0))
                .body("'errors'[41].'path'[2]", containsString("cities"))
                .body("'errors'[41].'path'[3]", numberMatches(194.0))
                .body("'errors'[41].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[42].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[42].'path'.size()", equalTo(5))
                .body("'errors'[42].'path'[0]", containsString("countries"))
                .body("'errors'[42].'path'[1]", numberMatches(9.0))
                .body("'errors'[42].'path'[2]", containsString("cities"))
                .body("'errors'[42].'path'[3]", numberMatches(195.0))
                .body("'errors'[42].'path'[4]", containsString("continent"))
                .body("'errors'[43].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[43].'path'.size()", equalTo(5))
                .body("'errors'[43].'path'[0]", containsString("countries"))
                .body("'errors'[43].'path'[1]", numberMatches(9.0))
                .body("'errors'[43].'path'[2]", containsString("cities"))
                .body("'errors'[43].'path'[3]", numberMatches(195.0))
                .body("'errors'[43].'path'[4]", containsString("location"))
                .body("'errors'[44].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[44].'path'.size()", equalTo(5))
                .body("'errors'[44].'path'[0]", containsString("countries"))
                .body("'errors'[44].'path'[1]", numberMatches(9.0))
                .body("'errors'[44].'path'[2]", containsString("cities"))
                .body("'errors'[44].'path'[3]", numberMatches(195.0))
                .body("'errors'[44].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[45].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[45].'path'.size()", equalTo(5))
                .body("'errors'[45].'path'[0]", containsString("countries"))
                .body("'errors'[45].'path'[1]", numberMatches(9.0))
                .body("'errors'[45].'path'[2]", containsString("cities"))
                .body("'errors'[45].'path'[3]", numberMatches(196.0))
                .body("'errors'[45].'path'[4]", containsString("continent"))
                .body("'errors'[46].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[46].'path'.size()", equalTo(5))
                .body("'errors'[46].'path'[0]", containsString("countries"))
                .body("'errors'[46].'path'[1]", numberMatches(9.0))
                .body("'errors'[46].'path'[2]", containsString("cities"))
                .body("'errors'[46].'path'[3]", numberMatches(196.0))
                .body("'errors'[46].'path'[4]", containsString("location"))
                .body("'errors'[47].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[47].'path'.size()", equalTo(5))
                .body("'errors'[47].'path'[0]", containsString("countries"))
                .body("'errors'[47].'path'[1]", numberMatches(9.0))
                .body("'errors'[47].'path'[2]", containsString("cities"))
                .body("'errors'[47].'path'[3]", numberMatches(196.0))
                .body("'errors'[47].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[48].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[48].'path'.size()", equalTo(5))
                .body("'errors'[48].'path'[0]", containsString("countries"))
                .body("'errors'[48].'path'[1]", numberMatches(9.0))
                .body("'errors'[48].'path'[2]", containsString("cities"))
                .body("'errors'[48].'path'[3]", numberMatches(197.0))
                .body("'errors'[48].'path'[4]", containsString("continent"))
                .body("'errors'[49].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[49].'path'.size()", equalTo(5))
                .body("'errors'[49].'path'[0]", containsString("countries"))
                .body("'errors'[49].'path'[1]", numberMatches(9.0))
                .body("'errors'[49].'path'[2]", containsString("cities"))
                .body("'errors'[49].'path'[3]", numberMatches(197.0))
                .body("'errors'[49].'path'[4]", containsString("location"))
                .body("'errors'[50].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[50].'path'.size()", equalTo(5))
                .body("'errors'[50].'path'[0]", containsString("countries"))
                .body("'errors'[50].'path'[1]", numberMatches(9.0))
                .body("'errors'[50].'path'[2]", containsString("cities"))
                .body("'errors'[50].'path'[3]", numberMatches(197.0))
                .body("'errors'[50].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[51].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[51].'path'.size()", equalTo(5))
                .body("'errors'[51].'path'[0]", containsString("countries"))
                .body("'errors'[51].'path'[1]", numberMatches(9.0))
                .body("'errors'[51].'path'[2]", containsString("cities"))
                .body("'errors'[51].'path'[3]", numberMatches(198.0))
                .body("'errors'[51].'path'[4]", containsString("continent"))
                .body("'errors'[52].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[52].'path'.size()", equalTo(5))
                .body("'errors'[52].'path'[0]", containsString("countries"))
                .body("'errors'[52].'path'[1]", numberMatches(9.0))
                .body("'errors'[52].'path'[2]", containsString("cities"))
                .body("'errors'[52].'path'[3]", numberMatches(198.0))
                .body("'errors'[52].'path'[4]", containsString("location"))
                .body("'errors'[53].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[53].'path'.size()", equalTo(5))
                .body("'errors'[53].'path'[0]", containsString("countries"))
                .body("'errors'[53].'path'[1]", numberMatches(9.0))
                .body("'errors'[53].'path'[2]", containsString("cities"))
                .body("'errors'[53].'path'[3]", numberMatches(198.0))
                .body("'errors'[53].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[54].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[54].'path'.size()", equalTo(5))
                .body("'errors'[54].'path'[0]", containsString("countries"))
                .body("'errors'[54].'path'[1]", numberMatches(9.0))
                .body("'errors'[54].'path'[2]", containsString("cities"))
                .body("'errors'[54].'path'[3]", numberMatches(199.0))
                .body("'errors'[54].'path'[4]", containsString("continent"))
                .body("'errors'[55].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[55].'path'.size()", equalTo(5))
                .body("'errors'[55].'path'[0]", containsString("countries"))
                .body("'errors'[55].'path'[1]", numberMatches(9.0))
                .body("'errors'[55].'path'[2]", containsString("cities"))
                .body("'errors'[55].'path'[3]", numberMatches(199.0))
                .body("'errors'[55].'path'[4]", containsString("location"))
                .body("'errors'[56].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[56].'path'.size()", equalTo(5))
                .body("'errors'[56].'path'[0]", containsString("countries"))
                .body("'errors'[56].'path'[1]", numberMatches(9.0))
                .body("'errors'[56].'path'[2]", containsString("cities"))
                .body("'errors'[56].'path'[3]", numberMatches(199.0))
                .body("'errors'[56].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[57].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[57].'path'.size()", equalTo(5))
                .body("'errors'[57].'path'[0]", containsString("countries"))
                .body("'errors'[57].'path'[1]", numberMatches(9.0))
                .body("'errors'[57].'path'[2]", containsString("cities"))
                .body("'errors'[57].'path'[3]", numberMatches(200.0))
                .body("'errors'[57].'path'[4]", containsString("continent"))
                .body("'errors'[58].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[58].'path'.size()", equalTo(5))
                .body("'errors'[58].'path'[0]", containsString("countries"))
                .body("'errors'[58].'path'[1]", numberMatches(9.0))
                .body("'errors'[58].'path'[2]", containsString("cities"))
                .body("'errors'[58].'path'[3]", numberMatches(200.0))
                .body("'errors'[58].'path'[4]", containsString("location"))
                .body("'errors'[59].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[59].'path'.size()", equalTo(5))
                .body("'errors'[59].'path'[0]", containsString("countries"))
                .body("'errors'[59].'path'[1]", numberMatches(9.0))
                .body("'errors'[59].'path'[2]", containsString("cities"))
                .body("'errors'[59].'path'[3]", numberMatches(200.0))
                .body("'errors'[59].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[60].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[60].'path'.size()", equalTo(5))
                .body("'errors'[60].'path'[0]", containsString("countries"))
                .body("'errors'[60].'path'[1]", numberMatches(9.0))
                .body("'errors'[60].'path'[2]", containsString("cities"))
                .body("'errors'[60].'path'[3]", numberMatches(201.0))
                .body("'errors'[60].'path'[4]", containsString("continent"))
                .body("'errors'[61].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[61].'path'.size()", equalTo(5))
                .body("'errors'[61].'path'[0]", containsString("countries"))
                .body("'errors'[61].'path'[1]", numberMatches(9.0))
                .body("'errors'[61].'path'[2]", containsString("cities"))
                .body("'errors'[61].'path'[3]", numberMatches(201.0))
                .body("'errors'[61].'path'[4]", containsString("location"))
                .body("'errors'[62].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[62].'path'.size()", equalTo(5))
                .body("'errors'[62].'path'[0]", containsString("countries"))
                .body("'errors'[62].'path'[1]", numberMatches(9.0))
                .body("'errors'[62].'path'[2]", containsString("cities"))
                .body("'errors'[62].'path'[3]", numberMatches(201.0))
                .body("'errors'[62].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[63].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[63].'path'.size()", equalTo(5))
                .body("'errors'[63].'path'[0]", containsString("countries"))
                .body("'errors'[63].'path'[1]", numberMatches(9.0))
                .body("'errors'[63].'path'[2]", containsString("cities"))
                .body("'errors'[63].'path'[3]", numberMatches(202.0))
                .body("'errors'[63].'path'[4]", containsString("continent"))
                .body("'errors'[64].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[64].'path'.size()", equalTo(5))
                .body("'errors'[64].'path'[0]", containsString("countries"))
                .body("'errors'[64].'path'[1]", numberMatches(9.0))
                .body("'errors'[64].'path'[2]", containsString("cities"))
                .body("'errors'[64].'path'[3]", numberMatches(202.0))
                .body("'errors'[64].'path'[4]", containsString("location"))
                .body("'errors'[65].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[65].'path'.size()", equalTo(5))
                .body("'errors'[65].'path'[0]", containsString("countries"))
                .body("'errors'[65].'path'[1]", numberMatches(9.0))
                .body("'errors'[65].'path'[2]", containsString("cities"))
                .body("'errors'[65].'path'[3]", numberMatches(202.0))
                .body("'errors'[65].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[66].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[66].'path'.size()", equalTo(5))
                .body("'errors'[66].'path'[0]", containsString("countries"))
                .body("'errors'[66].'path'[1]", numberMatches(9.0))
                .body("'errors'[66].'path'[2]", containsString("cities"))
                .body("'errors'[66].'path'[3]", numberMatches(203.0))
                .body("'errors'[66].'path'[4]", containsString("continent"))
                .body("'errors'[67].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[67].'path'.size()", equalTo(5))
                .body("'errors'[67].'path'[0]", containsString("countries"))
                .body("'errors'[67].'path'[1]", numberMatches(9.0))
                .body("'errors'[67].'path'[2]", containsString("cities"))
                .body("'errors'[67].'path'[3]", numberMatches(203.0))
                .body("'errors'[67].'path'[4]", containsString("location"))
                .body("'errors'[68].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[68].'path'.size()", equalTo(5))
                .body("'errors'[68].'path'[0]", containsString("countries"))
                .body("'errors'[68].'path'[1]", numberMatches(9.0))
                .body("'errors'[68].'path'[2]", containsString("cities"))
                .body("'errors'[68].'path'[3]", numberMatches(203.0))
                .body("'errors'[68].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[69].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[69].'path'.size()", equalTo(5))
                .body("'errors'[69].'path'[0]", containsString("countries"))
                .body("'errors'[69].'path'[1]", numberMatches(9.0))
                .body("'errors'[69].'path'[2]", containsString("cities"))
                .body("'errors'[69].'path'[3]", numberMatches(204.0))
                .body("'errors'[69].'path'[4]", containsString("continent"))
                .body("'errors'[70].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[70].'path'.size()", equalTo(5))
                .body("'errors'[70].'path'[0]", containsString("countries"))
                .body("'errors'[70].'path'[1]", numberMatches(9.0))
                .body("'errors'[70].'path'[2]", containsString("cities"))
                .body("'errors'[70].'path'[3]", numberMatches(204.0))
                .body("'errors'[70].'path'[4]", containsString("location"))
                .body("'errors'[71].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[71].'path'.size()", equalTo(5))
                .body("'errors'[71].'path'[0]", containsString("countries"))
                .body("'errors'[71].'path'[1]", numberMatches(9.0))
                .body("'errors'[71].'path'[2]", containsString("cities"))
                .body("'errors'[71].'path'[3]", numberMatches(204.0))
                .body("'errors'[71].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[72].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[72].'path'.size()", equalTo(5))
                .body("'errors'[72].'path'[0]", containsString("countries"))
                .body("'errors'[72].'path'[1]", numberMatches(9.0))
                .body("'errors'[72].'path'[2]", containsString("cities"))
                .body("'errors'[72].'path'[3]", numberMatches(205.0))
                .body("'errors'[72].'path'[4]", containsString("continent"))
                .body("'errors'[73].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[73].'path'.size()", equalTo(5))
                .body("'errors'[73].'path'[0]", containsString("countries"))
                .body("'errors'[73].'path'[1]", numberMatches(9.0))
                .body("'errors'[73].'path'[2]", containsString("cities"))
                .body("'errors'[73].'path'[3]", numberMatches(205.0))
                .body("'errors'[73].'path'[4]", containsString("location"))
                .body("'errors'[74].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[74].'path'.size()", equalTo(5))
                .body("'errors'[74].'path'[0]", containsString("countries"))
                .body("'errors'[74].'path'[1]", numberMatches(9.0))
                .body("'errors'[74].'path'[2]", containsString("cities"))
                .body("'errors'[74].'path'[3]", numberMatches(205.0))
                .body("'errors'[74].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[75].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[75].'path'.size()", equalTo(5))
                .body("'errors'[75].'path'[0]", containsString("countries"))
                .body("'errors'[75].'path'[1]", numberMatches(9.0))
                .body("'errors'[75].'path'[2]", containsString("cities"))
                .body("'errors'[75].'path'[3]", numberMatches(206.0))
                .body("'errors'[75].'path'[4]", containsString("continent"))
                .body("'errors'[76].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[76].'path'.size()", equalTo(5))
                .body("'errors'[76].'path'[0]", containsString("countries"))
                .body("'errors'[76].'path'[1]", numberMatches(9.0))
                .body("'errors'[76].'path'[2]", containsString("cities"))
                .body("'errors'[76].'path'[3]", numberMatches(206.0))
                .body("'errors'[76].'path'[4]", containsString("location"))
                .body("'errors'[77].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[77].'path'.size()", equalTo(5))
                .body("'errors'[77].'path'[0]", containsString("countries"))
                .body("'errors'[77].'path'[1]", numberMatches(9.0))
                .body("'errors'[77].'path'[2]", containsString("cities"))
                .body("'errors'[77].'path'[3]", numberMatches(206.0))
                .body("'errors'[77].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[78].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[78].'path'.size()", equalTo(5))
                .body("'errors'[78].'path'[0]", containsString("countries"))
                .body("'errors'[78].'path'[1]", numberMatches(9.0))
                .body("'errors'[78].'path'[2]", containsString("cities"))
                .body("'errors'[78].'path'[3]", numberMatches(207.0))
                .body("'errors'[78].'path'[4]", containsString("continent"))
                .body("'errors'[79].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[79].'path'.size()", equalTo(5))
                .body("'errors'[79].'path'[0]", containsString("countries"))
                .body("'errors'[79].'path'[1]", numberMatches(9.0))
                .body("'errors'[79].'path'[2]", containsString("cities"))
                .body("'errors'[79].'path'[3]", numberMatches(207.0))
                .body("'errors'[79].'path'[4]", containsString("location"))
                .body("'errors'[80].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[80].'path'.size()", equalTo(5))
                .body("'errors'[80].'path'[0]", containsString("countries"))
                .body("'errors'[80].'path'[1]", numberMatches(9.0))
                .body("'errors'[80].'path'[2]", containsString("cities"))
                .body("'errors'[80].'path'[3]", numberMatches(207.0))
                .body("'errors'[80].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[81].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[81].'path'.size()", equalTo(5))
                .body("'errors'[81].'path'[0]", containsString("countries"))
                .body("'errors'[81].'path'[1]", numberMatches(9.0))
                .body("'errors'[81].'path'[2]", containsString("cities"))
                .body("'errors'[81].'path'[3]", numberMatches(208.0))
                .body("'errors'[81].'path'[4]", containsString("continent"))
                .body("'errors'[82].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[82].'path'.size()", equalTo(5))
                .body("'errors'[82].'path'[0]", containsString("countries"))
                .body("'errors'[82].'path'[1]", numberMatches(9.0))
                .body("'errors'[82].'path'[2]", containsString("cities"))
                .body("'errors'[82].'path'[3]", numberMatches(208.0))
                .body("'errors'[82].'path'[4]", containsString("location"))
                .body("'errors'[83].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[83].'path'.size()", equalTo(5))
                .body("'errors'[83].'path'[0]", containsString("countries"))
                .body("'errors'[83].'path'[1]", numberMatches(9.0))
                .body("'errors'[83].'path'[2]", containsString("cities"))
                .body("'errors'[83].'path'[3]", numberMatches(208.0))
                .body("'errors'[83].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[84].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[84].'path'.size()", equalTo(5))
                .body("'errors'[84].'path'[0]", containsString("countries"))
                .body("'errors'[84].'path'[1]", numberMatches(9.0))
                .body("'errors'[84].'path'[2]", containsString("cities"))
                .body("'errors'[84].'path'[3]", numberMatches(209.0))
                .body("'errors'[84].'path'[4]", containsString("continent"))
                .body("'errors'[85].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[85].'path'.size()", equalTo(5))
                .body("'errors'[85].'path'[0]", containsString("countries"))
                .body("'errors'[85].'path'[1]", numberMatches(9.0))
                .body("'errors'[85].'path'[2]", containsString("cities"))
                .body("'errors'[85].'path'[3]", numberMatches(209.0))
                .body("'errors'[85].'path'[4]", containsString("location"))
                .body("'errors'[86].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[86].'path'.size()", equalTo(5))
                .body("'errors'[86].'path'[0]", containsString("countries"))
                .body("'errors'[86].'path'[1]", numberMatches(9.0))
                .body("'errors'[86].'path'[2]", containsString("cities"))
                .body("'errors'[86].'path'[3]", numberMatches(209.0))
                .body("'errors'[86].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[87].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[87].'path'.size()", equalTo(5))
                .body("'errors'[87].'path'[0]", containsString("countries"))
                .body("'errors'[87].'path'[1]", numberMatches(9.0))
                .body("'errors'[87].'path'[2]", containsString("cities"))
                .body("'errors'[87].'path'[3]", numberMatches(210.0))
                .body("'errors'[87].'path'[4]", containsString("continent"))
                .body("'errors'[88].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[88].'path'.size()", equalTo(5))
                .body("'errors'[88].'path'[0]", containsString("countries"))
                .body("'errors'[88].'path'[1]", numberMatches(9.0))
                .body("'errors'[88].'path'[2]", containsString("cities"))
                .body("'errors'[88].'path'[3]", numberMatches(210.0))
                .body("'errors'[88].'path'[4]", containsString("location"))
                .body("'errors'[89].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[89].'path'.size()", equalTo(5))
                .body("'errors'[89].'path'[0]", containsString("countries"))
                .body("'errors'[89].'path'[1]", numberMatches(9.0))
                .body("'errors'[89].'path'[2]", containsString("cities"))
                .body("'errors'[89].'path'[3]", numberMatches(210.0))
                .body("'errors'[89].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[90].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[90].'path'.size()", equalTo(5))
                .body("'errors'[90].'path'[0]", containsString("countries"))
                .body("'errors'[90].'path'[1]", numberMatches(9.0))
                .body("'errors'[90].'path'[2]", containsString("cities"))
                .body("'errors'[90].'path'[3]", numberMatches(211.0))
                .body("'errors'[90].'path'[4]", containsString("continent"))
                .body("'errors'[91].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[91].'path'.size()", equalTo(5))
                .body("'errors'[91].'path'[0]", containsString("countries"))
                .body("'errors'[91].'path'[1]", numberMatches(9.0))
                .body("'errors'[91].'path'[2]", containsString("cities"))
                .body("'errors'[91].'path'[3]", numberMatches(211.0))
                .body("'errors'[91].'path'[4]", containsString("location"))
                .body("'errors'[92].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[92].'path'.size()", equalTo(5))
                .body("'errors'[92].'path'[0]", containsString("countries"))
                .body("'errors'[92].'path'[1]", numberMatches(9.0))
                .body("'errors'[92].'path'[2]", containsString("cities"))
                .body("'errors'[92].'path'[3]", numberMatches(211.0))
                .body("'errors'[92].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[93].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[93].'path'.size()", equalTo(5))
                .body("'errors'[93].'path'[0]", containsString("countries"))
                .body("'errors'[93].'path'[1]", numberMatches(9.0))
                .body("'errors'[93].'path'[2]", containsString("cities"))
                .body("'errors'[93].'path'[3]", numberMatches(212.0))
                .body("'errors'[93].'path'[4]", containsString("continent"))
                .body("'errors'[94].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[94].'path'.size()", equalTo(5))
                .body("'errors'[94].'path'[0]", containsString("countries"))
                .body("'errors'[94].'path'[1]", numberMatches(9.0))
                .body("'errors'[94].'path'[2]", containsString("cities"))
                .body("'errors'[94].'path'[3]", numberMatches(212.0))
                .body("'errors'[94].'path'[4]", containsString("location"))
                .body("'errors'[95].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[95].'path'.size()", equalTo(5))
                .body("'errors'[95].'path'[0]", containsString("countries"))
                .body("'errors'[95].'path'[1]", numberMatches(9.0))
                .body("'errors'[95].'path'[2]", containsString("cities"))
                .body("'errors'[95].'path'[3]", numberMatches(212.0))
                .body("'errors'[95].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[96].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[96].'path'.size()", equalTo(5))
                .body("'errors'[96].'path'[0]", containsString("countries"))
                .body("'errors'[96].'path'[1]", numberMatches(9.0))
                .body("'errors'[96].'path'[2]", containsString("cities"))
                .body("'errors'[96].'path'[3]", numberMatches(213.0))
                .body("'errors'[96].'path'[4]", containsString("continent"))
                .body("'errors'[97].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[97].'path'.size()", equalTo(5))
                .body("'errors'[97].'path'[0]", containsString("countries"))
                .body("'errors'[97].'path'[1]", numberMatches(9.0))
                .body("'errors'[97].'path'[2]", containsString("cities"))
                .body("'errors'[97].'path'[3]", numberMatches(213.0))
                .body("'errors'[97].'path'[4]", containsString("location"))
                .body("'errors'[98].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[98].'path'.size()", equalTo(5))
                .body("'errors'[98].'path'[0]", containsString("countries"))
                .body("'errors'[98].'path'[1]", numberMatches(9.0))
                .body("'errors'[98].'path'[2]", containsString("cities"))
                .body("'errors'[98].'path'[3]", numberMatches(213.0))
                .body("'errors'[98].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[99].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[99].'path'.size()", equalTo(5))
                .body("'errors'[99].'path'[0]", containsString("countries"))
                .body("'errors'[99].'path'[1]", numberMatches(9.0))
                .body("'errors'[99].'path'[2]", containsString("cities"))
                .body("'errors'[99].'path'[3]", numberMatches(214.0))
                .body("'errors'[99].'path'[4]", containsString("continent"))
                .body("'errors'[100].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[100].'path'.size()", equalTo(5))
                .body("'errors'[100].'path'[0]", containsString("countries"))
                .body("'errors'[100].'path'[1]", numberMatches(9.0))
                .body("'errors'[100].'path'[2]", containsString("cities"))
                .body("'errors'[100].'path'[3]", numberMatches(214.0))
                .body("'errors'[100].'path'[4]", containsString("location"))
                .body("'errors'[101].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[101].'path'.size()", equalTo(5))
                .body("'errors'[101].'path'[0]", containsString("countries"))
                .body("'errors'[101].'path'[1]", numberMatches(9.0))
                .body("'errors'[101].'path'[2]", containsString("cities"))
                .body("'errors'[101].'path'[3]", numberMatches(214.0))
                .body("'errors'[101].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[102].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[102].'path'.size()", equalTo(5))
                .body("'errors'[102].'path'[0]", containsString("countries"))
                .body("'errors'[102].'path'[1]", numberMatches(9.0))
                .body("'errors'[102].'path'[2]", containsString("cities"))
                .body("'errors'[102].'path'[3]", numberMatches(215.0))
                .body("'errors'[102].'path'[4]", containsString("continent"))
                .body("'errors'[103].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[103].'path'.size()", equalTo(5))
                .body("'errors'[103].'path'[0]", containsString("countries"))
                .body("'errors'[103].'path'[1]", numberMatches(9.0))
                .body("'errors'[103].'path'[2]", containsString("cities"))
                .body("'errors'[103].'path'[3]", numberMatches(215.0))
                .body("'errors'[103].'path'[4]", containsString("location"))
                .body("'errors'[104].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[104].'path'.size()", equalTo(5))
                .body("'errors'[104].'path'[0]", containsString("countries"))
                .body("'errors'[104].'path'[1]", numberMatches(9.0))
                .body("'errors'[104].'path'[2]", containsString("cities"))
                .body("'errors'[104].'path'[3]", numberMatches(215.0))
                .body("'errors'[104].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[105].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[105].'path'.size()", equalTo(5))
                .body("'errors'[105].'path'[0]", containsString("countries"))
                .body("'errors'[105].'path'[1]", numberMatches(9.0))
                .body("'errors'[105].'path'[2]", containsString("cities"))
                .body("'errors'[105].'path'[3]", numberMatches(216.0))
                .body("'errors'[105].'path'[4]", containsString("continent"))
                .body("'errors'[106].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[106].'path'.size()", equalTo(5))
                .body("'errors'[106].'path'[0]", containsString("countries"))
                .body("'errors'[106].'path'[1]", numberMatches(9.0))
                .body("'errors'[106].'path'[2]", containsString("cities"))
                .body("'errors'[106].'path'[3]", numberMatches(216.0))
                .body("'errors'[106].'path'[4]", containsString("location"))
                .body("'errors'[107].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[107].'path'.size()", equalTo(5))
                .body("'errors'[107].'path'[0]", containsString("countries"))
                .body("'errors'[107].'path'[1]", numberMatches(9.0))
                .body("'errors'[107].'path'[2]", containsString("cities"))
                .body("'errors'[107].'path'[3]", numberMatches(216.0))
                .body("'errors'[107].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[108].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[108].'path'.size()", equalTo(5))
                .body("'errors'[108].'path'[0]", containsString("countries"))
                .body("'errors'[108].'path'[1]", numberMatches(9.0))
                .body("'errors'[108].'path'[2]", containsString("cities"))
                .body("'errors'[108].'path'[3]", numberMatches(217.0))
                .body("'errors'[108].'path'[4]", containsString("continent"))
                .body("'errors'[109].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[109].'path'.size()", equalTo(5))
                .body("'errors'[109].'path'[0]", containsString("countries"))
                .body("'errors'[109].'path'[1]", numberMatches(9.0))
                .body("'errors'[109].'path'[2]", containsString("cities"))
                .body("'errors'[109].'path'[3]", numberMatches(217.0))
                .body("'errors'[109].'path'[4]", containsString("location"))
                .body("'errors'[110].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[110].'path'.size()", equalTo(5))
                .body("'errors'[110].'path'[0]", containsString("countries"))
                .body("'errors'[110].'path'[1]", numberMatches(9.0))
                .body("'errors'[110].'path'[2]", containsString("cities"))
                .body("'errors'[110].'path'[3]", numberMatches(217.0))
                .body("'errors'[110].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[111].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[111].'path'.size()", equalTo(5))
                .body("'errors'[111].'path'[0]", containsString("countries"))
                .body("'errors'[111].'path'[1]", numberMatches(9.0))
                .body("'errors'[111].'path'[2]", containsString("cities"))
                .body("'errors'[111].'path'[3]", numberMatches(218.0))
                .body("'errors'[111].'path'[4]", containsString("continent"))
                .body("'errors'[112].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[112].'path'.size()", equalTo(5))
                .body("'errors'[112].'path'[0]", containsString("countries"))
                .body("'errors'[112].'path'[1]", numberMatches(9.0))
                .body("'errors'[112].'path'[2]", containsString("cities"))
                .body("'errors'[112].'path'[3]", numberMatches(218.0))
                .body("'errors'[112].'path'[4]", containsString("location"))
                .body("'errors'[113].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[113].'path'.size()", equalTo(5))
                .body("'errors'[113].'path'[0]", containsString("countries"))
                .body("'errors'[113].'path'[1]", numberMatches(9.0))
                .body("'errors'[113].'path'[2]", containsString("cities"))
                .body("'errors'[113].'path'[3]", numberMatches(218.0))
                .body("'errors'[113].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[114].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[114].'path'.size()", equalTo(5))
                .body("'errors'[114].'path'[0]", containsString("countries"))
                .body("'errors'[114].'path'[1]", numberMatches(9.0))
                .body("'errors'[114].'path'[2]", containsString("cities"))
                .body("'errors'[114].'path'[3]", numberMatches(219.0))
                .body("'errors'[114].'path'[4]", containsString("continent"))
                .body("'errors'[115].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[115].'path'.size()", equalTo(5))
                .body("'errors'[115].'path'[0]", containsString("countries"))
                .body("'errors'[115].'path'[1]", numberMatches(9.0))
                .body("'errors'[115].'path'[2]", containsString("cities"))
                .body("'errors'[115].'path'[3]", numberMatches(219.0))
                .body("'errors'[115].'path'[4]", containsString("location"))
                .body("'errors'[116].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[116].'path'.size()", equalTo(5))
                .body("'errors'[116].'path'[0]", containsString("countries"))
                .body("'errors'[116].'path'[1]", numberMatches(9.0))
                .body("'errors'[116].'path'[2]", containsString("cities"))
                .body("'errors'[116].'path'[3]", numberMatches(219.0))
                .body("'errors'[116].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[117].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[117].'path'.size()", equalTo(5))
                .body("'errors'[117].'path'[0]", containsString("countries"))
                .body("'errors'[117].'path'[1]", numberMatches(9.0))
                .body("'errors'[117].'path'[2]", containsString("cities"))
                .body("'errors'[117].'path'[3]", numberMatches(220.0))
                .body("'errors'[117].'path'[4]", containsString("continent"))
                .body("'errors'[118].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[118].'path'.size()", equalTo(5))
                .body("'errors'[118].'path'[0]", containsString("countries"))
                .body("'errors'[118].'path'[1]", numberMatches(9.0))
                .body("'errors'[118].'path'[2]", containsString("cities"))
                .body("'errors'[118].'path'[3]", numberMatches(220.0))
                .body("'errors'[118].'path'[4]", containsString("location"))
                .body("'errors'[119].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[119].'path'.size()", equalTo(5))
                .body("'errors'[119].'path'[0]", containsString("countries"))
                .body("'errors'[119].'path'[1]", numberMatches(9.0))
                .body("'errors'[119].'path'[2]", containsString("cities"))
                .body("'errors'[119].'path'[3]", numberMatches(220.0))
                .body("'errors'[119].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[120].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[120].'path'.size()", equalTo(5))
                .body("'errors'[120].'path'[0]", containsString("countries"))
                .body("'errors'[120].'path'[1]", numberMatches(9.0))
                .body("'errors'[120].'path'[2]", containsString("cities"))
                .body("'errors'[120].'path'[3]", numberMatches(221.0))
                .body("'errors'[120].'path'[4]", containsString("continent"))
                .body("'errors'[121].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[121].'path'.size()", equalTo(5))
                .body("'errors'[121].'path'[0]", containsString("countries"))
                .body("'errors'[121].'path'[1]", numberMatches(9.0))
                .body("'errors'[121].'path'[2]", containsString("cities"))
                .body("'errors'[121].'path'[3]", numberMatches(221.0))
                .body("'errors'[121].'path'[4]", containsString("location"))
                .body("'errors'[122].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[122].'path'.size()", equalTo(5))
                .body("'errors'[122].'path'[0]", containsString("countries"))
                .body("'errors'[122].'path'[1]", numberMatches(9.0))
                .body("'errors'[122].'path'[2]", containsString("cities"))
                .body("'errors'[122].'path'[3]", numberMatches(221.0))
                .body("'errors'[122].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[123].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[123].'path'.size()", equalTo(5))
                .body("'errors'[123].'path'[0]", containsString("countries"))
                .body("'errors'[123].'path'[1]", numberMatches(9.0))
                .body("'errors'[123].'path'[2]", containsString("cities"))
                .body("'errors'[123].'path'[3]", numberMatches(222.0))
                .body("'errors'[123].'path'[4]", containsString("continent"))
                .body("'errors'[124].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[124].'path'.size()", equalTo(5))
                .body("'errors'[124].'path'[0]", containsString("countries"))
                .body("'errors'[124].'path'[1]", numberMatches(9.0))
                .body("'errors'[124].'path'[2]", containsString("cities"))
                .body("'errors'[124].'path'[3]", numberMatches(222.0))
                .body("'errors'[124].'path'[4]", containsString("location"))
                .body("'errors'[125].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[125].'path'.size()", equalTo(5))
                .body("'errors'[125].'path'[0]", containsString("countries"))
                .body("'errors'[125].'path'[1]", numberMatches(9.0))
                .body("'errors'[125].'path'[2]", containsString("cities"))
                .body("'errors'[125].'path'[3]", numberMatches(222.0))
                .body("'errors'[125].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[126].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[126].'path'.size()", equalTo(5))
                .body("'errors'[126].'path'[0]", containsString("countries"))
                .body("'errors'[126].'path'[1]", numberMatches(9.0))
                .body("'errors'[126].'path'[2]", containsString("cities"))
                .body("'errors'[126].'path'[3]", numberMatches(223.0))
                .body("'errors'[126].'path'[4]", containsString("continent"))
                .body("'errors'[127].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[127].'path'.size()", equalTo(5))
                .body("'errors'[127].'path'[0]", containsString("countries"))
                .body("'errors'[127].'path'[1]", numberMatches(9.0))
                .body("'errors'[127].'path'[2]", containsString("cities"))
                .body("'errors'[127].'path'[3]", numberMatches(223.0))
                .body("'errors'[127].'path'[4]", containsString("location"))
                .body("'errors'[128].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[128].'path'.size()", equalTo(5))
                .body("'errors'[128].'path'[0]", containsString("countries"))
                .body("'errors'[128].'path'[1]", numberMatches(9.0))
                .body("'errors'[128].'path'[2]", containsString("cities"))
                .body("'errors'[128].'path'[3]", numberMatches(223.0))
                .body("'errors'[128].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[129].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[129].'path'.size()", equalTo(5))
                .body("'errors'[129].'path'[0]", containsString("countries"))
                .body("'errors'[129].'path'[1]", numberMatches(9.0))
                .body("'errors'[129].'path'[2]", containsString("cities"))
                .body("'errors'[129].'path'[3]", numberMatches(224.0))
                .body("'errors'[129].'path'[4]", containsString("continent"))
                .body("'errors'[130].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[130].'path'.size()", equalTo(5))
                .body("'errors'[130].'path'[0]", containsString("countries"))
                .body("'errors'[130].'path'[1]", numberMatches(9.0))
                .body("'errors'[130].'path'[2]", containsString("cities"))
                .body("'errors'[130].'path'[3]", numberMatches(224.0))
                .body("'errors'[130].'path'[4]", containsString("location"))
                .body("'errors'[131].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[131].'path'.size()", equalTo(5))
                .body("'errors'[131].'path'[0]", containsString("countries"))
                .body("'errors'[131].'path'[1]", numberMatches(9.0))
                .body("'errors'[131].'path'[2]", containsString("cities"))
                .body("'errors'[131].'path'[3]", numberMatches(224.0))
                .body("'errors'[131].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[132].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[132].'path'.size()", equalTo(5))
                .body("'errors'[132].'path'[0]", containsString("countries"))
                .body("'errors'[132].'path'[1]", numberMatches(9.0))
                .body("'errors'[132].'path'[2]", containsString("cities"))
                .body("'errors'[132].'path'[3]", numberMatches(225.0))
                .body("'errors'[132].'path'[4]", containsString("continent"))
                .body("'errors'[133].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[133].'path'.size()", equalTo(5))
                .body("'errors'[133].'path'[0]", containsString("countries"))
                .body("'errors'[133].'path'[1]", numberMatches(9.0))
                .body("'errors'[133].'path'[2]", containsString("cities"))
                .body("'errors'[133].'path'[3]", numberMatches(225.0))
                .body("'errors'[133].'path'[4]", containsString("location"))
                .body("'errors'[134].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[134].'path'.size()", equalTo(5))
                .body("'errors'[134].'path'[0]", containsString("countries"))
                .body("'errors'[134].'path'[1]", numberMatches(9.0))
                .body("'errors'[134].'path'[2]", containsString("cities"))
                .body("'errors'[134].'path'[3]", numberMatches(225.0))
                .body("'errors'[134].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[135].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[135].'path'.size()", equalTo(5))
                .body("'errors'[135].'path'[0]", containsString("countries"))
                .body("'errors'[135].'path'[1]", numberMatches(9.0))
                .body("'errors'[135].'path'[2]", containsString("cities"))
                .body("'errors'[135].'path'[3]", numberMatches(226.0))
                .body("'errors'[135].'path'[4]", containsString("continent"))
                .body("'errors'[136].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[136].'path'.size()", equalTo(5))
                .body("'errors'[136].'path'[0]", containsString("countries"))
                .body("'errors'[136].'path'[1]", numberMatches(9.0))
                .body("'errors'[136].'path'[2]", containsString("cities"))
                .body("'errors'[136].'path'[3]", numberMatches(226.0))
                .body("'errors'[136].'path'[4]", containsString("location"))
                .body("'errors'[137].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[137].'path'.size()", equalTo(5))
                .body("'errors'[137].'path'[0]", containsString("countries"))
                .body("'errors'[137].'path'[1]", numberMatches(9.0))
                .body("'errors'[137].'path'[2]", containsString("cities"))
                .body("'errors'[137].'path'[3]", numberMatches(226.0))
                .body("'errors'[137].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[138].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[138].'path'.size()", equalTo(5))
                .body("'errors'[138].'path'[0]", containsString("countries"))
                .body("'errors'[138].'path'[1]", numberMatches(9.0))
                .body("'errors'[138].'path'[2]", containsString("cities"))
                .body("'errors'[138].'path'[3]", numberMatches(227.0))
                .body("'errors'[138].'path'[4]", containsString("continent"))
                .body("'errors'[139].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[139].'path'.size()", equalTo(5))
                .body("'errors'[139].'path'[0]", containsString("countries"))
                .body("'errors'[139].'path'[1]", numberMatches(9.0))
                .body("'errors'[139].'path'[2]", containsString("cities"))
                .body("'errors'[139].'path'[3]", numberMatches(227.0))
                .body("'errors'[139].'path'[4]", containsString("location"))
                .body("'errors'[140].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[140].'path'.size()", equalTo(5))
                .body("'errors'[140].'path'[0]", containsString("countries"))
                .body("'errors'[140].'path'[1]", numberMatches(9.0))
                .body("'errors'[140].'path'[2]", containsString("cities"))
                .body("'errors'[140].'path'[3]", numberMatches(227.0))
                .body("'errors'[140].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[141].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[141].'path'.size()", equalTo(5))
                .body("'errors'[141].'path'[0]", containsString("countries"))
                .body("'errors'[141].'path'[1]", numberMatches(9.0))
                .body("'errors'[141].'path'[2]", containsString("cities"))
                .body("'errors'[141].'path'[3]", numberMatches(228.0))
                .body("'errors'[141].'path'[4]", containsString("continent"))
                .body("'errors'[142].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[142].'path'.size()", equalTo(5))
                .body("'errors'[142].'path'[0]", containsString("countries"))
                .body("'errors'[142].'path'[1]", numberMatches(9.0))
                .body("'errors'[142].'path'[2]", containsString("cities"))
                .body("'errors'[142].'path'[3]", numberMatches(228.0))
                .body("'errors'[142].'path'[4]", containsString("location"))
                .body("'errors'[143].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[143].'path'.size()", equalTo(5))
                .body("'errors'[143].'path'[0]", containsString("countries"))
                .body("'errors'[143].'path'[1]", numberMatches(9.0))
                .body("'errors'[143].'path'[2]", containsString("cities"))
                .body("'errors'[143].'path'[3]", numberMatches(228.0))
                .body("'errors'[143].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[144].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[144].'path'.size()", equalTo(5))
                .body("'errors'[144].'path'[0]", containsString("countries"))
                .body("'errors'[144].'path'[1]", numberMatches(9.0))
                .body("'errors'[144].'path'[2]", containsString("cities"))
                .body("'errors'[144].'path'[3]", numberMatches(229.0))
                .body("'errors'[144].'path'[4]", containsString("continent"))
                .body("'errors'[145].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[145].'path'.size()", equalTo(5))
                .body("'errors'[145].'path'[0]", containsString("countries"))
                .body("'errors'[145].'path'[1]", numberMatches(9.0))
                .body("'errors'[145].'path'[2]", containsString("cities"))
                .body("'errors'[145].'path'[3]", numberMatches(229.0))
                .body("'errors'[145].'path'[4]", containsString("location"))
                .body("'errors'[146].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[146].'path'.size()", equalTo(5))
                .body("'errors'[146].'path'[0]", containsString("countries"))
                .body("'errors'[146].'path'[1]", numberMatches(9.0))
                .body("'errors'[146].'path'[2]", containsString("cities"))
                .body("'errors'[146].'path'[3]", numberMatches(229.0))
                .body("'errors'[146].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[147].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[147].'path'.size()", equalTo(5))
                .body("'errors'[147].'path'[0]", containsString("countries"))
                .body("'errors'[147].'path'[1]", numberMatches(9.0))
                .body("'errors'[147].'path'[2]", containsString("cities"))
                .body("'errors'[147].'path'[3]", numberMatches(230.0))
                .body("'errors'[147].'path'[4]", containsString("continent"))
                .body("'errors'[148].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[148].'path'.size()", equalTo(5))
                .body("'errors'[148].'path'[0]", containsString("countries"))
                .body("'errors'[148].'path'[1]", numberMatches(9.0))
                .body("'errors'[148].'path'[2]", containsString("cities"))
                .body("'errors'[148].'path'[3]", numberMatches(230.0))
                .body("'errors'[148].'path'[4]", containsString("location"))
                .body("'errors'[149].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[149].'path'.size()", equalTo(5))
                .body("'errors'[149].'path'[0]", containsString("countries"))
                .body("'errors'[149].'path'[1]", numberMatches(9.0))
                .body("'errors'[149].'path'[2]", containsString("cities"))
                .body("'errors'[149].'path'[3]", numberMatches(230.0))
                .body("'errors'[149].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[150].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[150].'path'.size()", equalTo(5))
                .body("'errors'[150].'path'[0]", containsString("countries"))
                .body("'errors'[150].'path'[1]", numberMatches(9.0))
                .body("'errors'[150].'path'[2]", containsString("cities"))
                .body("'errors'[150].'path'[3]", numberMatches(231.0))
                .body("'errors'[150].'path'[4]", containsString("continent"))
                .body("'errors'[151].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[151].'path'.size()", equalTo(5))
                .body("'errors'[151].'path'[0]", containsString("countries"))
                .body("'errors'[151].'path'[1]", numberMatches(9.0))
                .body("'errors'[151].'path'[2]", containsString("cities"))
                .body("'errors'[151].'path'[3]", numberMatches(231.0))
                .body("'errors'[151].'path'[4]", containsString("location"))
                .body("'errors'[152].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[152].'path'.size()", equalTo(5))
                .body("'errors'[152].'path'[0]", containsString("countries"))
                .body("'errors'[152].'path'[1]", numberMatches(9.0))
                .body("'errors'[152].'path'[2]", containsString("cities"))
                .body("'errors'[152].'path'[3]", numberMatches(231.0))
                .body("'errors'[152].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[153].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[153].'path'.size()", equalTo(5))
                .body("'errors'[153].'path'[0]", containsString("countries"))
                .body("'errors'[153].'path'[1]", numberMatches(9.0))
                .body("'errors'[153].'path'[2]", containsString("cities"))
                .body("'errors'[153].'path'[3]", numberMatches(232.0))
                .body("'errors'[153].'path'[4]", containsString("continent"))
                .body("'errors'[154].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[154].'path'.size()", equalTo(5))
                .body("'errors'[154].'path'[0]", containsString("countries"))
                .body("'errors'[154].'path'[1]", numberMatches(9.0))
                .body("'errors'[154].'path'[2]", containsString("cities"))
                .body("'errors'[154].'path'[3]", numberMatches(232.0))
                .body("'errors'[154].'path'[4]", containsString("location"))
                .body("'errors'[155].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[155].'path'.size()", equalTo(5))
                .body("'errors'[155].'path'[0]", containsString("countries"))
                .body("'errors'[155].'path'[1]", numberMatches(9.0))
                .body("'errors'[155].'path'[2]", containsString("cities"))
                .body("'errors'[155].'path'[3]", numberMatches(232.0))
                .body("'errors'[155].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[156].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[156].'path'.size()", equalTo(5))
                .body("'errors'[156].'path'[0]", containsString("countries"))
                .body("'errors'[156].'path'[1]", numberMatches(9.0))
                .body("'errors'[156].'path'[2]", containsString("cities"))
                .body("'errors'[156].'path'[3]", numberMatches(233.0))
                .body("'errors'[156].'path'[4]", containsString("continent"))
                .body("'errors'[157].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[157].'path'.size()", equalTo(5))
                .body("'errors'[157].'path'[0]", containsString("countries"))
                .body("'errors'[157].'path'[1]", numberMatches(9.0))
                .body("'errors'[157].'path'[2]", containsString("cities"))
                .body("'errors'[157].'path'[3]", numberMatches(233.0))
                .body("'errors'[157].'path'[4]", containsString("location"))
                .body("'errors'[158].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[158].'path'.size()", equalTo(5))
                .body("'errors'[158].'path'[0]", containsString("countries"))
                .body("'errors'[158].'path'[1]", numberMatches(9.0))
                .body("'errors'[158].'path'[2]", containsString("cities"))
                .body("'errors'[158].'path'[3]", numberMatches(233.0))
                .body("'errors'[158].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[159].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[159].'path'.size()", equalTo(5))
                .body("'errors'[159].'path'[0]", containsString("countries"))
                .body("'errors'[159].'path'[1]", numberMatches(9.0))
                .body("'errors'[159].'path'[2]", containsString("cities"))
                .body("'errors'[159].'path'[3]", numberMatches(234.0))
                .body("'errors'[159].'path'[4]", containsString("continent"))
                .body("'errors'[160].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[160].'path'.size()", equalTo(5))
                .body("'errors'[160].'path'[0]", containsString("countries"))
                .body("'errors'[160].'path'[1]", numberMatches(9.0))
                .body("'errors'[160].'path'[2]", containsString("cities"))
                .body("'errors'[160].'path'[3]", numberMatches(234.0))
                .body("'errors'[160].'path'[4]", containsString("location"))
                .body("'errors'[161].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[161].'path'.size()", equalTo(5))
                .body("'errors'[161].'path'[0]", containsString("countries"))
                .body("'errors'[161].'path'[1]", numberMatches(9.0))
                .body("'errors'[161].'path'[2]", containsString("cities"))
                .body("'errors'[161].'path'[3]", numberMatches(234.0))
                .body("'errors'[161].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[162].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[162].'path'.size()", equalTo(5))
                .body("'errors'[162].'path'[0]", containsString("countries"))
                .body("'errors'[162].'path'[1]", numberMatches(9.0))
                .body("'errors'[162].'path'[2]", containsString("cities"))
                .body("'errors'[162].'path'[3]", numberMatches(235.0))
                .body("'errors'[162].'path'[4]", containsString("continent"))
                .body("'errors'[163].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[163].'path'.size()", equalTo(5))
                .body("'errors'[163].'path'[0]", containsString("countries"))
                .body("'errors'[163].'path'[1]", numberMatches(9.0))
                .body("'errors'[163].'path'[2]", containsString("cities"))
                .body("'errors'[163].'path'[3]", numberMatches(235.0))
                .body("'errors'[163].'path'[4]", containsString("location"))
                .body("'errors'[164].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[164].'path'.size()", equalTo(5))
                .body("'errors'[164].'path'[0]", containsString("countries"))
                .body("'errors'[164].'path'[1]", numberMatches(9.0))
                .body("'errors'[164].'path'[2]", containsString("cities"))
                .body("'errors'[164].'path'[3]", numberMatches(235.0))
                .body("'errors'[164].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[165].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[165].'path'.size()", equalTo(5))
                .body("'errors'[165].'path'[0]", containsString("countries"))
                .body("'errors'[165].'path'[1]", numberMatches(9.0))
                .body("'errors'[165].'path'[2]", containsString("cities"))
                .body("'errors'[165].'path'[3]", numberMatches(236.0))
                .body("'errors'[165].'path'[4]", containsString("continent"))
                .body("'errors'[166].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[166].'path'.size()", equalTo(5))
                .body("'errors'[166].'path'[0]", containsString("countries"))
                .body("'errors'[166].'path'[1]", numberMatches(9.0))
                .body("'errors'[166].'path'[2]", containsString("cities"))
                .body("'errors'[166].'path'[3]", numberMatches(236.0))
                .body("'errors'[166].'path'[4]", containsString("location"))
                .body("'errors'[167].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[167].'path'.size()", equalTo(5))
                .body("'errors'[167].'path'[0]", containsString("countries"))
                .body("'errors'[167].'path'[1]", numberMatches(9.0))
                .body("'errors'[167].'path'[2]", containsString("cities"))
                .body("'errors'[167].'path'[3]", numberMatches(236.0))
                .body("'errors'[167].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[168].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[168].'path'.size()", equalTo(5))
                .body("'errors'[168].'path'[0]", containsString("countries"))
                .body("'errors'[168].'path'[1]", numberMatches(9.0))
                .body("'errors'[168].'path'[2]", containsString("cities"))
                .body("'errors'[168].'path'[3]", numberMatches(237.0))
                .body("'errors'[168].'path'[4]", containsString("continent"))
                .body("'errors'[169].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[169].'path'.size()", equalTo(5))
                .body("'errors'[169].'path'[0]", containsString("countries"))
                .body("'errors'[169].'path'[1]", numberMatches(9.0))
                .body("'errors'[169].'path'[2]", containsString("cities"))
                .body("'errors'[169].'path'[3]", numberMatches(237.0))
                .body("'errors'[169].'path'[4]", containsString("location"))
                .body("'errors'[170].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[170].'path'.size()", equalTo(5))
                .body("'errors'[170].'path'[0]", containsString("countries"))
                .body("'errors'[170].'path'[1]", numberMatches(9.0))
                .body("'errors'[170].'path'[2]", containsString("cities"))
                .body("'errors'[170].'path'[3]", numberMatches(237.0))
                .body("'errors'[170].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[171].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[171].'path'.size()", equalTo(5))
                .body("'errors'[171].'path'[0]", containsString("countries"))
                .body("'errors'[171].'path'[1]", numberMatches(9.0))
                .body("'errors'[171].'path'[2]", containsString("cities"))
                .body("'errors'[171].'path'[3]", numberMatches(238.0))
                .body("'errors'[171].'path'[4]", containsString("continent"))
                .body("'errors'[172].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[172].'path'.size()", equalTo(5))
                .body("'errors'[172].'path'[0]", containsString("countries"))
                .body("'errors'[172].'path'[1]", numberMatches(9.0))
                .body("'errors'[172].'path'[2]", containsString("cities"))
                .body("'errors'[172].'path'[3]", numberMatches(238.0))
                .body("'errors'[172].'path'[4]", containsString("location"))
                .body("'errors'[173].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[173].'path'.size()", equalTo(5))
                .body("'errors'[173].'path'[0]", containsString("countries"))
                .body("'errors'[173].'path'[1]", numberMatches(9.0))
                .body("'errors'[173].'path'[2]", containsString("cities"))
                .body("'errors'[173].'path'[3]", numberMatches(238.0))
                .body("'errors'[173].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[174].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[174].'path'.size()", equalTo(5))
                .body("'errors'[174].'path'[0]", containsString("countries"))
                .body("'errors'[174].'path'[1]", numberMatches(9.0))
                .body("'errors'[174].'path'[2]", containsString("cities"))
                .body("'errors'[174].'path'[3]", numberMatches(239.0))
                .body("'errors'[174].'path'[4]", containsString("continent"))
                .body("'errors'[175].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[175].'path'.size()", equalTo(5))
                .body("'errors'[175].'path'[0]", containsString("countries"))
                .body("'errors'[175].'path'[1]", numberMatches(9.0))
                .body("'errors'[175].'path'[2]", containsString("cities"))
                .body("'errors'[175].'path'[3]", numberMatches(239.0))
                .body("'errors'[175].'path'[4]", containsString("location"))
                .body("'errors'[176].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[176].'path'.size()", equalTo(5))
                .body("'errors'[176].'path'[0]", containsString("countries"))
                .body("'errors'[176].'path'[1]", numberMatches(9.0))
                .body("'errors'[176].'path'[2]", containsString("cities"))
                .body("'errors'[176].'path'[3]", numberMatches(239.0))
                .body("'errors'[176].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[177].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[177].'path'.size()", equalTo(5))
                .body("'errors'[177].'path'[0]", containsString("countries"))
                .body("'errors'[177].'path'[1]", numberMatches(9.0))
                .body("'errors'[177].'path'[2]", containsString("cities"))
                .body("'errors'[177].'path'[3]", numberMatches(240.0))
                .body("'errors'[177].'path'[4]", containsString("continent"))
                .body("'errors'[178].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[178].'path'.size()", equalTo(5))
                .body("'errors'[178].'path'[0]", containsString("countries"))
                .body("'errors'[178].'path'[1]", numberMatches(9.0))
                .body("'errors'[178].'path'[2]", containsString("cities"))
                .body("'errors'[178].'path'[3]", numberMatches(240.0))
                .body("'errors'[178].'path'[4]", containsString("location"))
                .body("'errors'[179].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[179].'path'.size()", equalTo(5))
                .body("'errors'[179].'path'[0]", containsString("countries"))
                .body("'errors'[179].'path'[1]", numberMatches(9.0))
                .body("'errors'[179].'path'[2]", containsString("cities"))
                .body("'errors'[179].'path'[3]", numberMatches(240.0))
                .body("'errors'[179].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[180].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[180].'path'.size()", equalTo(5))
                .body("'errors'[180].'path'[0]", containsString("countries"))
                .body("'errors'[180].'path'[1]", numberMatches(9.0))
                .body("'errors'[180].'path'[2]", containsString("cities"))
                .body("'errors'[180].'path'[3]", numberMatches(241.0))
                .body("'errors'[180].'path'[4]", containsString("continent"))
                .body("'errors'[181].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[181].'path'.size()", equalTo(5))
                .body("'errors'[181].'path'[0]", containsString("countries"))
                .body("'errors'[181].'path'[1]", numberMatches(9.0))
                .body("'errors'[181].'path'[2]", containsString("cities"))
                .body("'errors'[181].'path'[3]", numberMatches(241.0))
                .body("'errors'[181].'path'[4]", containsString("location"))
                .body("'errors'[182].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[182].'path'.size()", equalTo(5))
                .body("'errors'[182].'path'[0]", containsString("countries"))
                .body("'errors'[182].'path'[1]", numberMatches(9.0))
                .body("'errors'[182].'path'[2]", containsString("cities"))
                .body("'errors'[182].'path'[3]", numberMatches(241.0))
                .body("'errors'[182].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[183].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[183].'path'.size()", equalTo(5))
                .body("'errors'[183].'path'[0]", containsString("countries"))
                .body("'errors'[183].'path'[1]", numberMatches(9.0))
                .body("'errors'[183].'path'[2]", containsString("cities"))
                .body("'errors'[183].'path'[3]", numberMatches(242.0))
                .body("'errors'[183].'path'[4]", containsString("continent"))
                .body("'errors'[184].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[184].'path'.size()", equalTo(5))
                .body("'errors'[184].'path'[0]", containsString("countries"))
                .body("'errors'[184].'path'[1]", numberMatches(9.0))
                .body("'errors'[184].'path'[2]", containsString("cities"))
                .body("'errors'[184].'path'[3]", numberMatches(242.0))
                .body("'errors'[184].'path'[4]", containsString("location"))
                .body("'errors'[185].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[185].'path'.size()", equalTo(5))
                .body("'errors'[185].'path'[0]", containsString("countries"))
                .body("'errors'[185].'path'[1]", numberMatches(9.0))
                .body("'errors'[185].'path'[2]", containsString("cities"))
                .body("'errors'[185].'path'[3]", numberMatches(242.0))
                .body("'errors'[185].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[186].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[186].'path'.size()", equalTo(5))
                .body("'errors'[186].'path'[0]", containsString("countries"))
                .body("'errors'[186].'path'[1]", numberMatches(9.0))
                .body("'errors'[186].'path'[2]", containsString("cities"))
                .body("'errors'[186].'path'[3]", numberMatches(243.0))
                .body("'errors'[186].'path'[4]", containsString("continent"))
                .body("'errors'[187].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[187].'path'.size()", equalTo(5))
                .body("'errors'[187].'path'[0]", containsString("countries"))
                .body("'errors'[187].'path'[1]", numberMatches(9.0))
                .body("'errors'[187].'path'[2]", containsString("cities"))
                .body("'errors'[187].'path'[3]", numberMatches(243.0))
                .body("'errors'[187].'path'[4]", containsString("location"))
                .body("'errors'[188].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[188].'path'.size()", equalTo(5))
                .body("'errors'[188].'path'[0]", containsString("countries"))
                .body("'errors'[188].'path'[1]", numberMatches(9.0))
                .body("'errors'[188].'path'[2]", containsString("cities"))
                .body("'errors'[188].'path'[3]", numberMatches(243.0))
                .body("'errors'[188].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[189].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[189].'path'.size()", equalTo(5))
                .body("'errors'[189].'path'[0]", containsString("countries"))
                .body("'errors'[189].'path'[1]", numberMatches(9.0))
                .body("'errors'[189].'path'[2]", containsString("cities"))
                .body("'errors'[189].'path'[3]", numberMatches(244.0))
                .body("'errors'[189].'path'[4]", containsString("continent"))
                .body("'errors'[190].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[190].'path'.size()", equalTo(5))
                .body("'errors'[190].'path'[0]", containsString("countries"))
                .body("'errors'[190].'path'[1]", numberMatches(9.0))
                .body("'errors'[190].'path'[2]", containsString("cities"))
                .body("'errors'[190].'path'[3]", numberMatches(244.0))
                .body("'errors'[190].'path'[4]", containsString("location"))
                .body("'errors'[191].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[191].'path'.size()", equalTo(5))
                .body("'errors'[191].'path'[0]", containsString("countries"))
                .body("'errors'[191].'path'[1]", numberMatches(9.0))
                .body("'errors'[191].'path'[2]", containsString("cities"))
                .body("'errors'[191].'path'[3]", numberMatches(244.0))
                .body("'errors'[191].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[192].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[192].'path'.size()", equalTo(5))
                .body("'errors'[192].'path'[0]", containsString("countries"))
                .body("'errors'[192].'path'[1]", numberMatches(9.0))
                .body("'errors'[192].'path'[2]", containsString("cities"))
                .body("'errors'[192].'path'[3]", numberMatches(245.0))
                .body("'errors'[192].'path'[4]", containsString("continent"))
                .body("'errors'[193].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[193].'path'.size()", equalTo(5))
                .body("'errors'[193].'path'[0]", containsString("countries"))
                .body("'errors'[193].'path'[1]", numberMatches(9.0))
                .body("'errors'[193].'path'[2]", containsString("cities"))
                .body("'errors'[193].'path'[3]", numberMatches(245.0))
                .body("'errors'[193].'path'[4]", containsString("location"))
                .body("'errors'[194].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[194].'path'.size()", equalTo(5))
                .body("'errors'[194].'path'[0]", containsString("countries"))
                .body("'errors'[194].'path'[1]", numberMatches(9.0))
                .body("'errors'[194].'path'[2]", containsString("cities"))
                .body("'errors'[194].'path'[3]", numberMatches(245.0))
                .body("'errors'[194].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[195].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[195].'path'.size()", equalTo(5))
                .body("'errors'[195].'path'[0]", containsString("countries"))
                .body("'errors'[195].'path'[1]", numberMatches(9.0))
                .body("'errors'[195].'path'[2]", containsString("cities"))
                .body("'errors'[195].'path'[3]", numberMatches(246.0))
                .body("'errors'[195].'path'[4]", containsString("continent"))
                .body("'errors'[196].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[196].'path'.size()", equalTo(5))
                .body("'errors'[196].'path'[0]", containsString("countries"))
                .body("'errors'[196].'path'[1]", numberMatches(9.0))
                .body("'errors'[196].'path'[2]", containsString("cities"))
                .body("'errors'[196].'path'[3]", numberMatches(246.0))
                .body("'errors'[196].'path'[4]", containsString("location"))
                .body("'errors'[197].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[197].'path'.size()", equalTo(5))
                .body("'errors'[197].'path'[0]", containsString("countries"))
                .body("'errors'[197].'path'[1]", numberMatches(9.0))
                .body("'errors'[197].'path'[2]", containsString("cities"))
                .body("'errors'[197].'path'[3]", numberMatches(246.0))
                .body("'errors'[197].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[198].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[198].'path'.size()", equalTo(5))
                .body("'errors'[198].'path'[0]", containsString("countries"))
                .body("'errors'[198].'path'[1]", numberMatches(9.0))
                .body("'errors'[198].'path'[2]", containsString("cities"))
                .body("'errors'[198].'path'[3]", numberMatches(247.0))
                .body("'errors'[198].'path'[4]", containsString("continent"))
                .body("'errors'[199].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[199].'path'.size()", equalTo(5))
                .body("'errors'[199].'path'[0]", containsString("countries"))
                .body("'errors'[199].'path'[1]", numberMatches(9.0))
                .body("'errors'[199].'path'[2]", containsString("cities"))
                .body("'errors'[199].'path'[3]", numberMatches(247.0))
                .body("'errors'[199].'path'[4]", containsString("location"))
                .body("'errors'[200].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[200].'path'.size()", equalTo(5))
                .body("'errors'[200].'path'[0]", containsString("countries"))
                .body("'errors'[200].'path'[1]", numberMatches(9.0))
                .body("'errors'[200].'path'[2]", containsString("cities"))
                .body("'errors'[200].'path'[3]", numberMatches(247.0))
                .body("'errors'[200].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[201].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[201].'path'.size()", equalTo(5))
                .body("'errors'[201].'path'[0]", containsString("countries"))
                .body("'errors'[201].'path'[1]", numberMatches(9.0))
                .body("'errors'[201].'path'[2]", containsString("cities"))
                .body("'errors'[201].'path'[3]", numberMatches(248.0))
                .body("'errors'[201].'path'[4]", containsString("continent"))
                .body("'errors'[202].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[202].'path'.size()", equalTo(5))
                .body("'errors'[202].'path'[0]", containsString("countries"))
                .body("'errors'[202].'path'[1]", numberMatches(9.0))
                .body("'errors'[202].'path'[2]", containsString("cities"))
                .body("'errors'[202].'path'[3]", numberMatches(248.0))
                .body("'errors'[202].'path'[4]", containsString("location"))
                .body("'errors'[203].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[203].'path'.size()", equalTo(5))
                .body("'errors'[203].'path'[0]", containsString("countries"))
                .body("'errors'[203].'path'[1]", numberMatches(9.0))
                .body("'errors'[203].'path'[2]", containsString("cities"))
                .body("'errors'[203].'path'[3]", numberMatches(248.0))
                .body("'errors'[203].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[204].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[204].'path'.size()", equalTo(5))
                .body("'errors'[204].'path'[0]", containsString("countries"))
                .body("'errors'[204].'path'[1]", numberMatches(9.0))
                .body("'errors'[204].'path'[2]", containsString("cities"))
                .body("'errors'[204].'path'[3]", numberMatches(249.0))
                .body("'errors'[204].'path'[4]", containsString("continent"))
                .body("'errors'[205].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[205].'path'.size()", equalTo(5))
                .body("'errors'[205].'path'[0]", containsString("countries"))
                .body("'errors'[205].'path'[1]", numberMatches(9.0))
                .body("'errors'[205].'path'[2]", containsString("cities"))
                .body("'errors'[205].'path'[3]", numberMatches(249.0))
                .body("'errors'[205].'path'[4]", containsString("location"))
                .body("'errors'[206].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[206].'path'.size()", equalTo(5))
                .body("'errors'[206].'path'[0]", containsString("countries"))
                .body("'errors'[206].'path'[1]", numberMatches(9.0))
                .body("'errors'[206].'path'[2]", containsString("cities"))
                .body("'errors'[206].'path'[3]", numberMatches(249.0))
                .body("'errors'[206].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[207].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[207].'path'.size()", equalTo(5))
                .body("'errors'[207].'path'[0]", containsString("countries"))
                .body("'errors'[207].'path'[1]", numberMatches(9.0))
                .body("'errors'[207].'path'[2]", containsString("cities"))
                .body("'errors'[207].'path'[3]", numberMatches(250.0))
                .body("'errors'[207].'path'[4]", containsString("continent"))
                .body("'errors'[208].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[208].'path'.size()", equalTo(5))
                .body("'errors'[208].'path'[0]", containsString("countries"))
                .body("'errors'[208].'path'[1]", numberMatches(9.0))
                .body("'errors'[208].'path'[2]", containsString("cities"))
                .body("'errors'[208].'path'[3]", numberMatches(250.0))
                .body("'errors'[208].'path'[4]", containsString("location"))
                .body("'errors'[209].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[209].'path'.size()", equalTo(5))
                .body("'errors'[209].'path'[0]", containsString("countries"))
                .body("'errors'[209].'path'[1]", numberMatches(9.0))
                .body("'errors'[209].'path'[2]", containsString("cities"))
                .body("'errors'[209].'path'[3]", numberMatches(250.0))
                .body("'errors'[209].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[210].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[210].'path'.size()", equalTo(5))
                .body("'errors'[210].'path'[0]", containsString("countries"))
                .body("'errors'[210].'path'[1]", numberMatches(9.0))
                .body("'errors'[210].'path'[2]", containsString("cities"))
                .body("'errors'[210].'path'[3]", numberMatches(251.0))
                .body("'errors'[210].'path'[4]", containsString("continent"))
                .body("'errors'[211].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[211].'path'.size()", equalTo(5))
                .body("'errors'[211].'path'[0]", containsString("countries"))
                .body("'errors'[211].'path'[1]", numberMatches(9.0))
                .body("'errors'[211].'path'[2]", containsString("cities"))
                .body("'errors'[211].'path'[3]", numberMatches(251.0))
                .body("'errors'[211].'path'[4]", containsString("location"))
                .body("'errors'[212].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[212].'path'.size()", equalTo(5))
                .body("'errors'[212].'path'[0]", containsString("countries"))
                .body("'errors'[212].'path'[1]", numberMatches(9.0))
                .body("'errors'[212].'path'[2]", containsString("cities"))
                .body("'errors'[212].'path'[3]", numberMatches(251.0))
                .body("'errors'[212].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[213].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[213].'path'.size()", equalTo(5))
                .body("'errors'[213].'path'[0]", containsString("countries"))
                .body("'errors'[213].'path'[1]", numberMatches(9.0))
                .body("'errors'[213].'path'[2]", containsString("cities"))
                .body("'errors'[213].'path'[3]", numberMatches(252.0))
                .body("'errors'[213].'path'[4]", containsString("continent"))
                .body("'errors'[214].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[214].'path'.size()", equalTo(5))
                .body("'errors'[214].'path'[0]", containsString("countries"))
                .body("'errors'[214].'path'[1]", numberMatches(9.0))
                .body("'errors'[214].'path'[2]", containsString("cities"))
                .body("'errors'[214].'path'[3]", numberMatches(252.0))
                .body("'errors'[214].'path'[4]", containsString("location"))
                .body("'errors'[215].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[215].'path'.size()", equalTo(5))
                .body("'errors'[215].'path'[0]", containsString("countries"))
                .body("'errors'[215].'path'[1]", numberMatches(9.0))
                .body("'errors'[215].'path'[2]", containsString("cities"))
                .body("'errors'[215].'path'[3]", numberMatches(252.0))
                .body("'errors'[215].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[216].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[216].'path'.size()", equalTo(5))
                .body("'errors'[216].'path'[0]", containsString("countries"))
                .body("'errors'[216].'path'[1]", numberMatches(9.0))
                .body("'errors'[216].'path'[2]", containsString("cities"))
                .body("'errors'[216].'path'[3]", numberMatches(253.0))
                .body("'errors'[216].'path'[4]", containsString("continent"))
                .body("'errors'[217].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[217].'path'.size()", equalTo(5))
                .body("'errors'[217].'path'[0]", containsString("countries"))
                .body("'errors'[217].'path'[1]", numberMatches(9.0))
                .body("'errors'[217].'path'[2]", containsString("cities"))
                .body("'errors'[217].'path'[3]", numberMatches(253.0))
                .body("'errors'[217].'path'[4]", containsString("location"))
                .body("'errors'[218].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[218].'path'.size()", equalTo(5))
                .body("'errors'[218].'path'[0]", containsString("countries"))
                .body("'errors'[218].'path'[1]", numberMatches(9.0))
                .body("'errors'[218].'path'[2]", containsString("cities"))
                .body("'errors'[218].'path'[3]", numberMatches(253.0))
                .body("'errors'[218].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[219].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[219].'path'.size()", equalTo(5))
                .body("'errors'[219].'path'[0]", containsString("countries"))
                .body("'errors'[219].'path'[1]", numberMatches(9.0))
                .body("'errors'[219].'path'[2]", containsString("cities"))
                .body("'errors'[219].'path'[3]", numberMatches(254.0))
                .body("'errors'[219].'path'[4]", containsString("continent"))
                .body("'errors'[220].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[220].'path'.size()", equalTo(5))
                .body("'errors'[220].'path'[0]", containsString("countries"))
                .body("'errors'[220].'path'[1]", numberMatches(9.0))
                .body("'errors'[220].'path'[2]", containsString("cities"))
                .body("'errors'[220].'path'[3]", numberMatches(254.0))
                .body("'errors'[220].'path'[4]", containsString("location"))
                .body("'errors'[221].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[221].'path'.size()", equalTo(5))
                .body("'errors'[221].'path'[0]", containsString("countries"))
                .body("'errors'[221].'path'[1]", numberMatches(9.0))
                .body("'errors'[221].'path'[2]", containsString("cities"))
                .body("'errors'[221].'path'[3]", numberMatches(254.0))
                .body("'errors'[221].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[222].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[222].'path'.size()", equalTo(5))
                .body("'errors'[222].'path'[0]", containsString("countries"))
                .body("'errors'[222].'path'[1]", numberMatches(9.0))
                .body("'errors'[222].'path'[2]", containsString("cities"))
                .body("'errors'[222].'path'[3]", numberMatches(255.0))
                .body("'errors'[222].'path'[4]", containsString("continent"))
                .body("'errors'[223].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[223].'path'.size()", equalTo(5))
                .body("'errors'[223].'path'[0]", containsString("countries"))
                .body("'errors'[223].'path'[1]", numberMatches(9.0))
                .body("'errors'[223].'path'[2]", containsString("cities"))
                .body("'errors'[223].'path'[3]", numberMatches(255.0))
                .body("'errors'[223].'path'[4]", containsString("location"))
                .body("'errors'[224].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[224].'path'.size()", equalTo(5))
                .body("'errors'[224].'path'[0]", containsString("countries"))
                .body("'errors'[224].'path'[1]", numberMatches(9.0))
                .body("'errors'[224].'path'[2]", containsString("cities"))
                .body("'errors'[224].'path'[3]", numberMatches(255.0))
                .body("'errors'[224].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[225].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[225].'path'.size()", equalTo(5))
                .body("'errors'[225].'path'[0]", containsString("countries"))
                .body("'errors'[225].'path'[1]", numberMatches(9.0))
                .body("'errors'[225].'path'[2]", containsString("cities"))
                .body("'errors'[225].'path'[3]", numberMatches(256.0))
                .body("'errors'[225].'path'[4]", containsString("continent"))
                .body("'errors'[226].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[226].'path'.size()", equalTo(5))
                .body("'errors'[226].'path'[0]", containsString("countries"))
                .body("'errors'[226].'path'[1]", numberMatches(9.0))
                .body("'errors'[226].'path'[2]", containsString("cities"))
                .body("'errors'[226].'path'[3]", numberMatches(256.0))
                .body("'errors'[226].'path'[4]", containsString("location"))
                .body("'errors'[227].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[227].'path'.size()", equalTo(5))
                .body("'errors'[227].'path'[0]", containsString("countries"))
                .body("'errors'[227].'path'[1]", numberMatches(9.0))
                .body("'errors'[227].'path'[2]", containsString("cities"))
                .body("'errors'[227].'path'[3]", numberMatches(256.0))
                .body("'errors'[227].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[228].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[228].'path'.size()", equalTo(5))
                .body("'errors'[228].'path'[0]", containsString("countries"))
                .body("'errors'[228].'path'[1]", numberMatches(9.0))
                .body("'errors'[228].'path'[2]", containsString("cities"))
                .body("'errors'[228].'path'[3]", numberMatches(257.0))
                .body("'errors'[228].'path'[4]", containsString("continent"))
                .body("'errors'[229].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[229].'path'.size()", equalTo(5))
                .body("'errors'[229].'path'[0]", containsString("countries"))
                .body("'errors'[229].'path'[1]", numberMatches(9.0))
                .body("'errors'[229].'path'[2]", containsString("cities"))
                .body("'errors'[229].'path'[3]", numberMatches(257.0))
                .body("'errors'[229].'path'[4]", containsString("location"))
                .body("'errors'[230].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[230].'path'.size()", equalTo(5))
                .body("'errors'[230].'path'[0]", containsString("countries"))
                .body("'errors'[230].'path'[1]", numberMatches(9.0))
                .body("'errors'[230].'path'[2]", containsString("cities"))
                .body("'errors'[230].'path'[3]", numberMatches(257.0))
                .body("'errors'[230].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[231].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[231].'path'.size()", equalTo(5))
                .body("'errors'[231].'path'[0]", containsString("countries"))
                .body("'errors'[231].'path'[1]", numberMatches(9.0))
                .body("'errors'[231].'path'[2]", containsString("cities"))
                .body("'errors'[231].'path'[3]", numberMatches(258.0))
                .body("'errors'[231].'path'[4]", containsString("continent"))
                .body("'errors'[232].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[232].'path'.size()", equalTo(5))
                .body("'errors'[232].'path'[0]", containsString("countries"))
                .body("'errors'[232].'path'[1]", numberMatches(9.0))
                .body("'errors'[232].'path'[2]", containsString("cities"))
                .body("'errors'[232].'path'[3]", numberMatches(258.0))
                .body("'errors'[232].'path'[4]", containsString("location"))
                .body("'errors'[233].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[233].'path'.size()", equalTo(5))
                .body("'errors'[233].'path'[0]", containsString("countries"))
                .body("'errors'[233].'path'[1]", numberMatches(9.0))
                .body("'errors'[233].'path'[2]", containsString("cities"))
                .body("'errors'[233].'path'[3]", numberMatches(258.0))
                .body("'errors'[233].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[234].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[234].'path'.size()", equalTo(5))
                .body("'errors'[234].'path'[0]", containsString("countries"))
                .body("'errors'[234].'path'[1]", numberMatches(9.0))
                .body("'errors'[234].'path'[2]", containsString("cities"))
                .body("'errors'[234].'path'[3]", numberMatches(259.0))
                .body("'errors'[234].'path'[4]", containsString("continent"))
                .body("'errors'[235].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[235].'path'.size()", equalTo(5))
                .body("'errors'[235].'path'[0]", containsString("countries"))
                .body("'errors'[235].'path'[1]", numberMatches(9.0))
                .body("'errors'[235].'path'[2]", containsString("cities"))
                .body("'errors'[235].'path'[3]", numberMatches(259.0))
                .body("'errors'[235].'path'[4]", containsString("location"))
                .body("'errors'[236].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[236].'path'.size()", equalTo(5))
                .body("'errors'[236].'path'[0]", containsString("countries"))
                .body("'errors'[236].'path'[1]", numberMatches(9.0))
                .body("'errors'[236].'path'[2]", containsString("cities"))
                .body("'errors'[236].'path'[3]", numberMatches(259.0))
                .body("'errors'[236].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[237].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[237].'path'.size()", equalTo(5))
                .body("'errors'[237].'path'[0]", containsString("countries"))
                .body("'errors'[237].'path'[1]", numberMatches(9.0))
                .body("'errors'[237].'path'[2]", containsString("cities"))
                .body("'errors'[237].'path'[3]", numberMatches(260.0))
                .body("'errors'[237].'path'[4]", containsString("continent"))
                .body("'errors'[238].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[238].'path'.size()", equalTo(5))
                .body("'errors'[238].'path'[0]", containsString("countries"))
                .body("'errors'[238].'path'[1]", numberMatches(9.0))
                .body("'errors'[238].'path'[2]", containsString("cities"))
                .body("'errors'[238].'path'[3]", numberMatches(260.0))
                .body("'errors'[238].'path'[4]", containsString("location"))
                .body("'errors'[239].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[239].'path'.size()", equalTo(5))
                .body("'errors'[239].'path'[0]", containsString("countries"))
                .body("'errors'[239].'path'[1]", numberMatches(9.0))
                .body("'errors'[239].'path'[2]", containsString("cities"))
                .body("'errors'[239].'path'[3]", numberMatches(260.0))
                .body("'errors'[239].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[240].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[240].'path'.size()", equalTo(5))
                .body("'errors'[240].'path'[0]", containsString("countries"))
                .body("'errors'[240].'path'[1]", numberMatches(9.0))
                .body("'errors'[240].'path'[2]", containsString("cities"))
                .body("'errors'[240].'path'[3]", numberMatches(261.0))
                .body("'errors'[240].'path'[4]", containsString("continent"))
                .body("'errors'[241].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[241].'path'.size()", equalTo(5))
                .body("'errors'[241].'path'[0]", containsString("countries"))
                .body("'errors'[241].'path'[1]", numberMatches(9.0))
                .body("'errors'[241].'path'[2]", containsString("cities"))
                .body("'errors'[241].'path'[3]", numberMatches(261.0))
                .body("'errors'[241].'path'[4]", containsString("location"))
                .body("'errors'[242].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[242].'path'.size()", equalTo(5))
                .body("'errors'[242].'path'[0]", containsString("countries"))
                .body("'errors'[242].'path'[1]", numberMatches(9.0))
                .body("'errors'[242].'path'[2]", containsString("cities"))
                .body("'errors'[242].'path'[3]", numberMatches(261.0))
                .body("'errors'[242].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[243].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[243].'path'.size()", equalTo(5))
                .body("'errors'[243].'path'[0]", containsString("countries"))
                .body("'errors'[243].'path'[1]", numberMatches(9.0))
                .body("'errors'[243].'path'[2]", containsString("cities"))
                .body("'errors'[243].'path'[3]", numberMatches(262.0))
                .body("'errors'[243].'path'[4]", containsString("continent"))
                .body("'errors'[244].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[244].'path'.size()", equalTo(5))
                .body("'errors'[244].'path'[0]", containsString("countries"))
                .body("'errors'[244].'path'[1]", numberMatches(9.0))
                .body("'errors'[244].'path'[2]", containsString("cities"))
                .body("'errors'[244].'path'[3]", numberMatches(262.0))
                .body("'errors'[244].'path'[4]", containsString("location"))
                .body("'errors'[245].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[245].'path'.size()", equalTo(5))
                .body("'errors'[245].'path'[0]", containsString("countries"))
                .body("'errors'[245].'path'[1]", numberMatches(9.0))
                .body("'errors'[245].'path'[2]", containsString("cities"))
                .body("'errors'[245].'path'[3]", numberMatches(262.0))
                .body("'errors'[245].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[246].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[246].'path'.size()", equalTo(5))
                .body("'errors'[246].'path'[0]", containsString("countries"))
                .body("'errors'[246].'path'[1]", numberMatches(9.0))
                .body("'errors'[246].'path'[2]", containsString("cities"))
                .body("'errors'[246].'path'[3]", numberMatches(263.0))
                .body("'errors'[246].'path'[4]", containsString("continent"))
                .body("'errors'[247].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[247].'path'.size()", equalTo(5))
                .body("'errors'[247].'path'[0]", containsString("countries"))
                .body("'errors'[247].'path'[1]", numberMatches(9.0))
                .body("'errors'[247].'path'[2]", containsString("cities"))
                .body("'errors'[247].'path'[3]", numberMatches(263.0))
                .body("'errors'[247].'path'[4]", containsString("location"))
                .body("'errors'[248].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[248].'path'.size()", equalTo(5))
                .body("'errors'[248].'path'[0]", containsString("countries"))
                .body("'errors'[248].'path'[1]", numberMatches(9.0))
                .body("'errors'[248].'path'[2]", containsString("cities"))
                .body("'errors'[248].'path'[3]", numberMatches(263.0))
                .body("'errors'[248].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[249].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[249].'path'.size()", equalTo(5))
                .body("'errors'[249].'path'[0]", containsString("countries"))
                .body("'errors'[249].'path'[1]", numberMatches(9.0))
                .body("'errors'[249].'path'[2]", containsString("cities"))
                .body("'errors'[249].'path'[3]", numberMatches(264.0))
                .body("'errors'[249].'path'[4]", containsString("continent"))
                .body("'errors'[250].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[250].'path'.size()", equalTo(5))
                .body("'errors'[250].'path'[0]", containsString("countries"))
                .body("'errors'[250].'path'[1]", numberMatches(9.0))
                .body("'errors'[250].'path'[2]", containsString("cities"))
                .body("'errors'[250].'path'[3]", numberMatches(264.0))
                .body("'errors'[250].'path'[4]", containsString("location"))
                .body("'errors'[251].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[251].'path'.size()", equalTo(5))
                .body("'errors'[251].'path'[0]", containsString("countries"))
                .body("'errors'[251].'path'[1]", numberMatches(9.0))
                .body("'errors'[251].'path'[2]", containsString("cities"))
                .body("'errors'[251].'path'[3]", numberMatches(264.0))
                .body("'errors'[251].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[252].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[252].'path'.size()", equalTo(5))
                .body("'errors'[252].'path'[0]", containsString("countries"))
                .body("'errors'[252].'path'[1]", numberMatches(9.0))
                .body("'errors'[252].'path'[2]", containsString("cities"))
                .body("'errors'[252].'path'[3]", numberMatches(265.0))
                .body("'errors'[252].'path'[4]", containsString("continent"))
                .body("'errors'[253].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[253].'path'.size()", equalTo(5))
                .body("'errors'[253].'path'[0]", containsString("countries"))
                .body("'errors'[253].'path'[1]", numberMatches(9.0))
                .body("'errors'[253].'path'[2]", containsString("cities"))
                .body("'errors'[253].'path'[3]", numberMatches(265.0))
                .body("'errors'[253].'path'[4]", containsString("location"))
                .body("'errors'[254].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[254].'path'.size()", equalTo(5))
                .body("'errors'[254].'path'[0]", containsString("countries"))
                .body("'errors'[254].'path'[1]", numberMatches(9.0))
                .body("'errors'[254].'path'[2]", containsString("cities"))
                .body("'errors'[254].'path'[3]", numberMatches(265.0))
                .body("'errors'[254].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[255].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[255].'path'.size()", equalTo(5))
                .body("'errors'[255].'path'[0]", containsString("countries"))
                .body("'errors'[255].'path'[1]", numberMatches(9.0))
                .body("'errors'[255].'path'[2]", containsString("cities"))
                .body("'errors'[255].'path'[3]", numberMatches(266.0))
                .body("'errors'[255].'path'[4]", containsString("continent"))
                .body("'errors'[256].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[256].'path'.size()", equalTo(5))
                .body("'errors'[256].'path'[0]", containsString("countries"))
                .body("'errors'[256].'path'[1]", numberMatches(9.0))
                .body("'errors'[256].'path'[2]", containsString("cities"))
                .body("'errors'[256].'path'[3]", numberMatches(266.0))
                .body("'errors'[256].'path'[4]", containsString("location"))
                .body("'errors'[257].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[257].'path'.size()", equalTo(5))
                .body("'errors'[257].'path'[0]", containsString("countries"))
                .body("'errors'[257].'path'[1]", numberMatches(9.0))
                .body("'errors'[257].'path'[2]", containsString("cities"))
                .body("'errors'[257].'path'[3]", numberMatches(266.0))
                .body("'errors'[257].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[258].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[258].'path'.size()", equalTo(5))
                .body("'errors'[258].'path'[0]", containsString("countries"))
                .body("'errors'[258].'path'[1]", numberMatches(9.0))
                .body("'errors'[258].'path'[2]", containsString("cities"))
                .body("'errors'[258].'path'[3]", numberMatches(267.0))
                .body("'errors'[258].'path'[4]", containsString("continent"))
                .body("'errors'[259].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[259].'path'.size()", equalTo(5))
                .body("'errors'[259].'path'[0]", containsString("countries"))
                .body("'errors'[259].'path'[1]", numberMatches(9.0))
                .body("'errors'[259].'path'[2]", containsString("cities"))
                .body("'errors'[259].'path'[3]", numberMatches(267.0))
                .body("'errors'[259].'path'[4]", containsString("location"))
                .body("'errors'[260].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[260].'path'.size()", equalTo(5))
                .body("'errors'[260].'path'[0]", containsString("countries"))
                .body("'errors'[260].'path'[1]", numberMatches(9.0))
                .body("'errors'[260].'path'[2]", containsString("cities"))
                .body("'errors'[260].'path'[3]", numberMatches(267.0))
                .body("'errors'[260].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[261].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[261].'path'.size()", equalTo(5))
                .body("'errors'[261].'path'[0]", containsString("countries"))
                .body("'errors'[261].'path'[1]", numberMatches(9.0))
                .body("'errors'[261].'path'[2]", containsString("cities"))
                .body("'errors'[261].'path'[3]", numberMatches(268.0))
                .body("'errors'[261].'path'[4]", containsString("continent"))
                .body("'errors'[262].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[262].'path'.size()", equalTo(5))
                .body("'errors'[262].'path'[0]", containsString("countries"))
                .body("'errors'[262].'path'[1]", numberMatches(9.0))
                .body("'errors'[262].'path'[2]", containsString("cities"))
                .body("'errors'[262].'path'[3]", numberMatches(268.0))
                .body("'errors'[262].'path'[4]", containsString("location"))
                .body("'errors'[263].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[263].'path'.size()", equalTo(5))
                .body("'errors'[263].'path'[0]", containsString("countries"))
                .body("'errors'[263].'path'[1]", numberMatches(9.0))
                .body("'errors'[263].'path'[2]", containsString("cities"))
                .body("'errors'[263].'path'[3]", numberMatches(268.0))
                .body("'errors'[263].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[264].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[264].'path'.size()", equalTo(5))
                .body("'errors'[264].'path'[0]", containsString("countries"))
                .body("'errors'[264].'path'[1]", numberMatches(9.0))
                .body("'errors'[264].'path'[2]", containsString("cities"))
                .body("'errors'[264].'path'[3]", numberMatches(269.0))
                .body("'errors'[264].'path'[4]", containsString("continent"))
                .body("'errors'[265].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[265].'path'.size()", equalTo(5))
                .body("'errors'[265].'path'[0]", containsString("countries"))
                .body("'errors'[265].'path'[1]", numberMatches(9.0))
                .body("'errors'[265].'path'[2]", containsString("cities"))
                .body("'errors'[265].'path'[3]", numberMatches(269.0))
                .body("'errors'[265].'path'[4]", containsString("location"))
                .body("'errors'[266].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[266].'path'.size()", equalTo(5))
                .body("'errors'[266].'path'[0]", containsString("countries"))
                .body("'errors'[266].'path'[1]", numberMatches(9.0))
                .body("'errors'[266].'path'[2]", containsString("cities"))
                .body("'errors'[266].'path'[3]", numberMatches(269.0))
                .body("'errors'[266].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[267].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[267].'path'.size()", equalTo(5))
                .body("'errors'[267].'path'[0]", containsString("countries"))
                .body("'errors'[267].'path'[1]", numberMatches(9.0))
                .body("'errors'[267].'path'[2]", containsString("cities"))
                .body("'errors'[267].'path'[3]", numberMatches(270.0))
                .body("'errors'[267].'path'[4]", containsString("continent"))
                .body("'errors'[268].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[268].'path'.size()", equalTo(5))
                .body("'errors'[268].'path'[0]", containsString("countries"))
                .body("'errors'[268].'path'[1]", numberMatches(9.0))
                .body("'errors'[268].'path'[2]", containsString("cities"))
                .body("'errors'[268].'path'[3]", numberMatches(270.0))
                .body("'errors'[268].'path'[4]", containsString("location"))
                .body("'errors'[269].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[269].'path'.size()", equalTo(5))
                .body("'errors'[269].'path'[0]", containsString("countries"))
                .body("'errors'[269].'path'[1]", numberMatches(9.0))
                .body("'errors'[269].'path'[2]", containsString("cities"))
                .body("'errors'[269].'path'[3]", numberMatches(270.0))
                .body("'errors'[269].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[270].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[270].'path'.size()", equalTo(5))
                .body("'errors'[270].'path'[0]", containsString("countries"))
                .body("'errors'[270].'path'[1]", numberMatches(9.0))
                .body("'errors'[270].'path'[2]", containsString("cities"))
                .body("'errors'[270].'path'[3]", numberMatches(271.0))
                .body("'errors'[270].'path'[4]", containsString("continent"))
                .body("'errors'[271].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[271].'path'.size()", equalTo(5))
                .body("'errors'[271].'path'[0]", containsString("countries"))
                .body("'errors'[271].'path'[1]", numberMatches(9.0))
                .body("'errors'[271].'path'[2]", containsString("cities"))
                .body("'errors'[271].'path'[3]", numberMatches(271.0))
                .body("'errors'[271].'path'[4]", containsString("location"))
                .body("'errors'[272].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[272].'path'.size()", equalTo(5))
                .body("'errors'[272].'path'[0]", containsString("countries"))
                .body("'errors'[272].'path'[1]", numberMatches(9.0))
                .body("'errors'[272].'path'[2]", containsString("cities"))
                .body("'errors'[272].'path'[3]", numberMatches(271.0))
                .body("'errors'[272].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[273].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[273].'path'.size()", equalTo(5))
                .body("'errors'[273].'path'[0]", containsString("countries"))
                .body("'errors'[273].'path'[1]", numberMatches(9.0))
                .body("'errors'[273].'path'[2]", containsString("cities"))
                .body("'errors'[273].'path'[3]", numberMatches(272.0))
                .body("'errors'[273].'path'[4]", containsString("continent"))
                .body("'errors'[274].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[274].'path'.size()", equalTo(5))
                .body("'errors'[274].'path'[0]", containsString("countries"))
                .body("'errors'[274].'path'[1]", numberMatches(9.0))
                .body("'errors'[274].'path'[2]", containsString("cities"))
                .body("'errors'[274].'path'[3]", numberMatches(272.0))
                .body("'errors'[274].'path'[4]", containsString("location"))
                .body("'errors'[275].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[275].'path'.size()", equalTo(5))
                .body("'errors'[275].'path'[0]", containsString("countries"))
                .body("'errors'[275].'path'[1]", numberMatches(9.0))
                .body("'errors'[275].'path'[2]", containsString("cities"))
                .body("'errors'[275].'path'[3]", numberMatches(272.0))
                .body("'errors'[275].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[276].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[276].'path'.size()", equalTo(5))
                .body("'errors'[276].'path'[0]", containsString("countries"))
                .body("'errors'[276].'path'[1]", numberMatches(9.0))
                .body("'errors'[276].'path'[2]", containsString("cities"))
                .body("'errors'[276].'path'[3]", numberMatches(273.0))
                .body("'errors'[276].'path'[4]", containsString("continent"))
                .body("'errors'[277].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[277].'path'.size()", equalTo(5))
                .body("'errors'[277].'path'[0]", containsString("countries"))
                .body("'errors'[277].'path'[1]", numberMatches(9.0))
                .body("'errors'[277].'path'[2]", containsString("cities"))
                .body("'errors'[277].'path'[3]", numberMatches(273.0))
                .body("'errors'[277].'path'[4]", containsString("location"))
                .body("'errors'[278].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[278].'path'.size()", equalTo(5))
                .body("'errors'[278].'path'[0]", containsString("countries"))
                .body("'errors'[278].'path'[1]", numberMatches(9.0))
                .body("'errors'[278].'path'[2]", containsString("cities"))
                .body("'errors'[278].'path'[3]", numberMatches(273.0))
                .body("'errors'[278].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[279].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[279].'path'.size()", equalTo(5))
                .body("'errors'[279].'path'[0]", containsString("countries"))
                .body("'errors'[279].'path'[1]", numberMatches(9.0))
                .body("'errors'[279].'path'[2]", containsString("cities"))
                .body("'errors'[279].'path'[3]", numberMatches(274.0))
                .body("'errors'[279].'path'[4]", containsString("continent"))
                .body("'errors'[280].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[280].'path'.size()", equalTo(5))
                .body("'errors'[280].'path'[0]", containsString("countries"))
                .body("'errors'[280].'path'[1]", numberMatches(9.0))
                .body("'errors'[280].'path'[2]", containsString("cities"))
                .body("'errors'[280].'path'[3]", numberMatches(274.0))
                .body("'errors'[280].'path'[4]", containsString("location"))
                .body("'errors'[281].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[281].'path'.size()", equalTo(5))
                .body("'errors'[281].'path'[0]", containsString("countries"))
                .body("'errors'[281].'path'[1]", numberMatches(9.0))
                .body("'errors'[281].'path'[2]", containsString("cities"))
                .body("'errors'[281].'path'[3]", numberMatches(274.0))
                .body("'errors'[281].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[282].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[282].'path'.size()", equalTo(5))
                .body("'errors'[282].'path'[0]", containsString("countries"))
                .body("'errors'[282].'path'[1]", numberMatches(9.0))
                .body("'errors'[282].'path'[2]", containsString("cities"))
                .body("'errors'[282].'path'[3]", numberMatches(275.0))
                .body("'errors'[282].'path'[4]", containsString("continent"))
                .body("'errors'[283].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[283].'path'.size()", equalTo(5))
                .body("'errors'[283].'path'[0]", containsString("countries"))
                .body("'errors'[283].'path'[1]", numberMatches(9.0))
                .body("'errors'[283].'path'[2]", containsString("cities"))
                .body("'errors'[283].'path'[3]", numberMatches(275.0))
                .body("'errors'[283].'path'[4]", containsString("location"))
                .body("'errors'[284].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[284].'path'.size()", equalTo(5))
                .body("'errors'[284].'path'[0]", containsString("countries"))
                .body("'errors'[284].'path'[1]", numberMatches(9.0))
                .body("'errors'[284].'path'[2]", containsString("cities"))
                .body("'errors'[284].'path'[3]", numberMatches(275.0))
                .body("'errors'[284].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[285].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[285].'path'.size()", equalTo(5))
                .body("'errors'[285].'path'[0]", containsString("countries"))
                .body("'errors'[285].'path'[1]", numberMatches(9.0))
                .body("'errors'[285].'path'[2]", containsString("cities"))
                .body("'errors'[285].'path'[3]", numberMatches(276.0))
                .body("'errors'[285].'path'[4]", containsString("continent"))
                .body("'errors'[286].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[286].'path'.size()", equalTo(5))
                .body("'errors'[286].'path'[0]", containsString("countries"))
                .body("'errors'[286].'path'[1]", numberMatches(9.0))
                .body("'errors'[286].'path'[2]", containsString("cities"))
                .body("'errors'[286].'path'[3]", numberMatches(276.0))
                .body("'errors'[286].'path'[4]", containsString("location"))
                .body("'errors'[287].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[287].'path'.size()", equalTo(5))
                .body("'errors'[287].'path'[0]", containsString("countries"))
                .body("'errors'[287].'path'[1]", numberMatches(9.0))
                .body("'errors'[287].'path'[2]", containsString("cities"))
                .body("'errors'[287].'path'[3]", numberMatches(276.0))
                .body("'errors'[287].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[288].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[288].'path'.size()", equalTo(5))
                .body("'errors'[288].'path'[0]", containsString("countries"))
                .body("'errors'[288].'path'[1]", numberMatches(9.0))
                .body("'errors'[288].'path'[2]", containsString("cities"))
                .body("'errors'[288].'path'[3]", numberMatches(277.0))
                .body("'errors'[288].'path'[4]", containsString("continent"))
                .body("'errors'[289].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[289].'path'.size()", equalTo(5))
                .body("'errors'[289].'path'[0]", containsString("countries"))
                .body("'errors'[289].'path'[1]", numberMatches(9.0))
                .body("'errors'[289].'path'[2]", containsString("cities"))
                .body("'errors'[289].'path'[3]", numberMatches(277.0))
                .body("'errors'[289].'path'[4]", containsString("location"))
                .body("'errors'[290].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[290].'path'.size()", equalTo(5))
                .body("'errors'[290].'path'[0]", containsString("countries"))
                .body("'errors'[290].'path'[1]", numberMatches(9.0))
                .body("'errors'[290].'path'[2]", containsString("cities"))
                .body("'errors'[290].'path'[3]", numberMatches(277.0))
                .body("'errors'[290].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[291].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[291].'path'.size()", equalTo(5))
                .body("'errors'[291].'path'[0]", containsString("countries"))
                .body("'errors'[291].'path'[1]", numberMatches(9.0))
                .body("'errors'[291].'path'[2]", containsString("cities"))
                .body("'errors'[291].'path'[3]", numberMatches(278.0))
                .body("'errors'[291].'path'[4]", containsString("continent"))
                .body("'errors'[292].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[292].'path'.size()", equalTo(5))
                .body("'errors'[292].'path'[0]", containsString("countries"))
                .body("'errors'[292].'path'[1]", numberMatches(9.0))
                .body("'errors'[292].'path'[2]", containsString("cities"))
                .body("'errors'[292].'path'[3]", numberMatches(278.0))
                .body("'errors'[292].'path'[4]", containsString("location"))
                .body("'errors'[293].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[293].'path'.size()", equalTo(5))
                .body("'errors'[293].'path'[0]", containsString("countries"))
                .body("'errors'[293].'path'[1]", numberMatches(9.0))
                .body("'errors'[293].'path'[2]", containsString("cities"))
                .body("'errors'[293].'path'[3]", numberMatches(278.0))
                .body("'errors'[293].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[294].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[294].'path'.size()", equalTo(5))
                .body("'errors'[294].'path'[0]", containsString("countries"))
                .body("'errors'[294].'path'[1]", numberMatches(9.0))
                .body("'errors'[294].'path'[2]", containsString("cities"))
                .body("'errors'[294].'path'[3]", numberMatches(279.0))
                .body("'errors'[294].'path'[4]", containsString("continent"))
                .body("'errors'[295].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[295].'path'.size()", equalTo(5))
                .body("'errors'[295].'path'[0]", containsString("countries"))
                .body("'errors'[295].'path'[1]", numberMatches(9.0))
                .body("'errors'[295].'path'[2]", containsString("cities"))
                .body("'errors'[295].'path'[3]", numberMatches(279.0))
                .body("'errors'[295].'path'[4]", containsString("location"))
                .body("'errors'[296].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[296].'path'.size()", equalTo(5))
                .body("'errors'[296].'path'[0]", containsString("countries"))
                .body("'errors'[296].'path'[1]", numberMatches(9.0))
                .body("'errors'[296].'path'[2]", containsString("cities"))
                .body("'errors'[296].'path'[3]", numberMatches(279.0))
                .body("'errors'[296].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[297].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[297].'path'.size()", equalTo(5))
                .body("'errors'[297].'path'[0]", containsString("countries"))
                .body("'errors'[297].'path'[1]", numberMatches(9.0))
                .body("'errors'[297].'path'[2]", containsString("cities"))
                .body("'errors'[297].'path'[3]", numberMatches(280.0))
                .body("'errors'[297].'path'[4]", containsString("continent"))
                .body("'errors'[298].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[298].'path'.size()", equalTo(5))
                .body("'errors'[298].'path'[0]", containsString("countries"))
                .body("'errors'[298].'path'[1]", numberMatches(9.0))
                .body("'errors'[298].'path'[2]", containsString("cities"))
                .body("'errors'[298].'path'[3]", numberMatches(280.0))
                .body("'errors'[298].'path'[4]", containsString("location"))
                .body("'errors'[299].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[299].'path'.size()", equalTo(5))
                .body("'errors'[299].'path'[0]", containsString("countries"))
                .body("'errors'[299].'path'[1]", numberMatches(9.0))
                .body("'errors'[299].'path'[2]", containsString("cities"))
                .body("'errors'[299].'path'[3]", numberMatches(280.0))
                .body("'errors'[299].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[300].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[300].'path'.size()", equalTo(5))
                .body("'errors'[300].'path'[0]", containsString("countries"))
                .body("'errors'[300].'path'[1]", numberMatches(9.0))
                .body("'errors'[300].'path'[2]", containsString("cities"))
                .body("'errors'[300].'path'[3]", numberMatches(281.0))
                .body("'errors'[300].'path'[4]", containsString("continent"))
                .body("'errors'[301].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[301].'path'.size()", equalTo(5))
                .body("'errors'[301].'path'[0]", containsString("countries"))
                .body("'errors'[301].'path'[1]", numberMatches(9.0))
                .body("'errors'[301].'path'[2]", containsString("cities"))
                .body("'errors'[301].'path'[3]", numberMatches(281.0))
                .body("'errors'[301].'path'[4]", containsString("location"))
                .body("'errors'[302].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[302].'path'.size()", equalTo(5))
                .body("'errors'[302].'path'[0]", containsString("countries"))
                .body("'errors'[302].'path'[1]", numberMatches(9.0))
                .body("'errors'[302].'path'[2]", containsString("cities"))
                .body("'errors'[302].'path'[3]", numberMatches(281.0))
                .body("'errors'[302].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[303].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[303].'path'.size()", equalTo(5))
                .body("'errors'[303].'path'[0]", containsString("countries"))
                .body("'errors'[303].'path'[1]", numberMatches(9.0))
                .body("'errors'[303].'path'[2]", containsString("cities"))
                .body("'errors'[303].'path'[3]", numberMatches(282.0))
                .body("'errors'[303].'path'[4]", containsString("continent"))
                .body("'errors'[304].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[304].'path'.size()", equalTo(5))
                .body("'errors'[304].'path'[0]", containsString("countries"))
                .body("'errors'[304].'path'[1]", numberMatches(9.0))
                .body("'errors'[304].'path'[2]", containsString("cities"))
                .body("'errors'[304].'path'[3]", numberMatches(282.0))
                .body("'errors'[304].'path'[4]", containsString("location"))
                .body("'errors'[305].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[305].'path'.size()", equalTo(5))
                .body("'errors'[305].'path'[0]", containsString("countries"))
                .body("'errors'[305].'path'[1]", numberMatches(9.0))
                .body("'errors'[305].'path'[2]", containsString("cities"))
                .body("'errors'[305].'path'[3]", numberMatches(282.0))
                .body("'errors'[305].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[306].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[306].'path'.size()", equalTo(5))
                .body("'errors'[306].'path'[0]", containsString("countries"))
                .body("'errors'[306].'path'[1]", numberMatches(9.0))
                .body("'errors'[306].'path'[2]", containsString("cities"))
                .body("'errors'[306].'path'[3]", numberMatches(283.0))
                .body("'errors'[306].'path'[4]", containsString("continent"))
                .body("'errors'[307].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[307].'path'.size()", equalTo(5))
                .body("'errors'[307].'path'[0]", containsString("countries"))
                .body("'errors'[307].'path'[1]", numberMatches(9.0))
                .body("'errors'[307].'path'[2]", containsString("cities"))
                .body("'errors'[307].'path'[3]", numberMatches(283.0))
                .body("'errors'[307].'path'[4]", containsString("location"))
                .body("'errors'[308].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[308].'path'.size()", equalTo(5))
                .body("'errors'[308].'path'[0]", containsString("countries"))
                .body("'errors'[308].'path'[1]", numberMatches(9.0))
                .body("'errors'[308].'path'[2]", containsString("cities"))
                .body("'errors'[308].'path'[3]", numberMatches(283.0))
                .body("'errors'[308].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[309].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[309].'path'.size()", equalTo(5))
                .body("'errors'[309].'path'[0]", containsString("countries"))
                .body("'errors'[309].'path'[1]", numberMatches(9.0))
                .body("'errors'[309].'path'[2]", containsString("cities"))
                .body("'errors'[309].'path'[3]", numberMatches(284.0))
                .body("'errors'[309].'path'[4]", containsString("continent"))
                .body("'errors'[310].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[310].'path'.size()", equalTo(5))
                .body("'errors'[310].'path'[0]", containsString("countries"))
                .body("'errors'[310].'path'[1]", numberMatches(9.0))
                .body("'errors'[310].'path'[2]", containsString("cities"))
                .body("'errors'[310].'path'[3]", numberMatches(284.0))
                .body("'errors'[310].'path'[4]", containsString("location"))
                .body("'errors'[311].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[311].'path'.size()", equalTo(5))
                .body("'errors'[311].'path'[0]", containsString("countries"))
                .body("'errors'[311].'path'[1]", numberMatches(9.0))
                .body("'errors'[311].'path'[2]", containsString("cities"))
                .body("'errors'[311].'path'[3]", numberMatches(284.0))
                .body("'errors'[311].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[312].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[312].'path'.size()", equalTo(5))
                .body("'errors'[312].'path'[0]", containsString("countries"))
                .body("'errors'[312].'path'[1]", numberMatches(9.0))
                .body("'errors'[312].'path'[2]", containsString("cities"))
                .body("'errors'[312].'path'[3]", numberMatches(285.0))
                .body("'errors'[312].'path'[4]", containsString("continent"))
                .body("'errors'[313].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[313].'path'.size()", equalTo(5))
                .body("'errors'[313].'path'[0]", containsString("countries"))
                .body("'errors'[313].'path'[1]", numberMatches(9.0))
                .body("'errors'[313].'path'[2]", containsString("cities"))
                .body("'errors'[313].'path'[3]", numberMatches(285.0))
                .body("'errors'[313].'path'[4]", containsString("location"))
                .body("'errors'[314].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[314].'path'.size()", equalTo(5))
                .body("'errors'[314].'path'[0]", containsString("countries"))
                .body("'errors'[314].'path'[1]", numberMatches(9.0))
                .body("'errors'[314].'path'[2]", containsString("cities"))
                .body("'errors'[314].'path'[3]", numberMatches(285.0))
                .body("'errors'[314].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[315].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[315].'path'.size()", equalTo(5))
                .body("'errors'[315].'path'[0]", containsString("countries"))
                .body("'errors'[315].'path'[1]", numberMatches(9.0))
                .body("'errors'[315].'path'[2]", containsString("cities"))
                .body("'errors'[315].'path'[3]", numberMatches(286.0))
                .body("'errors'[315].'path'[4]", containsString("continent"))
                .body("'errors'[316].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[316].'path'.size()", equalTo(5))
                .body("'errors'[316].'path'[0]", containsString("countries"))
                .body("'errors'[316].'path'[1]", numberMatches(9.0))
                .body("'errors'[316].'path'[2]", containsString("cities"))
                .body("'errors'[316].'path'[3]", numberMatches(286.0))
                .body("'errors'[316].'path'[4]", containsString("location"))
                .body("'errors'[317].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[317].'path'.size()", equalTo(5))
                .body("'errors'[317].'path'[0]", containsString("countries"))
                .body("'errors'[317].'path'[1]", numberMatches(9.0))
                .body("'errors'[317].'path'[2]", containsString("cities"))
                .body("'errors'[317].'path'[3]", numberMatches(286.0))
                .body("'errors'[317].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[318].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[318].'path'.size()", equalTo(5))
                .body("'errors'[318].'path'[0]", containsString("countries"))
                .body("'errors'[318].'path'[1]", numberMatches(9.0))
                .body("'errors'[318].'path'[2]", containsString("cities"))
                .body("'errors'[318].'path'[3]", numberMatches(287.0))
                .body("'errors'[318].'path'[4]", containsString("continent"))
                .body("'errors'[319].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[319].'path'.size()", equalTo(5))
                .body("'errors'[319].'path'[0]", containsString("countries"))
                .body("'errors'[319].'path'[1]", numberMatches(9.0))
                .body("'errors'[319].'path'[2]", containsString("cities"))
                .body("'errors'[319].'path'[3]", numberMatches(287.0))
                .body("'errors'[319].'path'[4]", containsString("location"))
                .body("'errors'[320].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[320].'path'.size()", equalTo(5))
                .body("'errors'[320].'path'[0]", containsString("countries"))
                .body("'errors'[320].'path'[1]", numberMatches(9.0))
                .body("'errors'[320].'path'[2]", containsString("cities"))
                .body("'errors'[320].'path'[3]", numberMatches(287.0))
                .body("'errors'[320].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[321].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[321].'path'.size()", equalTo(5))
                .body("'errors'[321].'path'[0]", containsString("countries"))
                .body("'errors'[321].'path'[1]", numberMatches(9.0))
                .body("'errors'[321].'path'[2]", containsString("cities"))
                .body("'errors'[321].'path'[3]", numberMatches(288.0))
                .body("'errors'[321].'path'[4]", containsString("continent"))
                .body("'errors'[322].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[322].'path'.size()", equalTo(5))
                .body("'errors'[322].'path'[0]", containsString("countries"))
                .body("'errors'[322].'path'[1]", numberMatches(9.0))
                .body("'errors'[322].'path'[2]", containsString("cities"))
                .body("'errors'[322].'path'[3]", numberMatches(288.0))
                .body("'errors'[322].'path'[4]", containsString("location"))
                .body("'errors'[323].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[323].'path'.size()", equalTo(5))
                .body("'errors'[323].'path'[0]", containsString("countries"))
                .body("'errors'[323].'path'[1]", numberMatches(9.0))
                .body("'errors'[323].'path'[2]", containsString("cities"))
                .body("'errors'[323].'path'[3]", numberMatches(288.0))
                .body("'errors'[323].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[324].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[324].'path'.size()", equalTo(5))
                .body("'errors'[324].'path'[0]", containsString("countries"))
                .body("'errors'[324].'path'[1]", numberMatches(9.0))
                .body("'errors'[324].'path'[2]", containsString("cities"))
                .body("'errors'[324].'path'[3]", numberMatches(289.0))
                .body("'errors'[324].'path'[4]", containsString("continent"))
                .body("'errors'[325].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[325].'path'.size()", equalTo(5))
                .body("'errors'[325].'path'[0]", containsString("countries"))
                .body("'errors'[325].'path'[1]", numberMatches(9.0))
                .body("'errors'[325].'path'[2]", containsString("cities"))
                .body("'errors'[325].'path'[3]", numberMatches(289.0))
                .body("'errors'[325].'path'[4]", containsString("location"))
                .body("'errors'[326].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[326].'path'.size()", equalTo(5))
                .body("'errors'[326].'path'[0]", containsString("countries"))
                .body("'errors'[326].'path'[1]", numberMatches(9.0))
                .body("'errors'[326].'path'[2]", containsString("cities"))
                .body("'errors'[326].'path'[3]", numberMatches(289.0))
                .body("'errors'[326].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[327].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[327].'path'.size()", equalTo(5))
                .body("'errors'[327].'path'[0]", containsString("countries"))
                .body("'errors'[327].'path'[1]", numberMatches(9.0))
                .body("'errors'[327].'path'[2]", containsString("cities"))
                .body("'errors'[327].'path'[3]", numberMatches(290.0))
                .body("'errors'[327].'path'[4]", containsString("continent"))
                .body("'errors'[328].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[328].'path'.size()", equalTo(5))
                .body("'errors'[328].'path'[0]", containsString("countries"))
                .body("'errors'[328].'path'[1]", numberMatches(9.0))
                .body("'errors'[328].'path'[2]", containsString("cities"))
                .body("'errors'[328].'path'[3]", numberMatches(290.0))
                .body("'errors'[328].'path'[4]", containsString("location"))
                .body("'errors'[329].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[329].'path'.size()", equalTo(5))
                .body("'errors'[329].'path'[0]", containsString("countries"))
                .body("'errors'[329].'path'[1]", numberMatches(9.0))
                .body("'errors'[329].'path'[2]", containsString("cities"))
                .body("'errors'[329].'path'[3]", numberMatches(290.0))
                .body("'errors'[329].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[330].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[330].'path'.size()", equalTo(5))
                .body("'errors'[330].'path'[0]", containsString("countries"))
                .body("'errors'[330].'path'[1]", numberMatches(9.0))
                .body("'errors'[330].'path'[2]", containsString("cities"))
                .body("'errors'[330].'path'[3]", numberMatches(291.0))
                .body("'errors'[330].'path'[4]", containsString("continent"))
                .body("'errors'[331].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[331].'path'.size()", equalTo(5))
                .body("'errors'[331].'path'[0]", containsString("countries"))
                .body("'errors'[331].'path'[1]", numberMatches(9.0))
                .body("'errors'[331].'path'[2]", containsString("cities"))
                .body("'errors'[331].'path'[3]", numberMatches(291.0))
                .body("'errors'[331].'path'[4]", containsString("location"))
                .body("'errors'[332].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[332].'path'.size()", equalTo(5))
                .body("'errors'[332].'path'[0]", containsString("countries"))
                .body("'errors'[332].'path'[1]", numberMatches(9.0))
                .body("'errors'[332].'path'[2]", containsString("cities"))
                .body("'errors'[332].'path'[3]", numberMatches(291.0))
                .body("'errors'[332].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[333].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[333].'path'.size()", equalTo(5))
                .body("'errors'[333].'path'[0]", containsString("countries"))
                .body("'errors'[333].'path'[1]", numberMatches(9.0))
                .body("'errors'[333].'path'[2]", containsString("cities"))
                .body("'errors'[333].'path'[3]", numberMatches(292.0))
                .body("'errors'[333].'path'[4]", containsString("continent"))
                .body("'errors'[334].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[334].'path'.size()", equalTo(5))
                .body("'errors'[334].'path'[0]", containsString("countries"))
                .body("'errors'[334].'path'[1]", numberMatches(9.0))
                .body("'errors'[334].'path'[2]", containsString("cities"))
                .body("'errors'[334].'path'[3]", numberMatches(292.0))
                .body("'errors'[334].'path'[4]", containsString("location"))
                .body("'errors'[335].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[335].'path'.size()", equalTo(5))
                .body("'errors'[335].'path'[0]", containsString("countries"))
                .body("'errors'[335].'path'[1]", numberMatches(9.0))
                .body("'errors'[335].'path'[2]", containsString("cities"))
                .body("'errors'[335].'path'[3]", numberMatches(292.0))
                .body("'errors'[335].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[336].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[336].'path'.size()", equalTo(5))
                .body("'errors'[336].'path'[0]", containsString("countries"))
                .body("'errors'[336].'path'[1]", numberMatches(9.0))
                .body("'errors'[336].'path'[2]", containsString("cities"))
                .body("'errors'[336].'path'[3]", numberMatches(293.0))
                .body("'errors'[336].'path'[4]", containsString("continent"))
                .body("'errors'[337].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[337].'path'.size()", equalTo(5))
                .body("'errors'[337].'path'[0]", containsString("countries"))
                .body("'errors'[337].'path'[1]", numberMatches(9.0))
                .body("'errors'[337].'path'[2]", containsString("cities"))
                .body("'errors'[337].'path'[3]", numberMatches(293.0))
                .body("'errors'[337].'path'[4]", containsString("location"))
                .body("'errors'[338].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[338].'path'.size()", equalTo(5))
                .body("'errors'[338].'path'[0]", containsString("countries"))
                .body("'errors'[338].'path'[1]", numberMatches(9.0))
                .body("'errors'[338].'path'[2]", containsString("cities"))
                .body("'errors'[338].'path'[3]", numberMatches(293.0))
                .body("'errors'[338].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[339].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[339].'path'.size()", equalTo(5))
                .body("'errors'[339].'path'[0]", containsString("countries"))
                .body("'errors'[339].'path'[1]", numberMatches(9.0))
                .body("'errors'[339].'path'[2]", containsString("cities"))
                .body("'errors'[339].'path'[3]", numberMatches(294.0))
                .body("'errors'[339].'path'[4]", containsString("continent"))
                .body("'errors'[340].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[340].'path'.size()", equalTo(5))
                .body("'errors'[340].'path'[0]", containsString("countries"))
                .body("'errors'[340].'path'[1]", numberMatches(9.0))
                .body("'errors'[340].'path'[2]", containsString("cities"))
                .body("'errors'[340].'path'[3]", numberMatches(294.0))
                .body("'errors'[340].'path'[4]", containsString("location"))
                .body("'errors'[341].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[341].'path'.size()", equalTo(5))
                .body("'errors'[341].'path'[0]", containsString("countries"))
                .body("'errors'[341].'path'[1]", numberMatches(9.0))
                .body("'errors'[341].'path'[2]", containsString("cities"))
                .body("'errors'[341].'path'[3]", numberMatches(294.0))
                .body("'errors'[341].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[342].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[342].'path'.size()", equalTo(5))
                .body("'errors'[342].'path'[0]", containsString("countries"))
                .body("'errors'[342].'path'[1]", numberMatches(9.0))
                .body("'errors'[342].'path'[2]", containsString("cities"))
                .body("'errors'[342].'path'[3]", numberMatches(295.0))
                .body("'errors'[342].'path'[4]", containsString("continent"))
                .body("'errors'[343].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[343].'path'.size()", equalTo(5))
                .body("'errors'[343].'path'[0]", containsString("countries"))
                .body("'errors'[343].'path'[1]", numberMatches(9.0))
                .body("'errors'[343].'path'[2]", containsString("cities"))
                .body("'errors'[343].'path'[3]", numberMatches(295.0))
                .body("'errors'[343].'path'[4]", containsString("location"))
                .body("'errors'[344].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[344].'path'.size()", equalTo(5))
                .body("'errors'[344].'path'[0]", containsString("countries"))
                .body("'errors'[344].'path'[1]", numberMatches(9.0))
                .body("'errors'[344].'path'[2]", containsString("cities"))
                .body("'errors'[344].'path'[3]", numberMatches(295.0))
                .body("'errors'[344].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[345].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[345].'path'.size()", equalTo(5))
                .body("'errors'[345].'path'[0]", containsString("countries"))
                .body("'errors'[345].'path'[1]", numberMatches(9.0))
                .body("'errors'[345].'path'[2]", containsString("cities"))
                .body("'errors'[345].'path'[3]", numberMatches(296.0))
                .body("'errors'[345].'path'[4]", containsString("continent"))
                .body("'errors'[346].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[346].'path'.size()", equalTo(5))
                .body("'errors'[346].'path'[0]", containsString("countries"))
                .body("'errors'[346].'path'[1]", numberMatches(9.0))
                .body("'errors'[346].'path'[2]", containsString("cities"))
                .body("'errors'[346].'path'[3]", numberMatches(296.0))
                .body("'errors'[346].'path'[4]", containsString("location"))
                .body("'errors'[347].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[347].'path'.size()", equalTo(5))
                .body("'errors'[347].'path'[0]", containsString("countries"))
                .body("'errors'[347].'path'[1]", numberMatches(9.0))
                .body("'errors'[347].'path'[2]", containsString("cities"))
                .body("'errors'[347].'path'[3]", numberMatches(296.0))
                .body("'errors'[347].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[348].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[348].'path'.size()", equalTo(5))
                .body("'errors'[348].'path'[0]", containsString("countries"))
                .body("'errors'[348].'path'[1]", numberMatches(9.0))
                .body("'errors'[348].'path'[2]", containsString("cities"))
                .body("'errors'[348].'path'[3]", numberMatches(297.0))
                .body("'errors'[348].'path'[4]", containsString("continent"))
                .body("'errors'[349].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[349].'path'.size()", equalTo(5))
                .body("'errors'[349].'path'[0]", containsString("countries"))
                .body("'errors'[349].'path'[1]", numberMatches(9.0))
                .body("'errors'[349].'path'[2]", containsString("cities"))
                .body("'errors'[349].'path'[3]", numberMatches(297.0))
                .body("'errors'[349].'path'[4]", containsString("location"))
                .body("'errors'[350].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[350].'path'.size()", equalTo(5))
                .body("'errors'[350].'path'[0]", containsString("countries"))
                .body("'errors'[350].'path'[1]", numberMatches(9.0))
                .body("'errors'[350].'path'[2]", containsString("cities"))
                .body("'errors'[350].'path'[3]", numberMatches(297.0))
                .body("'errors'[350].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[351].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[351].'path'.size()", equalTo(5))
                .body("'errors'[351].'path'[0]", containsString("countries"))
                .body("'errors'[351].'path'[1]", numberMatches(9.0))
                .body("'errors'[351].'path'[2]", containsString("cities"))
                .body("'errors'[351].'path'[3]", numberMatches(298.0))
                .body("'errors'[351].'path'[4]", containsString("continent"))
                .body("'errors'[352].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[352].'path'.size()", equalTo(5))
                .body("'errors'[352].'path'[0]", containsString("countries"))
                .body("'errors'[352].'path'[1]", numberMatches(9.0))
                .body("'errors'[352].'path'[2]", containsString("cities"))
                .body("'errors'[352].'path'[3]", numberMatches(298.0))
                .body("'errors'[352].'path'[4]", containsString("location"))
                .body("'errors'[353].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[353].'path'.size()", equalTo(5))
                .body("'errors'[353].'path'[0]", containsString("countries"))
                .body("'errors'[353].'path'[1]", numberMatches(9.0))
                .body("'errors'[353].'path'[2]", containsString("cities"))
                .body("'errors'[353].'path'[3]", numberMatches(298.0))
                .body("'errors'[353].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[354].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[354].'path'.size()", equalTo(5))
                .body("'errors'[354].'path'[0]", containsString("countries"))
                .body("'errors'[354].'path'[1]", numberMatches(9.0))
                .body("'errors'[354].'path'[2]", containsString("cities"))
                .body("'errors'[354].'path'[3]", numberMatches(299.0))
                .body("'errors'[354].'path'[4]", containsString("continent"))
                .body("'errors'[355].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[355].'path'.size()", equalTo(5))
                .body("'errors'[355].'path'[0]", containsString("countries"))
                .body("'errors'[355].'path'[1]", numberMatches(9.0))
                .body("'errors'[355].'path'[2]", containsString("cities"))
                .body("'errors'[355].'path'[3]", numberMatches(299.0))
                .body("'errors'[355].'path'[4]", containsString("location"))
                .body("'errors'[356].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[356].'path'.size()", equalTo(5))
                .body("'errors'[356].'path'[0]", containsString("countries"))
                .body("'errors'[356].'path'[1]", numberMatches(9.0))
                .body("'errors'[356].'path'[2]", containsString("cities"))
                .body("'errors'[356].'path'[3]", numberMatches(299.0))
                .body("'errors'[356].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[357].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[357].'path'.size()", equalTo(5))
                .body("'errors'[357].'path'[0]", containsString("countries"))
                .body("'errors'[357].'path'[1]", numberMatches(9.0))
                .body("'errors'[357].'path'[2]", containsString("cities"))
                .body("'errors'[357].'path'[3]", numberMatches(300.0))
                .body("'errors'[357].'path'[4]", containsString("continent"))
                .body("'errors'[358].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[358].'path'.size()", equalTo(5))
                .body("'errors'[358].'path'[0]", containsString("countries"))
                .body("'errors'[358].'path'[1]", numberMatches(9.0))
                .body("'errors'[358].'path'[2]", containsString("cities"))
                .body("'errors'[358].'path'[3]", numberMatches(300.0))
                .body("'errors'[358].'path'[4]", containsString("location"))
                .body("'errors'[359].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[359].'path'.size()", equalTo(5))
                .body("'errors'[359].'path'[0]", containsString("countries"))
                .body("'errors'[359].'path'[1]", numberMatches(9.0))
                .body("'errors'[359].'path'[2]", containsString("cities"))
                .body("'errors'[359].'path'[3]", numberMatches(300.0))
                .body("'errors'[359].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[360].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[360].'path'.size()", equalTo(5))
                .body("'errors'[360].'path'[0]", containsString("countries"))
                .body("'errors'[360].'path'[1]", numberMatches(9.0))
                .body("'errors'[360].'path'[2]", containsString("cities"))
                .body("'errors'[360].'path'[3]", numberMatches(301.0))
                .body("'errors'[360].'path'[4]", containsString("continent"))
                .body("'errors'[361].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[361].'path'.size()", equalTo(5))
                .body("'errors'[361].'path'[0]", containsString("countries"))
                .body("'errors'[361].'path'[1]", numberMatches(9.0))
                .body("'errors'[361].'path'[2]", containsString("cities"))
                .body("'errors'[361].'path'[3]", numberMatches(301.0))
                .body("'errors'[361].'path'[4]", containsString("location"))
                .body("'errors'[362].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[362].'path'.size()", equalTo(5))
                .body("'errors'[362].'path'[0]", containsString("countries"))
                .body("'errors'[362].'path'[1]", numberMatches(9.0))
                .body("'errors'[362].'path'[2]", containsString("cities"))
                .body("'errors'[362].'path'[3]", numberMatches(301.0))
                .body("'errors'[362].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[363].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[363].'path'.size()", equalTo(5))
                .body("'errors'[363].'path'[0]", containsString("countries"))
                .body("'errors'[363].'path'[1]", numberMatches(9.0))
                .body("'errors'[363].'path'[2]", containsString("cities"))
                .body("'errors'[363].'path'[3]", numberMatches(302.0))
                .body("'errors'[363].'path'[4]", containsString("continent"))
                .body("'errors'[364].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[364].'path'.size()", equalTo(5))
                .body("'errors'[364].'path'[0]", containsString("countries"))
                .body("'errors'[364].'path'[1]", numberMatches(9.0))
                .body("'errors'[364].'path'[2]", containsString("cities"))
                .body("'errors'[364].'path'[3]", numberMatches(302.0))
                .body("'errors'[364].'path'[4]", containsString("location"))
                .body("'errors'[365].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[365].'path'.size()", equalTo(5))
                .body("'errors'[365].'path'[0]", containsString("countries"))
                .body("'errors'[365].'path'[1]", numberMatches(9.0))
                .body("'errors'[365].'path'[2]", containsString("cities"))
                .body("'errors'[365].'path'[3]", numberMatches(302.0))
                .body("'errors'[365].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[366].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[366].'path'.size()", equalTo(5))
                .body("'errors'[366].'path'[0]", containsString("countries"))
                .body("'errors'[366].'path'[1]", numberMatches(9.0))
                .body("'errors'[366].'path'[2]", containsString("cities"))
                .body("'errors'[366].'path'[3]", numberMatches(303.0))
                .body("'errors'[366].'path'[4]", containsString("continent"))
                .body("'errors'[367].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[367].'path'.size()", equalTo(5))
                .body("'errors'[367].'path'[0]", containsString("countries"))
                .body("'errors'[367].'path'[1]", numberMatches(9.0))
                .body("'errors'[367].'path'[2]", containsString("cities"))
                .body("'errors'[367].'path'[3]", numberMatches(303.0))
                .body("'errors'[367].'path'[4]", containsString("location"))
                .body("'errors'[368].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[368].'path'.size()", equalTo(5))
                .body("'errors'[368].'path'[0]", containsString("countries"))
                .body("'errors'[368].'path'[1]", numberMatches(9.0))
                .body("'errors'[368].'path'[2]", containsString("cities"))
                .body("'errors'[368].'path'[3]", numberMatches(303.0))
                .body("'errors'[368].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[369].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[369].'path'.size()", equalTo(5))
                .body("'errors'[369].'path'[0]", containsString("countries"))
                .body("'errors'[369].'path'[1]", numberMatches(9.0))
                .body("'errors'[369].'path'[2]", containsString("cities"))
                .body("'errors'[369].'path'[3]", numberMatches(304.0))
                .body("'errors'[369].'path'[4]", containsString("continent"))
                .body("'errors'[370].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[370].'path'.size()", equalTo(5))
                .body("'errors'[370].'path'[0]", containsString("countries"))
                .body("'errors'[370].'path'[1]", numberMatches(9.0))
                .body("'errors'[370].'path'[2]", containsString("cities"))
                .body("'errors'[370].'path'[3]", numberMatches(304.0))
                .body("'errors'[370].'path'[4]", containsString("location"))
                .body("'errors'[371].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[371].'path'.size()", equalTo(5))
                .body("'errors'[371].'path'[0]", containsString("countries"))
                .body("'errors'[371].'path'[1]", numberMatches(9.0))
                .body("'errors'[371].'path'[2]", containsString("cities"))
                .body("'errors'[371].'path'[3]", numberMatches(304.0))
                .body("'errors'[371].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[372].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[372].'path'.size()", equalTo(5))
                .body("'errors'[372].'path'[0]", containsString("countries"))
                .body("'errors'[372].'path'[1]", numberMatches(9.0))
                .body("'errors'[372].'path'[2]", containsString("cities"))
                .body("'errors'[372].'path'[3]", numberMatches(305.0))
                .body("'errors'[372].'path'[4]", containsString("continent"))
                .body("'errors'[373].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[373].'path'.size()", equalTo(5))
                .body("'errors'[373].'path'[0]", containsString("countries"))
                .body("'errors'[373].'path'[1]", numberMatches(9.0))
                .body("'errors'[373].'path'[2]", containsString("cities"))
                .body("'errors'[373].'path'[3]", numberMatches(305.0))
                .body("'errors'[373].'path'[4]", containsString("location"))
                .body("'errors'[374].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[374].'path'.size()", equalTo(5))
                .body("'errors'[374].'path'[0]", containsString("countries"))
                .body("'errors'[374].'path'[1]", numberMatches(9.0))
                .body("'errors'[374].'path'[2]", containsString("cities"))
                .body("'errors'[374].'path'[3]", numberMatches(305.0))
                .body("'errors'[374].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[375].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[375].'path'.size()", equalTo(5))
                .body("'errors'[375].'path'[0]", containsString("countries"))
                .body("'errors'[375].'path'[1]", numberMatches(9.0))
                .body("'errors'[375].'path'[2]", containsString("cities"))
                .body("'errors'[375].'path'[3]", numberMatches(306.0))
                .body("'errors'[375].'path'[4]", containsString("continent"))
                .body("'errors'[376].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[376].'path'.size()", equalTo(5))
                .body("'errors'[376].'path'[0]", containsString("countries"))
                .body("'errors'[376].'path'[1]", numberMatches(9.0))
                .body("'errors'[376].'path'[2]", containsString("cities"))
                .body("'errors'[376].'path'[3]", numberMatches(306.0))
                .body("'errors'[376].'path'[4]", containsString("location"))
                .body("'errors'[377].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[377].'path'.size()", equalTo(5))
                .body("'errors'[377].'path'[0]", containsString("countries"))
                .body("'errors'[377].'path'[1]", numberMatches(9.0))
                .body("'errors'[377].'path'[2]", containsString("cities"))
                .body("'errors'[377].'path'[3]", numberMatches(306.0))
                .body("'errors'[377].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[378].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[378].'path'.size()", equalTo(5))
                .body("'errors'[378].'path'[0]", containsString("countries"))
                .body("'errors'[378].'path'[1]", numberMatches(9.0))
                .body("'errors'[378].'path'[2]", containsString("cities"))
                .body("'errors'[378].'path'[3]", numberMatches(307.0))
                .body("'errors'[378].'path'[4]", containsString("continent"))
                .body("'errors'[379].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[379].'path'.size()", equalTo(5))
                .body("'errors'[379].'path'[0]", containsString("countries"))
                .body("'errors'[379].'path'[1]", numberMatches(9.0))
                .body("'errors'[379].'path'[2]", containsString("cities"))
                .body("'errors'[379].'path'[3]", numberMatches(307.0))
                .body("'errors'[379].'path'[4]", containsString("location"))
                .body("'errors'[380].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[380].'path'.size()", equalTo(5))
                .body("'errors'[380].'path'[0]", containsString("countries"))
                .body("'errors'[380].'path'[1]", numberMatches(9.0))
                .body("'errors'[380].'path'[2]", containsString("cities"))
                .body("'errors'[380].'path'[3]", numberMatches(307.0))
                .body("'errors'[380].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[381].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[381].'path'.size()", equalTo(5))
                .body("'errors'[381].'path'[0]", containsString("countries"))
                .body("'errors'[381].'path'[1]", numberMatches(9.0))
                .body("'errors'[381].'path'[2]", containsString("cities"))
                .body("'errors'[381].'path'[3]", numberMatches(308.0))
                .body("'errors'[381].'path'[4]", containsString("continent"))
                .body("'errors'[382].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[382].'path'.size()", equalTo(5))
                .body("'errors'[382].'path'[0]", containsString("countries"))
                .body("'errors'[382].'path'[1]", numberMatches(9.0))
                .body("'errors'[382].'path'[2]", containsString("cities"))
                .body("'errors'[382].'path'[3]", numberMatches(308.0))
                .body("'errors'[382].'path'[4]", containsString("location"))
                .body("'errors'[383].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[383].'path'.size()", equalTo(5))
                .body("'errors'[383].'path'[0]", containsString("countries"))
                .body("'errors'[383].'path'[1]", numberMatches(9.0))
                .body("'errors'[383].'path'[2]", containsString("cities"))
                .body("'errors'[383].'path'[3]", numberMatches(308.0))
                .body("'errors'[383].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[384].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[384].'path'.size()", equalTo(5))
                .body("'errors'[384].'path'[0]", containsString("countries"))
                .body("'errors'[384].'path'[1]", numberMatches(9.0))
                .body("'errors'[384].'path'[2]", containsString("cities"))
                .body("'errors'[384].'path'[3]", numberMatches(309.0))
                .body("'errors'[384].'path'[4]", containsString("continent"))
                .body("'errors'[385].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[385].'path'.size()", equalTo(5))
                .body("'errors'[385].'path'[0]", containsString("countries"))
                .body("'errors'[385].'path'[1]", numberMatches(9.0))
                .body("'errors'[385].'path'[2]", containsString("cities"))
                .body("'errors'[385].'path'[3]", numberMatches(309.0))
                .body("'errors'[385].'path'[4]", containsString("location"))
                .body("'errors'[386].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[386].'path'.size()", equalTo(5))
                .body("'errors'[386].'path'[0]", containsString("countries"))
                .body("'errors'[386].'path'[1]", numberMatches(9.0))
                .body("'errors'[386].'path'[2]", containsString("cities"))
                .body("'errors'[386].'path'[3]", numberMatches(309.0))
                .body("'errors'[386].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[387].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[387].'path'.size()", equalTo(5))
                .body("'errors'[387].'path'[0]", containsString("countries"))
                .body("'errors'[387].'path'[1]", numberMatches(9.0))
                .body("'errors'[387].'path'[2]", containsString("cities"))
                .body("'errors'[387].'path'[3]", numberMatches(310.0))
                .body("'errors'[387].'path'[4]", containsString("continent"))
                .body("'errors'[388].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[388].'path'.size()", equalTo(5))
                .body("'errors'[388].'path'[0]", containsString("countries"))
                .body("'errors'[388].'path'[1]", numberMatches(9.0))
                .body("'errors'[388].'path'[2]", containsString("cities"))
                .body("'errors'[388].'path'[3]", numberMatches(310.0))
                .body("'errors'[388].'path'[4]", containsString("location"))
                .body("'errors'[389].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[389].'path'.size()", equalTo(5))
                .body("'errors'[389].'path'[0]", containsString("countries"))
                .body("'errors'[389].'path'[1]", numberMatches(9.0))
                .body("'errors'[389].'path'[2]", containsString("cities"))
                .body("'errors'[389].'path'[3]", numberMatches(310.0))
                .body("'errors'[389].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[390].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[390].'path'.size()", equalTo(5))
                .body("'errors'[390].'path'[0]", containsString("countries"))
                .body("'errors'[390].'path'[1]", numberMatches(9.0))
                .body("'errors'[390].'path'[2]", containsString("cities"))
                .body("'errors'[390].'path'[3]", numberMatches(311.0))
                .body("'errors'[390].'path'[4]", containsString("continent"))
                .body("'errors'[391].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[391].'path'.size()", equalTo(5))
                .body("'errors'[391].'path'[0]", containsString("countries"))
                .body("'errors'[391].'path'[1]", numberMatches(9.0))
                .body("'errors'[391].'path'[2]", containsString("cities"))
                .body("'errors'[391].'path'[3]", numberMatches(311.0))
                .body("'errors'[391].'path'[4]", containsString("location"))
                .body("'errors'[392].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[392].'path'.size()", equalTo(5))
                .body("'errors'[392].'path'[0]", containsString("countries"))
                .body("'errors'[392].'path'[1]", numberMatches(9.0))
                .body("'errors'[392].'path'[2]", containsString("cities"))
                .body("'errors'[392].'path'[3]", numberMatches(311.0))
                .body("'errors'[392].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[393].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[393].'path'.size()", equalTo(5))
                .body("'errors'[393].'path'[0]", containsString("countries"))
                .body("'errors'[393].'path'[1]", numberMatches(9.0))
                .body("'errors'[393].'path'[2]", containsString("cities"))
                .body("'errors'[393].'path'[3]", numberMatches(312.0))
                .body("'errors'[393].'path'[4]", containsString("continent"))
                .body("'errors'[394].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[394].'path'.size()", equalTo(5))
                .body("'errors'[394].'path'[0]", containsString("countries"))
                .body("'errors'[394].'path'[1]", numberMatches(9.0))
                .body("'errors'[394].'path'[2]", containsString("cities"))
                .body("'errors'[394].'path'[3]", numberMatches(312.0))
                .body("'errors'[394].'path'[4]", containsString("location"))
                .body("'errors'[395].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[395].'path'.size()", equalTo(5))
                .body("'errors'[395].'path'[0]", containsString("countries"))
                .body("'errors'[395].'path'[1]", numberMatches(9.0))
                .body("'errors'[395].'path'[2]", containsString("cities"))
                .body("'errors'[395].'path'[3]", numberMatches(312.0))
                .body("'errors'[395].'path'[4]", containsString("timeZoneDST"))
                .body("'errors'[396].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[396].'path'.size()", equalTo(3))
                .body("'errors'[396].'path'[0]", containsString("countries"))
                .body("'errors'[396].'path'[1]", numberMatches(9.0))
                .body("'errors'[396].'path'[2]", containsString("languages"))
                .body("'errors'[397].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[397].'path'.size()", equalTo(3))
                .body("'errors'[397].'path'[0]", containsString("countries"))
                .body("'errors'[397].'path'[1]", numberMatches(9.0))
                .body("'errors'[397].'path'[2]", containsString("location"))
                .body("'errors'[398].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[398].'path'.size()", equalTo(3))
                .body("'errors'[398].'path'[0]", containsString("countries"))
                .body("'errors'[398].'path'[1]", numberMatches(10.0))
                .body("'errors'[398].'path'[2]", containsString("capital"))
                .body("'errors'[399].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[399].'path'.size()", equalTo(3))
                .body("'errors'[399].'path'[0]", containsString("countries"))
                .body("'errors'[399].'path'[1]", numberMatches(10.0))
                .body("'errors'[399].'path'[2]", containsString("cities"))
                .body("'errors'[400].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[400].'path'.size()", equalTo(3))
                .body("'errors'[400].'path'[0]", containsString("countries"))
                .body("'errors'[400].'path'[1]", numberMatches(10.0))
                .body("'errors'[400].'path'[2]", containsString("languages"))
                .body("'errors'[401].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[401].'path'.size()", equalTo(3))
                .body("'errors'[401].'path'[0]", containsString("countries"))
                .body("'errors'[401].'path'[1]", numberMatches(10.0))
                .body("'errors'[401].'path'[2]", containsString("location"))
                .body("'errors'[402].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[402].'path'.size()", equalTo(3))
                .body("'errors'[402].'path'[0]", containsString("countries"))
                .body("'errors'[402].'path'[1]", numberMatches(11.0))
                .body("'errors'[402].'path'[2]", containsString("capital"))
                .body("'errors'[403].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[403].'path'.size()", equalTo(3))
                .body("'errors'[403].'path'[0]", containsString("countries"))
                .body("'errors'[403].'path'[1]", numberMatches(11.0))
                .body("'errors'[403].'path'[2]", containsString("cities"))
                .body("'errors'[404].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[404].'path'.size()", equalTo(3))
                .body("'errors'[404].'path'[0]", containsString("countries"))
                .body("'errors'[404].'path'[1]", numberMatches(11.0))
                .body("'errors'[404].'path'[2]", containsString("languages"))
                .body("'errors'[405].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[405].'path'.size()", equalTo(3))
                .body("'errors'[405].'path'[0]", containsString("countries"))
                .body("'errors'[405].'path'[1]", numberMatches(11.0))
                .body("'errors'[405].'path'[2]", containsString("location"))
                .body("'errors'[406].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[406].'path'.size()", equalTo(3))
                .body("'errors'[406].'path'[0]", containsString("countries"))
                .body("'errors'[406].'path'[1]", numberMatches(12.0))
                .body("'errors'[406].'path'[2]", containsString("capital"))
                .body("'errors'[407].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[407].'path'.size()", equalTo(3))
                .body("'errors'[407].'path'[0]", containsString("countries"))
                .body("'errors'[407].'path'[1]", numberMatches(12.0))
                .body("'errors'[407].'path'[2]", containsString("cities"))
                .body("'errors'[408].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[408].'path'.size()", equalTo(3))
                .body("'errors'[408].'path'[0]", containsString("countries"))
                .body("'errors'[408].'path'[1]", numberMatches(12.0))
                .body("'errors'[408].'path'[2]", containsString("languages"))
                .body("'errors'[409].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[409].'path'.size()", equalTo(3))
                .body("'errors'[409].'path'[0]", containsString("countries"))
                .body("'errors'[409].'path'[1]", numberMatches(12.0))
                .body("'errors'[409].'path'[2]", containsString("location"))
                .body("'errors'[410].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[410].'path'.size()", equalTo(3))
                .body("'errors'[410].'path'[0]", containsString("countries"))
                .body("'errors'[410].'path'[1]", numberMatches(13.0))
                .body("'errors'[410].'path'[2]", containsString("capital"))
                .body("'errors'[411].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[411].'path'.size()", equalTo(3))
                .body("'errors'[411].'path'[0]", containsString("countries"))
                .body("'errors'[411].'path'[1]", numberMatches(13.0))
                .body("'errors'[411].'path'[2]", containsString("cities"))
                .body("'errors'[412].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[412].'path'.size()", equalTo(3))
                .body("'errors'[412].'path'[0]", containsString("countries"))
                .body("'errors'[412].'path'[1]", numberMatches(13.0))
                .body("'errors'[412].'path'[2]", containsString("languages"))
                .body("'errors'[413].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[413].'path'.size()", equalTo(3))
                .body("'errors'[413].'path'[0]", containsString("countries"))
                .body("'errors'[413].'path'[1]", numberMatches(13.0))
                .body("'errors'[413].'path'[2]", containsString("location"))
                .body("'errors'[414].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[414].'path'.size()", equalTo(3))
                .body("'errors'[414].'path'[0]", containsString("countries"))
                .body("'errors'[414].'path'[1]", numberMatches(14.0))
                .body("'errors'[414].'path'[2]", containsString("capital"))
                .body("'errors'[415].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[415].'path'.size()", equalTo(3))
                .body("'errors'[415].'path'[0]", containsString("countries"))
                .body("'errors'[415].'path'[1]", numberMatches(14.0))
                .body("'errors'[415].'path'[2]", containsString("cities"))
                .body("'errors'[416].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[416].'path'.size()", equalTo(3))
                .body("'errors'[416].'path'[0]", containsString("countries"))
                .body("'errors'[416].'path'[1]", numberMatches(14.0))
                .body("'errors'[416].'path'[2]", containsString("languages"))
                .body("'errors'[417].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[417].'path'.size()", equalTo(3))
                .body("'errors'[417].'path'[0]", containsString("countries"))
                .body("'errors'[417].'path'[1]", numberMatches(14.0))
                .body("'errors'[417].'path'[2]", containsString("location"))
                .body("'errors'[418].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[418].'path'.size()", equalTo(3))
                .body("'errors'[418].'path'[0]", containsString("countries"))
                .body("'errors'[418].'path'[1]", numberMatches(15.0))
                .body("'errors'[418].'path'[2]", containsString("capital"))
                .body("'errors'[419].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[419].'path'.size()", equalTo(3))
                .body("'errors'[419].'path'[0]", containsString("countries"))
                .body("'errors'[419].'path'[1]", numberMatches(15.0))
                .body("'errors'[419].'path'[2]", containsString("cities"))
                .body("'errors'[420].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[420].'path'.size()", equalTo(3))
                .body("'errors'[420].'path'[0]", containsString("countries"))
                .body("'errors'[420].'path'[1]", numberMatches(15.0))
                .body("'errors'[420].'path'[2]", containsString("languages"))
                .body("'errors'[421].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[421].'path'.size()", equalTo(3))
                .body("'errors'[421].'path'[0]", containsString("countries"))
                .body("'errors'[421].'path'[1]", numberMatches(15.0))
                .body("'errors'[421].'path'[2]", containsString("location"))
                .body("'errors'[422].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[422].'path'.size()", equalTo(3))
                .body("'errors'[422].'path'[0]", containsString("countries"))
                .body("'errors'[422].'path'[1]", numberMatches(16.0))
                .body("'errors'[422].'path'[2]", containsString("capital"))
                .body("'errors'[423].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[423].'path'.size()", equalTo(3))
                .body("'errors'[423].'path'[0]", containsString("countries"))
                .body("'errors'[423].'path'[1]", numberMatches(16.0))
                .body("'errors'[423].'path'[2]", containsString("cities"))
                .body("'errors'[424].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[424].'path'.size()", equalTo(3))
                .body("'errors'[424].'path'[0]", containsString("countries"))
                .body("'errors'[424].'path'[1]", numberMatches(16.0))
                .body("'errors'[424].'path'[2]", containsString("languages"))
                .body("'errors'[425].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[425].'path'.size()", equalTo(3))
                .body("'errors'[425].'path'[0]", containsString("countries"))
                .body("'errors'[425].'path'[1]", numberMatches(16.0))
                .body("'errors'[425].'path'[2]", containsString("location"))
                .body("'errors'[426].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[426].'path'.size()", equalTo(3))
                .body("'errors'[426].'path'[0]", containsString("countries"))
                .body("'errors'[426].'path'[1]", numberMatches(17.0))
                .body("'errors'[426].'path'[2]", containsString("capital"))
                .body("'errors'[427].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[427].'path'.size()", equalTo(3))
                .body("'errors'[427].'path'[0]", containsString("countries"))
                .body("'errors'[427].'path'[1]", numberMatches(17.0))
                .body("'errors'[427].'path'[2]", containsString("cities"))
                .body("'errors'[428].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[428].'path'.size()", equalTo(3))
                .body("'errors'[428].'path'[0]", containsString("countries"))
                .body("'errors'[428].'path'[1]", numberMatches(17.0))
                .body("'errors'[428].'path'[2]", containsString("languages"))
                .body("'errors'[429].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[429].'path'.size()", equalTo(3))
                .body("'errors'[429].'path'[0]", containsString("countries"))
                .body("'errors'[429].'path'[1]", numberMatches(17.0))
                .body("'errors'[429].'path'[2]", containsString("location"))
                .body("'errors'[430].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[430].'path'.size()", equalTo(3))
                .body("'errors'[430].'path'[0]", containsString("countries"))
                .body("'errors'[430].'path'[1]", numberMatches(18.0))
                .body("'errors'[430].'path'[2]", containsString("capital"))
                .body("'errors'[431].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[431].'path'.size()", equalTo(3))
                .body("'errors'[431].'path'[0]", containsString("countries"))
                .body("'errors'[431].'path'[1]", numberMatches(18.0))
                .body("'errors'[431].'path'[2]", containsString("cities"))
                .body("'errors'[432].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[432].'path'.size()", equalTo(3))
                .body("'errors'[432].'path'[0]", containsString("countries"))
                .body("'errors'[432].'path'[1]", numberMatches(18.0))
                .body("'errors'[432].'path'[2]", containsString("languages"))
                .body("'errors'[433].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[433].'path'.size()", equalTo(3))
                .body("'errors'[433].'path'[0]", containsString("countries"))
                .body("'errors'[433].'path'[1]", numberMatches(18.0))
                .body("'errors'[433].'path'[2]", containsString("location"))
                .body("'errors'[434].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[434].'path'.size()", equalTo(3))
                .body("'errors'[434].'path'[0]", containsString("countries"))
                .body("'errors'[434].'path'[1]", numberMatches(19.0))
                .body("'errors'[434].'path'[2]", containsString("capital"))
                .body("'errors'[435].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[435].'path'.size()", equalTo(3))
                .body("'errors'[435].'path'[0]", containsString("countries"))
                .body("'errors'[435].'path'[1]", numberMatches(19.0))
                .body("'errors'[435].'path'[2]", containsString("cities"))
                .body("'errors'[436].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[436].'path'.size()", equalTo(3))
                .body("'errors'[436].'path'[0]", containsString("countries"))
                .body("'errors'[436].'path'[1]", numberMatches(19.0))
                .body("'errors'[436].'path'[2]", containsString("languages"))
                .body("'errors'[437].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[437].'path'.size()", equalTo(3))
                .body("'errors'[437].'path'[0]", containsString("countries"))
                .body("'errors'[437].'path'[1]", numberMatches(19.0))
                .body("'errors'[437].'path'[2]", containsString("location"))
                .body("'errors'[438].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[438].'path'.size()", equalTo(3))
                .body("'errors'[438].'path'[0]", containsString("countries"))
                .body("'errors'[438].'path'[1]", numberMatches(20.0))
                .body("'errors'[438].'path'[2]", containsString("capital"))
                .body("'errors'[439].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[439].'path'.size()", equalTo(3))
                .body("'errors'[439].'path'[0]", containsString("countries"))
                .body("'errors'[439].'path'[1]", numberMatches(20.0))
                .body("'errors'[439].'path'[2]", containsString("cities"))
                .body("'errors'[440].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[440].'path'.size()", equalTo(3))
                .body("'errors'[440].'path'[0]", containsString("countries"))
                .body("'errors'[440].'path'[1]", numberMatches(20.0))
                .body("'errors'[440].'path'[2]", containsString("languages"))
                .body("'errors'[441].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[441].'path'.size()", equalTo(3))
                .body("'errors'[441].'path'[0]", containsString("countries"))
                .body("'errors'[441].'path'[1]", numberMatches(20.0))
                .body("'errors'[441].'path'[2]", containsString("location"))
                .body("'errors'[442].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[442].'path'.size()", equalTo(3))
                .body("'errors'[442].'path'[0]", containsString("countries"))
                .body("'errors'[442].'path'[1]", numberMatches(21.0))
                .body("'errors'[442].'path'[2]", containsString("capital"))
                .body("'errors'[443].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[443].'path'.size()", equalTo(3))
                .body("'errors'[443].'path'[0]", containsString("countries"))
                .body("'errors'[443].'path'[1]", numberMatches(21.0))
                .body("'errors'[443].'path'[2]", containsString("cities"))
                .body("'errors'[444].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[444].'path'.size()", equalTo(3))
                .body("'errors'[444].'path'[0]", containsString("countries"))
                .body("'errors'[444].'path'[1]", numberMatches(21.0))
                .body("'errors'[444].'path'[2]", containsString("languages"))
                .body("'errors'[445].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[445].'path'.size()", equalTo(3))
                .body("'errors'[445].'path'[0]", containsString("countries"))
                .body("'errors'[445].'path'[1]", numberMatches(21.0))
                .body("'errors'[445].'path'[2]", containsString("location"))
                .body("'errors'[446].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[446].'path'.size()", equalTo(3))
                .body("'errors'[446].'path'[0]", containsString("countries"))
                .body("'errors'[446].'path'[1]", numberMatches(22.0))
                .body("'errors'[446].'path'[2]", containsString("capital"))
                .body("'errors'[447].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[447].'path'.size()", equalTo(3))
                .body("'errors'[447].'path'[0]", containsString("countries"))
                .body("'errors'[447].'path'[1]", numberMatches(22.0))
                .body("'errors'[447].'path'[2]", containsString("cities"))
                .body("'errors'[448].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[448].'path'.size()", equalTo(3))
                .body("'errors'[448].'path'[0]", containsString("countries"))
                .body("'errors'[448].'path'[1]", numberMatches(22.0))
                .body("'errors'[448].'path'[2]", containsString("languages"))
                .body("'errors'[449].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[449].'path'.size()", equalTo(3))
                .body("'errors'[449].'path'[0]", containsString("countries"))
                .body("'errors'[449].'path'[1]", numberMatches(22.0))
                .body("'errors'[449].'path'[2]", containsString("location"))
                .body("'errors'[450].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[450].'path'.size()", equalTo(3))
                .body("'errors'[450].'path'[0]", containsString("countries"))
                .body("'errors'[450].'path'[1]", numberMatches(23.0))
                .body("'errors'[450].'path'[2]", containsString("capital"))
                .body("'errors'[451].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[451].'path'.size()", equalTo(3))
                .body("'errors'[451].'path'[0]", containsString("countries"))
                .body("'errors'[451].'path'[1]", numberMatches(23.0))
                .body("'errors'[451].'path'[2]", containsString("cities"))
                .body("'errors'[452].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[452].'path'.size()", equalTo(3))
                .body("'errors'[452].'path'[0]", containsString("countries"))
                .body("'errors'[452].'path'[1]", numberMatches(23.0))
                .body("'errors'[452].'path'[2]", containsString("languages"))
                .body("'errors'[453].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[453].'path'.size()", equalTo(3))
                .body("'errors'[453].'path'[0]", containsString("countries"))
                .body("'errors'[453].'path'[1]", numberMatches(23.0))
                .body("'errors'[453].'path'[2]", containsString("location"))
                .body("'errors'[454].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[454].'path'.size()", equalTo(3))
                .body("'errors'[454].'path'[0]", containsString("countries"))
                .body("'errors'[454].'path'[1]", numberMatches(24.0))
                .body("'errors'[454].'path'[2]", containsString("capital"))
                .body("'errors'[455].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[455].'path'.size()", equalTo(3))
                .body("'errors'[455].'path'[0]", containsString("countries"))
                .body("'errors'[455].'path'[1]", numberMatches(24.0))
                .body("'errors'[455].'path'[2]", containsString("cities"))
                .body("'errors'[456].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[456].'path'.size()", equalTo(3))
                .body("'errors'[456].'path'[0]", containsString("countries"))
                .body("'errors'[456].'path'[1]", numberMatches(24.0))
                .body("'errors'[456].'path'[2]", containsString("languages"))
                .body("'errors'[457].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[457].'path'.size()", equalTo(3))
                .body("'errors'[457].'path'[0]", containsString("countries"))
                .body("'errors'[457].'path'[1]", numberMatches(24.0))
                .body("'errors'[457].'path'[2]", containsString("location"))
                .body("'errors'[458].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[458].'path'.size()", equalTo(3))
                .body("'errors'[458].'path'[0]", containsString("countries"))
                .body("'errors'[458].'path'[1]", numberMatches(25.0))
                .body("'errors'[458].'path'[2]", containsString("capital"))
                .body("'errors'[459].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[459].'path'.size()", equalTo(3))
                .body("'errors'[459].'path'[0]", containsString("countries"))
                .body("'errors'[459].'path'[1]", numberMatches(25.0))
                .body("'errors'[459].'path'[2]", containsString("cities"))
                .body("'errors'[460].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[460].'path'.size()", equalTo(3))
                .body("'errors'[460].'path'[0]", containsString("countries"))
                .body("'errors'[460].'path'[1]", numberMatches(25.0))
                .body("'errors'[460].'path'[2]", containsString("languages"))
                .body("'errors'[461].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[461].'path'.size()", equalTo(3))
                .body("'errors'[461].'path'[0]", containsString("countries"))
                .body("'errors'[461].'path'[1]", numberMatches(25.0))
                .body("'errors'[461].'path'[2]", containsString("location"))
                .body("'errors'[462].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[462].'path'.size()", equalTo(3))
                .body("'errors'[462].'path'[0]", containsString("countries"))
                .body("'errors'[462].'path'[1]", numberMatches(26.0))
                .body("'errors'[462].'path'[2]", containsString("capital"))
                .body("'errors'[463].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[463].'path'.size()", equalTo(3))
                .body("'errors'[463].'path'[0]", containsString("countries"))
                .body("'errors'[463].'path'[1]", numberMatches(26.0))
                .body("'errors'[463].'path'[2]", containsString("cities"))
                .body("'errors'[464].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[464].'path'.size()", equalTo(3))
                .body("'errors'[464].'path'[0]", containsString("countries"))
                .body("'errors'[464].'path'[1]", numberMatches(26.0))
                .body("'errors'[464].'path'[2]", containsString("languages"))
                .body("'errors'[465].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[465].'path'.size()", equalTo(3))
                .body("'errors'[465].'path'[0]", containsString("countries"))
                .body("'errors'[465].'path'[1]", numberMatches(26.0))
                .body("'errors'[465].'path'[2]", containsString("location"))
                .body("'errors'[466].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[466].'path'.size()", equalTo(3))
                .body("'errors'[466].'path'[0]", containsString("countries"))
                .body("'errors'[466].'path'[1]", numberMatches(27.0))
                .body("'errors'[466].'path'[2]", containsString("capital"))
                .body("'errors'[467].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[467].'path'.size()", equalTo(3))
                .body("'errors'[467].'path'[0]", containsString("countries"))
                .body("'errors'[467].'path'[1]", numberMatches(27.0))
                .body("'errors'[467].'path'[2]", containsString("cities"))
                .body("'errors'[468].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[468].'path'.size()", equalTo(3))
                .body("'errors'[468].'path'[0]", containsString("countries"))
                .body("'errors'[468].'path'[1]", numberMatches(27.0))
                .body("'errors'[468].'path'[2]", containsString("languages"))
                .body("'errors'[469].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[469].'path'.size()", equalTo(3))
                .body("'errors'[469].'path'[0]", containsString("countries"))
                .body("'errors'[469].'path'[1]", numberMatches(27.0))
                .body("'errors'[469].'path'[2]", containsString("location"))
                .body("'errors'[470].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[470].'path'.size()", equalTo(3))
                .body("'errors'[470].'path'[0]", containsString("countries"))
                .body("'errors'[470].'path'[1]", numberMatches(28.0))
                .body("'errors'[470].'path'[2]", containsString("capital"))
                .body("'errors'[471].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[471].'path'.size()", equalTo(3))
                .body("'errors'[471].'path'[0]", containsString("countries"))
                .body("'errors'[471].'path'[1]", numberMatches(28.0))
                .body("'errors'[471].'path'[2]", containsString("cities"))
                .body("'errors'[472].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[472].'path'.size()", equalTo(3))
                .body("'errors'[472].'path'[0]", containsString("countries"))
                .body("'errors'[472].'path'[1]", numberMatches(28.0))
                .body("'errors'[472].'path'[2]", containsString("languages"))
                .body("'errors'[473].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[473].'path'.size()", equalTo(3))
                .body("'errors'[473].'path'[0]", containsString("countries"))
                .body("'errors'[473].'path'[1]", numberMatches(28.0))
                .body("'errors'[473].'path'[2]", containsString("location"))
                .body("'errors'[474].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[474].'path'.size()", equalTo(3))
                .body("'errors'[474].'path'[0]", containsString("countries"))
                .body("'errors'[474].'path'[1]", numberMatches(29.0))
                .body("'errors'[474].'path'[2]", containsString("capital"))
                .body("'errors'[475].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[475].'path'.size()", equalTo(3))
                .body("'errors'[475].'path'[0]", containsString("countries"))
                .body("'errors'[475].'path'[1]", numberMatches(29.0))
                .body("'errors'[475].'path'[2]", containsString("cities"))
                .body("'errors'[476].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[476].'path'.size()", equalTo(3))
                .body("'errors'[476].'path'[0]", containsString("countries"))
                .body("'errors'[476].'path'[1]", numberMatches(29.0))
                .body("'errors'[476].'path'[2]", containsString("languages"))
                .body("'errors'[477].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[477].'path'.size()", equalTo(3))
                .body("'errors'[477].'path'[0]", containsString("countries"))
                .body("'errors'[477].'path'[1]", numberMatches(29.0))
                .body("'errors'[477].'path'[2]", containsString("location"))
                .body("'errors'[478].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[478].'path'.size()", equalTo(3))
                .body("'errors'[478].'path'[0]", containsString("countries"))
                .body("'errors'[478].'path'[1]", numberMatches(30.0))
                .body("'errors'[478].'path'[2]", containsString("capital"))
                .body("'errors'[479].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[479].'path'.size()", equalTo(3))
                .body("'errors'[479].'path'[0]", containsString("countries"))
                .body("'errors'[479].'path'[1]", numberMatches(30.0))
                .body("'errors'[479].'path'[2]", containsString("cities"))
                .body("'errors'[480].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[480].'path'.size()", equalTo(3))
                .body("'errors'[480].'path'[0]", containsString("countries"))
                .body("'errors'[480].'path'[1]", numberMatches(30.0))
                .body("'errors'[480].'path'[2]", containsString("languages"))
                .body("'errors'[481].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[481].'path'.size()", equalTo(3))
                .body("'errors'[481].'path'[0]", containsString("countries"))
                .body("'errors'[481].'path'[1]", numberMatches(30.0))
                .body("'errors'[481].'path'[2]", containsString("location"))
                .body("'errors'[482].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[482].'path'.size()", equalTo(3))
                .body("'errors'[482].'path'[0]", containsString("countries"))
                .body("'errors'[482].'path'[1]", numberMatches(31.0))
                .body("'errors'[482].'path'[2]", containsString("capital"))
                .body("'errors'[483].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[483].'path'.size()", equalTo(3))
                .body("'errors'[483].'path'[0]", containsString("countries"))
                .body("'errors'[483].'path'[1]", numberMatches(31.0))
                .body("'errors'[483].'path'[2]", containsString("cities"))
                .body("'errors'[484].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[484].'path'.size()", equalTo(3))
                .body("'errors'[484].'path'[0]", containsString("countries"))
                .body("'errors'[484].'path'[1]", numberMatches(31.0))
                .body("'errors'[484].'path'[2]", containsString("languages"))
                .body("'errors'[485].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[485].'path'.size()", equalTo(3))
                .body("'errors'[485].'path'[0]", containsString("countries"))
                .body("'errors'[485].'path'[1]", numberMatches(31.0))
                .body("'errors'[485].'path'[2]", containsString("location"))
                .body("'errors'[486].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[486].'path'.size()", equalTo(3))
                .body("'errors'[486].'path'[0]", containsString("countries"))
                .body("'errors'[486].'path'[1]", numberMatches(32.0))
                .body("'errors'[486].'path'[2]", containsString("capital"))
                .body("'errors'[487].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[487].'path'.size()", equalTo(3))
                .body("'errors'[487].'path'[0]", containsString("countries"))
                .body("'errors'[487].'path'[1]", numberMatches(32.0))
                .body("'errors'[487].'path'[2]", containsString("cities"))
                .body("'errors'[488].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[488].'path'.size()", equalTo(3))
                .body("'errors'[488].'path'[0]", containsString("countries"))
                .body("'errors'[488].'path'[1]", numberMatches(32.0))
                .body("'errors'[488].'path'[2]", containsString("languages"))
                .body("'errors'[489].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[489].'path'.size()", equalTo(3))
                .body("'errors'[489].'path'[0]", containsString("countries"))
                .body("'errors'[489].'path'[1]", numberMatches(32.0))
                .body("'errors'[489].'path'[2]", containsString("location"))
                .body("'errors'[490].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[490].'path'.size()", equalTo(3))
                .body("'errors'[490].'path'[0]", containsString("countries"))
                .body("'errors'[490].'path'[1]", numberMatches(33.0))
                .body("'errors'[490].'path'[2]", containsString("capital"))
                .body("'errors'[491].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[491].'path'.size()", equalTo(3))
                .body("'errors'[491].'path'[0]", containsString("countries"))
                .body("'errors'[491].'path'[1]", numberMatches(33.0))
                .body("'errors'[491].'path'[2]", containsString("cities"))
                .body("'errors'[492].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[492].'path'.size()", equalTo(3))
                .body("'errors'[492].'path'[0]", containsString("countries"))
                .body("'errors'[492].'path'[1]", numberMatches(33.0))
                .body("'errors'[492].'path'[2]", containsString("languages"))
                .body("'errors'[493].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[493].'path'.size()", equalTo(3))
                .body("'errors'[493].'path'[0]", containsString("countries"))
                .body("'errors'[493].'path'[1]", numberMatches(33.0))
                .body("'errors'[493].'path'[2]", containsString("location"))
                .body("'errors'[494].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[494].'path'.size()", equalTo(3))
                .body("'errors'[494].'path'[0]", containsString("countries"))
                .body("'errors'[494].'path'[1]", numberMatches(34.0))
                .body("'errors'[494].'path'[2]", containsString("capital"))
                .body("'errors'[495].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[495].'path'.size()", equalTo(3))
                .body("'errors'[495].'path'[0]", containsString("countries"))
                .body("'errors'[495].'path'[1]", numberMatches(34.0))
                .body("'errors'[495].'path'[2]", containsString("cities"))
                .body("'errors'[496].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[496].'path'.size()", equalTo(3))
                .body("'errors'[496].'path'[0]", containsString("countries"))
                .body("'errors'[496].'path'[1]", numberMatches(34.0))
                .body("'errors'[496].'path'[2]", containsString("languages"))
                .body("'errors'[497].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[497].'path'.size()", equalTo(3))
                .body("'errors'[497].'path'[0]", containsString("countries"))
                .body("'errors'[497].'path'[1]", numberMatches(34.0))
                .body("'errors'[497].'path'[2]", containsString("location"))
                .body("'errors'[498].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[498].'path'.size()", equalTo(3))
                .body("'errors'[498].'path'[0]", containsString("countries"))
                .body("'errors'[498].'path'[1]", numberMatches(35.0))
                .body("'errors'[498].'path'[2]", containsString("capital"))
                .body("'errors'[499].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[499].'path'.size()", equalTo(3))
                .body("'errors'[499].'path'[0]", containsString("countries"))
                .body("'errors'[499].'path'[1]", numberMatches(35.0))
                .body("'errors'[499].'path'[2]", containsString("cities"))
                .body("'errors'[500].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[500].'path'.size()", equalTo(3))
                .body("'errors'[500].'path'[0]", containsString("countries"))
                .body("'errors'[500].'path'[1]", numberMatches(35.0))
                .body("'errors'[500].'path'[2]", containsString("languages"))
                .body("'errors'[501].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[501].'path'.size()", equalTo(3))
                .body("'errors'[501].'path'[0]", containsString("countries"))
                .body("'errors'[501].'path'[1]", numberMatches(35.0))
                .body("'errors'[501].'path'[2]", containsString("location"))
                .body("'errors'[502].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[502].'path'.size()", equalTo(3))
                .body("'errors'[502].'path'[0]", containsString("countries"))
                .body("'errors'[502].'path'[1]", numberMatches(36.0))
                .body("'errors'[502].'path'[2]", containsString("capital"))
                .body("'errors'[503].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[503].'path'.size()", equalTo(3))
                .body("'errors'[503].'path'[0]", containsString("countries"))
                .body("'errors'[503].'path'[1]", numberMatches(36.0))
                .body("'errors'[503].'path'[2]", containsString("cities"))
                .body("'errors'[504].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[504].'path'.size()", equalTo(3))
                .body("'errors'[504].'path'[0]", containsString("countries"))
                .body("'errors'[504].'path'[1]", numberMatches(36.0))
                .body("'errors'[504].'path'[2]", containsString("languages"))
                .body("'errors'[505].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[505].'path'.size()", equalTo(3))
                .body("'errors'[505].'path'[0]", containsString("countries"))
                .body("'errors'[505].'path'[1]", numberMatches(36.0))
                .body("'errors'[505].'path'[2]", containsString("location"))
                .body("'errors'[506].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[506].'path'.size()", equalTo(3))
                .body("'errors'[506].'path'[0]", containsString("countries"))
                .body("'errors'[506].'path'[1]", numberMatches(37.0))
                .body("'errors'[506].'path'[2]", containsString("capital"))
                .body("'errors'[507].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[507].'path'.size()", equalTo(3))
                .body("'errors'[507].'path'[0]", containsString("countries"))
                .body("'errors'[507].'path'[1]", numberMatches(37.0))
                .body("'errors'[507].'path'[2]", containsString("cities"))
                .body("'errors'[508].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[508].'path'.size()", equalTo(3))
                .body("'errors'[508].'path'[0]", containsString("countries"))
                .body("'errors'[508].'path'[1]", numberMatches(37.0))
                .body("'errors'[508].'path'[2]", containsString("languages"))
                .body("'errors'[509].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[509].'path'.size()", equalTo(3))
                .body("'errors'[509].'path'[0]", containsString("countries"))
                .body("'errors'[509].'path'[1]", numberMatches(37.0))
                .body("'errors'[509].'path'[2]", containsString("location"))
                .body("'errors'[510].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[510].'path'.size()", equalTo(3))
                .body("'errors'[510].'path'[0]", containsString("countries"))
                .body("'errors'[510].'path'[1]", numberMatches(38.0))
                .body("'errors'[510].'path'[2]", containsString("capital"))
                .body("'errors'[511].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[511].'path'.size()", equalTo(3))
                .body("'errors'[511].'path'[0]", containsString("countries"))
                .body("'errors'[511].'path'[1]", numberMatches(38.0))
                .body("'errors'[511].'path'[2]", containsString("cities"))
                .body("'errors'[512].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[512].'path'.size()", equalTo(3))
                .body("'errors'[512].'path'[0]", containsString("countries"))
                .body("'errors'[512].'path'[1]", numberMatches(38.0))
                .body("'errors'[512].'path'[2]", containsString("languages"))
                .body("'errors'[513].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[513].'path'.size()", equalTo(3))
                .body("'errors'[513].'path'[0]", containsString("countries"))
                .body("'errors'[513].'path'[1]", numberMatches(38.0))
                .body("'errors'[513].'path'[2]", containsString("location"))
                .body("'errors'[514].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[514].'path'.size()", equalTo(3))
                .body("'errors'[514].'path'[0]", containsString("countries"))
                .body("'errors'[514].'path'[1]", numberMatches(39.0))
                .body("'errors'[514].'path'[2]", containsString("capital"))
                .body("'errors'[515].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[515].'path'.size()", equalTo(3))
                .body("'errors'[515].'path'[0]", containsString("countries"))
                .body("'errors'[515].'path'[1]", numberMatches(39.0))
                .body("'errors'[515].'path'[2]", containsString("cities"))
                .body("'errors'[516].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[516].'path'.size()", equalTo(3))
                .body("'errors'[516].'path'[0]", containsString("countries"))
                .body("'errors'[516].'path'[1]", numberMatches(39.0))
                .body("'errors'[516].'path'[2]", containsString("languages"))
                .body("'errors'[517].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[517].'path'.size()", equalTo(3))
                .body("'errors'[517].'path'[0]", containsString("countries"))
                .body("'errors'[517].'path'[1]", numberMatches(39.0))
                .body("'errors'[517].'path'[2]", containsString("location"))
                .body("'errors'[518].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[518].'path'.size()", equalTo(3))
                .body("'errors'[518].'path'[0]", containsString("countries"))
                .body("'errors'[518].'path'[1]", numberMatches(40.0))
                .body("'errors'[518].'path'[2]", containsString("capital"))
                .body("'errors'[519].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[519].'path'.size()", equalTo(3))
                .body("'errors'[519].'path'[0]", containsString("countries"))
                .body("'errors'[519].'path'[1]", numberMatches(40.0))
                .body("'errors'[519].'path'[2]", containsString("cities"))
                .body("'errors'[520].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[520].'path'.size()", equalTo(3))
                .body("'errors'[520].'path'[0]", containsString("countries"))
                .body("'errors'[520].'path'[1]", numberMatches(40.0))
                .body("'errors'[520].'path'[2]", containsString("languages"))
                .body("'errors'[521].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[521].'path'.size()", equalTo(3))
                .body("'errors'[521].'path'[0]", containsString("countries"))
                .body("'errors'[521].'path'[1]", numberMatches(40.0))
                .body("'errors'[521].'path'[2]", containsString("location"))
                .body("'errors'[522].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[522].'path'.size()", equalTo(3))
                .body("'errors'[522].'path'[0]", containsString("countries"))
                .body("'errors'[522].'path'[1]", numberMatches(41.0))
                .body("'errors'[522].'path'[2]", containsString("capital"))
                .body("'errors'[523].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[523].'path'.size()", equalTo(3))
                .body("'errors'[523].'path'[0]", containsString("countries"))
                .body("'errors'[523].'path'[1]", numberMatches(41.0))
                .body("'errors'[523].'path'[2]", containsString("cities"))
                .body("'errors'[524].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[524].'path'.size()", equalTo(3))
                .body("'errors'[524].'path'[0]", containsString("countries"))
                .body("'errors'[524].'path'[1]", numberMatches(41.0))
                .body("'errors'[524].'path'[2]", containsString("languages"))
                .body("'errors'[525].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[525].'path'.size()", equalTo(3))
                .body("'errors'[525].'path'[0]", containsString("countries"))
                .body("'errors'[525].'path'[1]", numberMatches(41.0))
                .body("'errors'[525].'path'[2]", containsString("location"))
                .body("'errors'[526].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[526].'path'.size()", equalTo(3))
                .body("'errors'[526].'path'[0]", containsString("countries"))
                .body("'errors'[526].'path'[1]", numberMatches(42.0))
                .body("'errors'[526].'path'[2]", containsString("capital"))
                .body("'errors'[527].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[527].'path'.size()", equalTo(3))
                .body("'errors'[527].'path'[0]", containsString("countries"))
                .body("'errors'[527].'path'[1]", numberMatches(42.0))
                .body("'errors'[527].'path'[2]", containsString("cities"))
                .body("'errors'[528].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[528].'path'.size()", equalTo(3))
                .body("'errors'[528].'path'[0]", containsString("countries"))
                .body("'errors'[528].'path'[1]", numberMatches(42.0))
                .body("'errors'[528].'path'[2]", containsString("languages"))
                .body("'errors'[529].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[529].'path'.size()", equalTo(3))
                .body("'errors'[529].'path'[0]", containsString("countries"))
                .body("'errors'[529].'path'[1]", numberMatches(42.0))
                .body("'errors'[529].'path'[2]", containsString("location"))
                .body("'errors'[530].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[530].'path'.size()", equalTo(3))
                .body("'errors'[530].'path'[0]", containsString("countries"))
                .body("'errors'[530].'path'[1]", numberMatches(43.0))
                .body("'errors'[530].'path'[2]", containsString("capital"))
                .body("'errors'[531].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[531].'path'.size()", equalTo(3))
                .body("'errors'[531].'path'[0]", containsString("countries"))
                .body("'errors'[531].'path'[1]", numberMatches(43.0))
                .body("'errors'[531].'path'[2]", containsString("cities"))
                .body("'errors'[532].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[532].'path'.size()", equalTo(3))
                .body("'errors'[532].'path'[0]", containsString("countries"))
                .body("'errors'[532].'path'[1]", numberMatches(43.0))
                .body("'errors'[532].'path'[2]", containsString("languages"))
                .body("'errors'[533].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[533].'path'.size()", equalTo(3))
                .body("'errors'[533].'path'[0]", containsString("countries"))
                .body("'errors'[533].'path'[1]", numberMatches(43.0))
                .body("'errors'[533].'path'[2]", containsString("location"))
                .body("'errors'[534].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[534].'path'.size()", equalTo(3))
                .body("'errors'[534].'path'[0]", containsString("countries"))
                .body("'errors'[534].'path'[1]", numberMatches(44.0))
                .body("'errors'[534].'path'[2]", containsString("capital"))
                .body("'errors'[535].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[535].'path'.size()", equalTo(3))
                .body("'errors'[535].'path'[0]", containsString("countries"))
                .body("'errors'[535].'path'[1]", numberMatches(44.0))
                .body("'errors'[535].'path'[2]", containsString("cities"))
                .body("'errors'[536].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[536].'path'.size()", equalTo(3))
                .body("'errors'[536].'path'[0]", containsString("countries"))
                .body("'errors'[536].'path'[1]", numberMatches(44.0))
                .body("'errors'[536].'path'[2]", containsString("languages"))
                .body("'errors'[537].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[537].'path'.size()", equalTo(3))
                .body("'errors'[537].'path'[0]", containsString("countries"))
                .body("'errors'[537].'path'[1]", numberMatches(44.0))
                .body("'errors'[537].'path'[2]", containsString("location"))
                .body("'errors'[538].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[538].'path'.size()", equalTo(3))
                .body("'errors'[538].'path'[0]", containsString("countries"))
                .body("'errors'[538].'path'[1]", numberMatches(45.0))
                .body("'errors'[538].'path'[2]", containsString("capital"))
                .body("'errors'[539].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[539].'path'.size()", equalTo(3))
                .body("'errors'[539].'path'[0]", containsString("countries"))
                .body("'errors'[539].'path'[1]", numberMatches(45.0))
                .body("'errors'[539].'path'[2]", containsString("cities"))
                .body("'errors'[540].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[540].'path'.size()", equalTo(3))
                .body("'errors'[540].'path'[0]", containsString("countries"))
                .body("'errors'[540].'path'[1]", numberMatches(45.0))
                .body("'errors'[540].'path'[2]", containsString("languages"))
                .body("'errors'[541].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[541].'path'.size()", equalTo(3))
                .body("'errors'[541].'path'[0]", containsString("countries"))
                .body("'errors'[541].'path'[1]", numberMatches(45.0))
                .body("'errors'[541].'path'[2]", containsString("location"))
                .body("'errors'[542].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[542].'path'.size()", equalTo(3))
                .body("'errors'[542].'path'[0]", containsString("countries"))
                .body("'errors'[542].'path'[1]", numberMatches(46.0))
                .body("'errors'[542].'path'[2]", containsString("capital"))
                .body("'errors'[543].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[543].'path'.size()", equalTo(3))
                .body("'errors'[543].'path'[0]", containsString("countries"))
                .body("'errors'[543].'path'[1]", numberMatches(46.0))
                .body("'errors'[543].'path'[2]", containsString("cities"))
                .body("'errors'[544].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[544].'path'.size()", equalTo(3))
                .body("'errors'[544].'path'[0]", containsString("countries"))
                .body("'errors'[544].'path'[1]", numberMatches(46.0))
                .body("'errors'[544].'path'[2]", containsString("languages"))
                .body("'errors'[545].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[545].'path'.size()", equalTo(3))
                .body("'errors'[545].'path'[0]", containsString("countries"))
                .body("'errors'[545].'path'[1]", numberMatches(46.0))
                .body("'errors'[545].'path'[2]", containsString("location"))
                .body("'errors'[546].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[546].'path'.size()", equalTo(3))
                .body("'errors'[546].'path'[0]", containsString("countries"))
                .body("'errors'[546].'path'[1]", numberMatches(47.0))
                .body("'errors'[546].'path'[2]", containsString("capital"))
                .body("'errors'[547].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[547].'path'.size()", equalTo(3))
                .body("'errors'[547].'path'[0]", containsString("countries"))
                .body("'errors'[547].'path'[1]", numberMatches(47.0))
                .body("'errors'[547].'path'[2]", containsString("cities"))
                .body("'errors'[548].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[548].'path'.size()", equalTo(3))
                .body("'errors'[548].'path'[0]", containsString("countries"))
                .body("'errors'[548].'path'[1]", numberMatches(47.0))
                .body("'errors'[548].'path'[2]", containsString("languages"))
                .body("'errors'[549].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[549].'path'.size()", equalTo(3))
                .body("'errors'[549].'path'[0]", containsString("countries"))
                .body("'errors'[549].'path'[1]", numberMatches(47.0))
                .body("'errors'[549].'path'[2]", containsString("location"))
                .body("'errors'[550].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[550].'path'.size()", equalTo(3))
                .body("'errors'[550].'path'[0]", containsString("countries"))
                .body("'errors'[550].'path'[1]", numberMatches(48.0))
                .body("'errors'[550].'path'[2]", containsString("capital"))
                .body("'errors'[551].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[551].'path'.size()", equalTo(3))
                .body("'errors'[551].'path'[0]", containsString("countries"))
                .body("'errors'[551].'path'[1]", numberMatches(48.0))
                .body("'errors'[551].'path'[2]", containsString("cities"))
                .body("'errors'[552].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[552].'path'.size()", equalTo(3))
                .body("'errors'[552].'path'[0]", containsString("countries"))
                .body("'errors'[552].'path'[1]", numberMatches(48.0))
                .body("'errors'[552].'path'[2]", containsString("languages"))
                .body("'errors'[553].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[553].'path'.size()", equalTo(3))
                .body("'errors'[553].'path'[0]", containsString("countries"))
                .body("'errors'[553].'path'[1]", numberMatches(48.0))
                .body("'errors'[553].'path'[2]", containsString("location"))
                .body("'errors'[554].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[554].'path'.size()", equalTo(3))
                .body("'errors'[554].'path'[0]", containsString("countries"))
                .body("'errors'[554].'path'[1]", numberMatches(49.0))
                .body("'errors'[554].'path'[2]", containsString("capital"))
                .body("'errors'[555].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[555].'path'.size()", equalTo(3))
                .body("'errors'[555].'path'[0]", containsString("countries"))
                .body("'errors'[555].'path'[1]", numberMatches(49.0))
                .body("'errors'[555].'path'[2]", containsString("cities"))
                .body("'errors'[556].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[556].'path'.size()", equalTo(3))
                .body("'errors'[556].'path'[0]", containsString("countries"))
                .body("'errors'[556].'path'[1]", numberMatches(49.0))
                .body("'errors'[556].'path'[2]", containsString("languages"))
                .body("'errors'[557].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[557].'path'.size()", equalTo(3))
                .body("'errors'[557].'path'[0]", containsString("countries"))
                .body("'errors'[557].'path'[1]", numberMatches(49.0))
                .body("'errors'[557].'path'[2]", containsString("location"))
                .body("'errors'[558].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[558].'path'.size()", equalTo(3))
                .body("'errors'[558].'path'[0]", containsString("countries"))
                .body("'errors'[558].'path'[1]", numberMatches(50.0))
                .body("'errors'[558].'path'[2]", containsString("capital"))
                .body("'errors'[559].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[559].'path'.size()", equalTo(3))
                .body("'errors'[559].'path'[0]", containsString("countries"))
                .body("'errors'[559].'path'[1]", numberMatches(50.0))
                .body("'errors'[559].'path'[2]", containsString("cities"))
                .body("'errors'[560].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[560].'path'.size()", equalTo(3))
                .body("'errors'[560].'path'[0]", containsString("countries"))
                .body("'errors'[560].'path'[1]", numberMatches(50.0))
                .body("'errors'[560].'path'[2]", containsString("languages"))
                .body("'errors'[561].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[561].'path'.size()", equalTo(3))
                .body("'errors'[561].'path'[0]", containsString("countries"))
                .body("'errors'[561].'path'[1]", numberMatches(50.0))
                .body("'errors'[561].'path'[2]", containsString("location"))
                .body("'errors'[562].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[562].'path'.size()", equalTo(3))
                .body("'errors'[562].'path'[0]", containsString("countries"))
                .body("'errors'[562].'path'[1]", numberMatches(51.0))
                .body("'errors'[562].'path'[2]", containsString("capital"))
                .body("'errors'[563].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[563].'path'.size()", equalTo(3))
                .body("'errors'[563].'path'[0]", containsString("countries"))
                .body("'errors'[563].'path'[1]", numberMatches(51.0))
                .body("'errors'[563].'path'[2]", containsString("cities"))
                .body("'errors'[564].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[564].'path'.size()", equalTo(3))
                .body("'errors'[564].'path'[0]", containsString("countries"))
                .body("'errors'[564].'path'[1]", numberMatches(51.0))
                .body("'errors'[564].'path'[2]", containsString("languages"))
                .body("'errors'[565].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[565].'path'.size()", equalTo(3))
                .body("'errors'[565].'path'[0]", containsString("countries"))
                .body("'errors'[565].'path'[1]", numberMatches(51.0))
                .body("'errors'[565].'path'[2]", containsString("location"))
                .body("'errors'[566].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[566].'path'.size()", equalTo(3))
                .body("'errors'[566].'path'[0]", containsString("countries"))
                .body("'errors'[566].'path'[1]", numberMatches(52.0))
                .body("'errors'[566].'path'[2]", containsString("capital"))
                .body("'errors'[567].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[567].'path'.size()", equalTo(3))
                .body("'errors'[567].'path'[0]", containsString("countries"))
                .body("'errors'[567].'path'[1]", numberMatches(52.0))
                .body("'errors'[567].'path'[2]", containsString("cities"))
                .body("'errors'[568].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[568].'path'.size()", equalTo(3))
                .body("'errors'[568].'path'[0]", containsString("countries"))
                .body("'errors'[568].'path'[1]", numberMatches(52.0))
                .body("'errors'[568].'path'[2]", containsString("languages"))
                .body("'errors'[569].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[569].'path'.size()", equalTo(3))
                .body("'errors'[569].'path'[0]", containsString("countries"))
                .body("'errors'[569].'path'[1]", numberMatches(52.0))
                .body("'errors'[569].'path'[2]", containsString("location"))
                .body("'errors'[570].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[570].'path'.size()", equalTo(3))
                .body("'errors'[570].'path'[0]", containsString("countries"))
                .body("'errors'[570].'path'[1]", numberMatches(53.0))
                .body("'errors'[570].'path'[2]", containsString("capital"))
                .body("'errors'[571].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[571].'path'.size()", equalTo(3))
                .body("'errors'[571].'path'[0]", containsString("countries"))
                .body("'errors'[571].'path'[1]", numberMatches(53.0))
                .body("'errors'[571].'path'[2]", containsString("cities"))
                .body("'errors'[572].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[572].'path'.size()", equalTo(3))
                .body("'errors'[572].'path'[0]", containsString("countries"))
                .body("'errors'[572].'path'[1]", numberMatches(53.0))
                .body("'errors'[572].'path'[2]", containsString("languages"))
                .body("'errors'[573].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[573].'path'.size()", equalTo(3))
                .body("'errors'[573].'path'[0]", containsString("countries"))
                .body("'errors'[573].'path'[1]", numberMatches(53.0))
                .body("'errors'[573].'path'[2]", containsString("location"))
                .body("'errors'[574].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[574].'path'.size()", equalTo(3))
                .body("'errors'[574].'path'[0]", containsString("countries"))
                .body("'errors'[574].'path'[1]", numberMatches(54.0))
                .body("'errors'[574].'path'[2]", containsString("capital"))
                .body("'errors'[575].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[575].'path'.size()", equalTo(3))
                .body("'errors'[575].'path'[0]", containsString("countries"))
                .body("'errors'[575].'path'[1]", numberMatches(54.0))
                .body("'errors'[575].'path'[2]", containsString("cities"))
                .body("'errors'[576].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[576].'path'.size()", equalTo(3))
                .body("'errors'[576].'path'[0]", containsString("countries"))
                .body("'errors'[576].'path'[1]", numberMatches(54.0))
                .body("'errors'[576].'path'[2]", containsString("languages"))
                .body("'errors'[577].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[577].'path'.size()", equalTo(3))
                .body("'errors'[577].'path'[0]", containsString("countries"))
                .body("'errors'[577].'path'[1]", numberMatches(54.0))
                .body("'errors'[577].'path'[2]", containsString("location"))
                .body("'errors'[578].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[578].'path'.size()", equalTo(3))
                .body("'errors'[578].'path'[0]", containsString("countries"))
                .body("'errors'[578].'path'[1]", numberMatches(55.0))
                .body("'errors'[578].'path'[2]", containsString("capital"))
                .body("'errors'[579].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[579].'path'.size()", equalTo(3))
                .body("'errors'[579].'path'[0]", containsString("countries"))
                .body("'errors'[579].'path'[1]", numberMatches(55.0))
                .body("'errors'[579].'path'[2]", containsString("cities"))
                .body("'errors'[580].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[580].'path'.size()", equalTo(3))
                .body("'errors'[580].'path'[0]", containsString("countries"))
                .body("'errors'[580].'path'[1]", numberMatches(55.0))
                .body("'errors'[580].'path'[2]", containsString("languages"))
                .body("'errors'[581].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[581].'path'.size()", equalTo(3))
                .body("'errors'[581].'path'[0]", containsString("countries"))
                .body("'errors'[581].'path'[1]", numberMatches(55.0))
                .body("'errors'[581].'path'[2]", containsString("location"))
                .body("'errors'[582].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[582].'path'.size()", equalTo(3))
                .body("'errors'[582].'path'[0]", containsString("countries"))
                .body("'errors'[582].'path'[1]", numberMatches(56.0))
                .body("'errors'[582].'path'[2]", containsString("capital"))
                .body("'errors'[583].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[583].'path'.size()", equalTo(3))
                .body("'errors'[583].'path'[0]", containsString("countries"))
                .body("'errors'[583].'path'[1]", numberMatches(56.0))
                .body("'errors'[583].'path'[2]", containsString("cities"))
                .body("'errors'[584].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[584].'path'.size()", equalTo(3))
                .body("'errors'[584].'path'[0]", containsString("countries"))
                .body("'errors'[584].'path'[1]", numberMatches(56.0))
                .body("'errors'[584].'path'[2]", containsString("languages"))
                .body("'errors'[585].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[585].'path'.size()", equalTo(3))
                .body("'errors'[585].'path'[0]", containsString("countries"))
                .body("'errors'[585].'path'[1]", numberMatches(56.0))
                .body("'errors'[585].'path'[2]", containsString("location"))
                .body("'errors'[586].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[586].'path'.size()", equalTo(3))
                .body("'errors'[586].'path'[0]", containsString("countries"))
                .body("'errors'[586].'path'[1]", numberMatches(57.0))
                .body("'errors'[586].'path'[2]", containsString("capital"))
                .body("'errors'[587].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[587].'path'.size()", equalTo(3))
                .body("'errors'[587].'path'[0]", containsString("countries"))
                .body("'errors'[587].'path'[1]", numberMatches(57.0))
                .body("'errors'[587].'path'[2]", containsString("cities"))
                .body("'errors'[588].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[588].'path'.size()", equalTo(3))
                .body("'errors'[588].'path'[0]", containsString("countries"))
                .body("'errors'[588].'path'[1]", numberMatches(57.0))
                .body("'errors'[588].'path'[2]", containsString("languages"))
                .body("'errors'[589].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[589].'path'.size()", equalTo(3))
                .body("'errors'[589].'path'[0]", containsString("countries"))
                .body("'errors'[589].'path'[1]", numberMatches(57.0))
                .body("'errors'[589].'path'[2]", containsString("location"))
                .body("'errors'[590].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[590].'path'.size()", equalTo(3))
                .body("'errors'[590].'path'[0]", containsString("countries"))
                .body("'errors'[590].'path'[1]", numberMatches(58.0))
                .body("'errors'[590].'path'[2]", containsString("capital"))
                .body("'errors'[591].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[591].'path'.size()", equalTo(3))
                .body("'errors'[591].'path'[0]", containsString("countries"))
                .body("'errors'[591].'path'[1]", numberMatches(58.0))
                .body("'errors'[591].'path'[2]", containsString("cities"))
                .body("'errors'[592].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[592].'path'.size()", equalTo(3))
                .body("'errors'[592].'path'[0]", containsString("countries"))
                .body("'errors'[592].'path'[1]", numberMatches(58.0))
                .body("'errors'[592].'path'[2]", containsString("languages"))
                .body("'errors'[593].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[593].'path'.size()", equalTo(3))
                .body("'errors'[593].'path'[0]", containsString("countries"))
                .body("'errors'[593].'path'[1]", numberMatches(58.0))
                .body("'errors'[593].'path'[2]", containsString("location"))
                .body("'errors'[594].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[594].'path'.size()", equalTo(3))
                .body("'errors'[594].'path'[0]", containsString("countries"))
                .body("'errors'[594].'path'[1]", numberMatches(59.0))
                .body("'errors'[594].'path'[2]", containsString("capital"))
                .body("'errors'[595].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[595].'path'.size()", equalTo(3))
                .body("'errors'[595].'path'[0]", containsString("countries"))
                .body("'errors'[595].'path'[1]", numberMatches(59.0))
                .body("'errors'[595].'path'[2]", containsString("cities"))
                .body("'errors'[596].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[596].'path'.size()", equalTo(3))
                .body("'errors'[596].'path'[0]", containsString("countries"))
                .body("'errors'[596].'path'[1]", numberMatches(59.0))
                .body("'errors'[596].'path'[2]", containsString("languages"))
                .body("'errors'[597].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[597].'path'.size()", equalTo(3))
                .body("'errors'[597].'path'[0]", containsString("countries"))
                .body("'errors'[597].'path'[1]", numberMatches(59.0))
                .body("'errors'[597].'path'[2]", containsString("location"))
                .body("'errors'[598].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[598].'path'.size()", equalTo(3))
                .body("'errors'[598].'path'[0]", containsString("countries"))
                .body("'errors'[598].'path'[1]", numberMatches(60.0))
                .body("'errors'[598].'path'[2]", containsString("capital"))
                .body("'errors'[599].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[599].'path'.size()", equalTo(3))
                .body("'errors'[599].'path'[0]", containsString("countries"))
                .body("'errors'[599].'path'[1]", numberMatches(60.0))
                .body("'errors'[599].'path'[2]", containsString("cities"))
                .body("'errors'[600].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[600].'path'.size()", equalTo(3))
                .body("'errors'[600].'path'[0]", containsString("countries"))
                .body("'errors'[600].'path'[1]", numberMatches(60.0))
                .body("'errors'[600].'path'[2]", containsString("languages"))
                .body("'errors'[601].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[601].'path'.size()", equalTo(3))
                .body("'errors'[601].'path'[0]", containsString("countries"))
                .body("'errors'[601].'path'[1]", numberMatches(60.0))
                .body("'errors'[601].'path'[2]", containsString("location"))
                .body("'errors'[602].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[602].'path'.size()", equalTo(3))
                .body("'errors'[602].'path'[0]", containsString("countries"))
                .body("'errors'[602].'path'[1]", numberMatches(61.0))
                .body("'errors'[602].'path'[2]", containsString("capital"))
                .body("'errors'[603].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[603].'path'.size()", equalTo(3))
                .body("'errors'[603].'path'[0]", containsString("countries"))
                .body("'errors'[603].'path'[1]", numberMatches(61.0))
                .body("'errors'[603].'path'[2]", containsString("cities"))
                .body("'errors'[604].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[604].'path'.size()", equalTo(3))
                .body("'errors'[604].'path'[0]", containsString("countries"))
                .body("'errors'[604].'path'[1]", numberMatches(61.0))
                .body("'errors'[604].'path'[2]", containsString("languages"))
                .body("'errors'[605].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[605].'path'.size()", equalTo(3))
                .body("'errors'[605].'path'[0]", containsString("countries"))
                .body("'errors'[605].'path'[1]", numberMatches(61.0))
                .body("'errors'[605].'path'[2]", containsString("location"))
                .body("'errors'[606].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[606].'path'.size()", equalTo(3))
                .body("'errors'[606].'path'[0]", containsString("countries"))
                .body("'errors'[606].'path'[1]", numberMatches(62.0))
                .body("'errors'[606].'path'[2]", containsString("capital"))
                .body("'errors'[607].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[607].'path'.size()", equalTo(3))
                .body("'errors'[607].'path'[0]", containsString("countries"))
                .body("'errors'[607].'path'[1]", numberMatches(62.0))
                .body("'errors'[607].'path'[2]", containsString("cities"))
                .body("'errors'[608].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[608].'path'.size()", equalTo(3))
                .body("'errors'[608].'path'[0]", containsString("countries"))
                .body("'errors'[608].'path'[1]", numberMatches(62.0))
                .body("'errors'[608].'path'[2]", containsString("languages"))
                .body("'errors'[609].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[609].'path'.size()", equalTo(3))
                .body("'errors'[609].'path'[0]", containsString("countries"))
                .body("'errors'[609].'path'[1]", numberMatches(62.0))
                .body("'errors'[609].'path'[2]", containsString("location"))
                .body("'errors'[610].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[610].'path'.size()", equalTo(3))
                .body("'errors'[610].'path'[0]", containsString("countries"))
                .body("'errors'[610].'path'[1]", numberMatches(63.0))
                .body("'errors'[610].'path'[2]", containsString("capital"))
                .body("'errors'[611].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[611].'path'.size()", equalTo(3))
                .body("'errors'[611].'path'[0]", containsString("countries"))
                .body("'errors'[611].'path'[1]", numberMatches(63.0))
                .body("'errors'[611].'path'[2]", containsString("cities"))
                .body("'errors'[612].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[612].'path'.size()", equalTo(3))
                .body("'errors'[612].'path'[0]", containsString("countries"))
                .body("'errors'[612].'path'[1]", numberMatches(63.0))
                .body("'errors'[612].'path'[2]", containsString("languages"))
                .body("'errors'[613].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[613].'path'.size()", equalTo(3))
                .body("'errors'[613].'path'[0]", containsString("countries"))
                .body("'errors'[613].'path'[1]", numberMatches(63.0))
                .body("'errors'[613].'path'[2]", containsString("location"))
                .body("'errors'[614].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[614].'path'.size()", equalTo(3))
                .body("'errors'[614].'path'[0]", containsString("countries"))
                .body("'errors'[614].'path'[1]", numberMatches(64.0))
                .body("'errors'[614].'path'[2]", containsString("capital"))
                .body("'errors'[615].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[615].'path'.size()", equalTo(3))
                .body("'errors'[615].'path'[0]", containsString("countries"))
                .body("'errors'[615].'path'[1]", numberMatches(64.0))
                .body("'errors'[615].'path'[2]", containsString("cities"))
                .body("'errors'[616].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[616].'path'.size()", equalTo(3))
                .body("'errors'[616].'path'[0]", containsString("countries"))
                .body("'errors'[616].'path'[1]", numberMatches(64.0))
                .body("'errors'[616].'path'[2]", containsString("languages"))
                .body("'errors'[617].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[617].'path'.size()", equalTo(3))
                .body("'errors'[617].'path'[0]", containsString("countries"))
                .body("'errors'[617].'path'[1]", numberMatches(64.0))
                .body("'errors'[617].'path'[2]", containsString("location"))
                .body("'errors'[618].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[618].'path'.size()", equalTo(3))
                .body("'errors'[618].'path'[0]", containsString("countries"))
                .body("'errors'[618].'path'[1]", numberMatches(65.0))
                .body("'errors'[618].'path'[2]", containsString("capital"))
                .body("'errors'[619].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[619].'path'.size()", equalTo(3))
                .body("'errors'[619].'path'[0]", containsString("countries"))
                .body("'errors'[619].'path'[1]", numberMatches(65.0))
                .body("'errors'[619].'path'[2]", containsString("cities"))
                .body("'errors'[620].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[620].'path'.size()", equalTo(3))
                .body("'errors'[620].'path'[0]", containsString("countries"))
                .body("'errors'[620].'path'[1]", numberMatches(65.0))
                .body("'errors'[620].'path'[2]", containsString("languages"))
                .body("'errors'[621].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[621].'path'.size()", equalTo(3))
                .body("'errors'[621].'path'[0]", containsString("countries"))
                .body("'errors'[621].'path'[1]", numberMatches(65.0))
                .body("'errors'[621].'path'[2]", containsString("location"))
                .body("'errors'[622].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[622].'path'.size()", equalTo(3))
                .body("'errors'[622].'path'[0]", containsString("countries"))
                .body("'errors'[622].'path'[1]", numberMatches(66.0))
                .body("'errors'[622].'path'[2]", containsString("capital"))
                .body("'errors'[623].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[623].'path'.size()", equalTo(3))
                .body("'errors'[623].'path'[0]", containsString("countries"))
                .body("'errors'[623].'path'[1]", numberMatches(66.0))
                .body("'errors'[623].'path'[2]", containsString("cities"))
                .body("'errors'[624].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[624].'path'.size()", equalTo(3))
                .body("'errors'[624].'path'[0]", containsString("countries"))
                .body("'errors'[624].'path'[1]", numberMatches(66.0))
                .body("'errors'[624].'path'[2]", containsString("languages"))
                .body("'errors'[625].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[625].'path'.size()", equalTo(3))
                .body("'errors'[625].'path'[0]", containsString("countries"))
                .body("'errors'[625].'path'[1]", numberMatches(66.0))
                .body("'errors'[625].'path'[2]", containsString("location"))
                .body("'errors'[626].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[626].'path'.size()", equalTo(3))
                .body("'errors'[626].'path'[0]", containsString("countries"))
                .body("'errors'[626].'path'[1]", numberMatches(67.0))
                .body("'errors'[626].'path'[2]", containsString("capital"))
                .body("'errors'[627].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[627].'path'.size()", equalTo(3))
                .body("'errors'[627].'path'[0]", containsString("countries"))
                .body("'errors'[627].'path'[1]", numberMatches(67.0))
                .body("'errors'[627].'path'[2]", containsString("cities"))
                .body("'errors'[628].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[628].'path'.size()", equalTo(3))
                .body("'errors'[628].'path'[0]", containsString("countries"))
                .body("'errors'[628].'path'[1]", numberMatches(67.0))
                .body("'errors'[628].'path'[2]", containsString("languages"))
                .body("'errors'[629].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[629].'path'.size()", equalTo(3))
                .body("'errors'[629].'path'[0]", containsString("countries"))
                .body("'errors'[629].'path'[1]", numberMatches(67.0))
                .body("'errors'[629].'path'[2]", containsString("location"))
                .body("'errors'[630].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[630].'path'.size()", equalTo(3))
                .body("'errors'[630].'path'[0]", containsString("countries"))
                .body("'errors'[630].'path'[1]", numberMatches(68.0))
                .body("'errors'[630].'path'[2]", containsString("capital"))
                .body("'errors'[631].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[631].'path'.size()", equalTo(3))
                .body("'errors'[631].'path'[0]", containsString("countries"))
                .body("'errors'[631].'path'[1]", numberMatches(68.0))
                .body("'errors'[631].'path'[2]", containsString("cities"))
                .body("'errors'[632].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[632].'path'.size()", equalTo(3))
                .body("'errors'[632].'path'[0]", containsString("countries"))
                .body("'errors'[632].'path'[1]", numberMatches(68.0))
                .body("'errors'[632].'path'[2]", containsString("languages"))
                .body("'errors'[633].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[633].'path'.size()", equalTo(3))
                .body("'errors'[633].'path'[0]", containsString("countries"))
                .body("'errors'[633].'path'[1]", numberMatches(68.0))
                .body("'errors'[633].'path'[2]", containsString("location"))
                .body("'errors'[634].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[634].'path'.size()", equalTo(3))
                .body("'errors'[634].'path'[0]", containsString("countries"))
                .body("'errors'[634].'path'[1]", numberMatches(69.0))
                .body("'errors'[634].'path'[2]", containsString("capital"))
                .body("'errors'[635].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[635].'path'.size()", equalTo(3))
                .body("'errors'[635].'path'[0]", containsString("countries"))
                .body("'errors'[635].'path'[1]", numberMatches(69.0))
                .body("'errors'[635].'path'[2]", containsString("cities"))
                .body("'errors'[636].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[636].'path'.size()", equalTo(3))
                .body("'errors'[636].'path'[0]", containsString("countries"))
                .body("'errors'[636].'path'[1]", numberMatches(69.0))
                .body("'errors'[636].'path'[2]", containsString("languages"))
                .body("'errors'[637].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[637].'path'.size()", equalTo(3))
                .body("'errors'[637].'path'[0]", containsString("countries"))
                .body("'errors'[637].'path'[1]", numberMatches(69.0))
                .body("'errors'[637].'path'[2]", containsString("location"))
                .body("'errors'[638].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[638].'path'.size()", equalTo(3))
                .body("'errors'[638].'path'[0]", containsString("countries"))
                .body("'errors'[638].'path'[1]", numberMatches(70.0))
                .body("'errors'[638].'path'[2]", containsString("capital"))
                .body("'errors'[639].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[639].'path'.size()", equalTo(3))
                .body("'errors'[639].'path'[0]", containsString("countries"))
                .body("'errors'[639].'path'[1]", numberMatches(70.0))
                .body("'errors'[639].'path'[2]", containsString("cities"))
                .body("'errors'[640].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[640].'path'.size()", equalTo(3))
                .body("'errors'[640].'path'[0]", containsString("countries"))
                .body("'errors'[640].'path'[1]", numberMatches(70.0))
                .body("'errors'[640].'path'[2]", containsString("languages"))
                .body("'errors'[641].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[641].'path'.size()", equalTo(3))
                .body("'errors'[641].'path'[0]", containsString("countries"))
                .body("'errors'[641].'path'[1]", numberMatches(70.0))
                .body("'errors'[641].'path'[2]", containsString("location"))
                .body("'errors'[642].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[642].'path'.size()", equalTo(3))
                .body("'errors'[642].'path'[0]", containsString("countries"))
                .body("'errors'[642].'path'[1]", numberMatches(71.0))
                .body("'errors'[642].'path'[2]", containsString("capital"))
                .body("'errors'[643].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[643].'path'.size()", equalTo(3))
                .body("'errors'[643].'path'[0]", containsString("countries"))
                .body("'errors'[643].'path'[1]", numberMatches(71.0))
                .body("'errors'[643].'path'[2]", containsString("cities"))
                .body("'errors'[644].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[644].'path'.size()", equalTo(3))
                .body("'errors'[644].'path'[0]", containsString("countries"))
                .body("'errors'[644].'path'[1]", numberMatches(71.0))
                .body("'errors'[644].'path'[2]", containsString("languages"))
                .body("'errors'[645].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[645].'path'.size()", equalTo(3))
                .body("'errors'[645].'path'[0]", containsString("countries"))
                .body("'errors'[645].'path'[1]", numberMatches(71.0))
                .body("'errors'[645].'path'[2]", containsString("location"))
                .body("'errors'[646].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[646].'path'.size()", equalTo(3))
                .body("'errors'[646].'path'[0]", containsString("countries"))
                .body("'errors'[646].'path'[1]", numberMatches(72.0))
                .body("'errors'[646].'path'[2]", containsString("capital"))
                .body("'errors'[647].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[647].'path'.size()", equalTo(3))
                .body("'errors'[647].'path'[0]", containsString("countries"))
                .body("'errors'[647].'path'[1]", numberMatches(72.0))
                .body("'errors'[647].'path'[2]", containsString("cities"))
                .body("'errors'[648].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[648].'path'.size()", equalTo(3))
                .body("'errors'[648].'path'[0]", containsString("countries"))
                .body("'errors'[648].'path'[1]", numberMatches(72.0))
                .body("'errors'[648].'path'[2]", containsString("languages"))
                .body("'errors'[649].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[649].'path'.size()", equalTo(3))
                .body("'errors'[649].'path'[0]", containsString("countries"))
                .body("'errors'[649].'path'[1]", numberMatches(72.0))
                .body("'errors'[649].'path'[2]", containsString("location"))
                .body("'errors'[650].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[650].'path'.size()", equalTo(3))
                .body("'errors'[650].'path'[0]", containsString("countries"))
                .body("'errors'[650].'path'[1]", numberMatches(73.0))
                .body("'errors'[650].'path'[2]", containsString("capital"))
                .body("'errors'[651].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[651].'path'.size()", equalTo(3))
                .body("'errors'[651].'path'[0]", containsString("countries"))
                .body("'errors'[651].'path'[1]", numberMatches(73.0))
                .body("'errors'[651].'path'[2]", containsString("cities"))
                .body("'errors'[652].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[652].'path'.size()", equalTo(3))
                .body("'errors'[652].'path'[0]", containsString("countries"))
                .body("'errors'[652].'path'[1]", numberMatches(73.0))
                .body("'errors'[652].'path'[2]", containsString("languages"))
                .body("'errors'[653].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[653].'path'.size()", equalTo(3))
                .body("'errors'[653].'path'[0]", containsString("countries"))
                .body("'errors'[653].'path'[1]", numberMatches(73.0))
                .body("'errors'[653].'path'[2]", containsString("location"))
                .body("'errors'[654].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[654].'path'.size()", equalTo(3))
                .body("'errors'[654].'path'[0]", containsString("countries"))
                .body("'errors'[654].'path'[1]", numberMatches(74.0))
                .body("'errors'[654].'path'[2]", containsString("capital"))
                .body("'errors'[655].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[655].'path'.size()", equalTo(3))
                .body("'errors'[655].'path'[0]", containsString("countries"))
                .body("'errors'[655].'path'[1]", numberMatches(74.0))
                .body("'errors'[655].'path'[2]", containsString("cities"))
                .body("'errors'[656].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[656].'path'.size()", equalTo(3))
                .body("'errors'[656].'path'[0]", containsString("countries"))
                .body("'errors'[656].'path'[1]", numberMatches(74.0))
                .body("'errors'[656].'path'[2]", containsString("languages"))
                .body("'errors'[657].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[657].'path'.size()", equalTo(3))
                .body("'errors'[657].'path'[0]", containsString("countries"))
                .body("'errors'[657].'path'[1]", numberMatches(74.0))
                .body("'errors'[657].'path'[2]", containsString("location"))
                .body("'errors'[658].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[658].'path'.size()", equalTo(3))
                .body("'errors'[658].'path'[0]", containsString("countries"))
                .body("'errors'[658].'path'[1]", numberMatches(75.0))
                .body("'errors'[658].'path'[2]", containsString("capital"))
                .body("'errors'[659].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[659].'path'.size()", equalTo(3))
                .body("'errors'[659].'path'[0]", containsString("countries"))
                .body("'errors'[659].'path'[1]", numberMatches(75.0))
                .body("'errors'[659].'path'[2]", containsString("cities"))
                .body("'errors'[660].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[660].'path'.size()", equalTo(3))
                .body("'errors'[660].'path'[0]", containsString("countries"))
                .body("'errors'[660].'path'[1]", numberMatches(75.0))
                .body("'errors'[660].'path'[2]", containsString("languages"))
                .body("'errors'[661].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[661].'path'.size()", equalTo(3))
                .body("'errors'[661].'path'[0]", containsString("countries"))
                .body("'errors'[661].'path'[1]", numberMatches(75.0))
                .body("'errors'[661].'path'[2]", containsString("location"))
                .body("'errors'[662].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[662].'path'.size()", equalTo(3))
                .body("'errors'[662].'path'[0]", containsString("countries"))
                .body("'errors'[662].'path'[1]", numberMatches(76.0))
                .body("'errors'[662].'path'[2]", containsString("capital"))
                .body("'errors'[663].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[663].'path'.size()", equalTo(3))
                .body("'errors'[663].'path'[0]", containsString("countries"))
                .body("'errors'[663].'path'[1]", numberMatches(76.0))
                .body("'errors'[663].'path'[2]", containsString("cities"))
                .body("'errors'[664].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[664].'path'.size()", equalTo(3))
                .body("'errors'[664].'path'[0]", containsString("countries"))
                .body("'errors'[664].'path'[1]", numberMatches(76.0))
                .body("'errors'[664].'path'[2]", containsString("languages"))
                .body("'errors'[665].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[665].'path'.size()", equalTo(3))
                .body("'errors'[665].'path'[0]", containsString("countries"))
                .body("'errors'[665].'path'[1]", numberMatches(76.0))
                .body("'errors'[665].'path'[2]", containsString("location"))
                .body("'errors'[666].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[666].'path'.size()", equalTo(3))
                .body("'errors'[666].'path'[0]", containsString("countries"))
                .body("'errors'[666].'path'[1]", numberMatches(77.0))
                .body("'errors'[666].'path'[2]", containsString("capital"))
                .body("'errors'[667].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[667].'path'.size()", equalTo(3))
                .body("'errors'[667].'path'[0]", containsString("countries"))
                .body("'errors'[667].'path'[1]", numberMatches(77.0))
                .body("'errors'[667].'path'[2]", containsString("cities"))
                .body("'errors'[668].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[668].'path'.size()", equalTo(3))
                .body("'errors'[668].'path'[0]", containsString("countries"))
                .body("'errors'[668].'path'[1]", numberMatches(77.0))
                .body("'errors'[668].'path'[2]", containsString("languages"))
                .body("'errors'[669].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[669].'path'.size()", equalTo(3))
                .body("'errors'[669].'path'[0]", containsString("countries"))
                .body("'errors'[669].'path'[1]", numberMatches(77.0))
                .body("'errors'[669].'path'[2]", containsString("location"))
                .body("'errors'[670].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[670].'path'.size()", equalTo(3))
                .body("'errors'[670].'path'[0]", containsString("countries"))
                .body("'errors'[670].'path'[1]", numberMatches(78.0))
                .body("'errors'[670].'path'[2]", containsString("capital"))
                .body("'errors'[671].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[671].'path'.size()", equalTo(3))
                .body("'errors'[671].'path'[0]", containsString("countries"))
                .body("'errors'[671].'path'[1]", numberMatches(78.0))
                .body("'errors'[671].'path'[2]", containsString("cities"))
                .body("'errors'[672].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[672].'path'.size()", equalTo(3))
                .body("'errors'[672].'path'[0]", containsString("countries"))
                .body("'errors'[672].'path'[1]", numberMatches(78.0))
                .body("'errors'[672].'path'[2]", containsString("languages"))
                .body("'errors'[673].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[673].'path'.size()", equalTo(3))
                .body("'errors'[673].'path'[0]", containsString("countries"))
                .body("'errors'[673].'path'[1]", numberMatches(78.0))
                .body("'errors'[673].'path'[2]", containsString("location"))
                .body("'errors'[674].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[674].'path'.size()", equalTo(3))
                .body("'errors'[674].'path'[0]", containsString("countries"))
                .body("'errors'[674].'path'[1]", numberMatches(79.0))
                .body("'errors'[674].'path'[2]", containsString("capital"))
                .body("'errors'[675].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[675].'path'.size()", equalTo(3))
                .body("'errors'[675].'path'[0]", containsString("countries"))
                .body("'errors'[675].'path'[1]", numberMatches(79.0))
                .body("'errors'[675].'path'[2]", containsString("cities"))
                .body("'errors'[676].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[676].'path'.size()", equalTo(3))
                .body("'errors'[676].'path'[0]", containsString("countries"))
                .body("'errors'[676].'path'[1]", numberMatches(79.0))
                .body("'errors'[676].'path'[2]", containsString("languages"))
                .body("'errors'[677].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[677].'path'.size()", equalTo(3))
                .body("'errors'[677].'path'[0]", containsString("countries"))
                .body("'errors'[677].'path'[1]", numberMatches(79.0))
                .body("'errors'[677].'path'[2]", containsString("location"))
                .body("'errors'[678].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[678].'path'.size()", equalTo(3))
                .body("'errors'[678].'path'[0]", containsString("countries"))
                .body("'errors'[678].'path'[1]", numberMatches(80.0))
                .body("'errors'[678].'path'[2]", containsString("capital"))
                .body("'errors'[679].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[679].'path'.size()", equalTo(3))
                .body("'errors'[679].'path'[0]", containsString("countries"))
                .body("'errors'[679].'path'[1]", numberMatches(80.0))
                .body("'errors'[679].'path'[2]", containsString("cities"))
                .body("'errors'[680].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[680].'path'.size()", equalTo(3))
                .body("'errors'[680].'path'[0]", containsString("countries"))
                .body("'errors'[680].'path'[1]", numberMatches(80.0))
                .body("'errors'[680].'path'[2]", containsString("languages"))
                .body("'errors'[681].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[681].'path'.size()", equalTo(3))
                .body("'errors'[681].'path'[0]", containsString("countries"))
                .body("'errors'[681].'path'[1]", numberMatches(80.0))
                .body("'errors'[681].'path'[2]", containsString("location"))
                .body("'errors'[682].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[682].'path'.size()", equalTo(3))
                .body("'errors'[682].'path'[0]", containsString("countries"))
                .body("'errors'[682].'path'[1]", numberMatches(81.0))
                .body("'errors'[682].'path'[2]", containsString("capital"))
                .body("'errors'[683].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[683].'path'.size()", equalTo(3))
                .body("'errors'[683].'path'[0]", containsString("countries"))
                .body("'errors'[683].'path'[1]", numberMatches(81.0))
                .body("'errors'[683].'path'[2]", containsString("cities"))
                .body("'errors'[684].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[684].'path'.size()", equalTo(3))
                .body("'errors'[684].'path'[0]", containsString("countries"))
                .body("'errors'[684].'path'[1]", numberMatches(81.0))
                .body("'errors'[684].'path'[2]", containsString("languages"))
                .body("'errors'[685].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[685].'path'.size()", equalTo(3))
                .body("'errors'[685].'path'[0]", containsString("countries"))
                .body("'errors'[685].'path'[1]", numberMatches(81.0))
                .body("'errors'[685].'path'[2]", containsString("location"))
                .body("'errors'[686].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[686].'path'.size()", equalTo(3))
                .body("'errors'[686].'path'[0]", containsString("countries"))
                .body("'errors'[686].'path'[1]", numberMatches(82.0))
                .body("'errors'[686].'path'[2]", containsString("capital"))
                .body("'errors'[687].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[687].'path'.size()", equalTo(3))
                .body("'errors'[687].'path'[0]", containsString("countries"))
                .body("'errors'[687].'path'[1]", numberMatches(82.0))
                .body("'errors'[687].'path'[2]", containsString("cities"))
                .body("'errors'[688].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[688].'path'.size()", equalTo(3))
                .body("'errors'[688].'path'[0]", containsString("countries"))
                .body("'errors'[688].'path'[1]", numberMatches(82.0))
                .body("'errors'[688].'path'[2]", containsString("languages"))
                .body("'errors'[689].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[689].'path'.size()", equalTo(3))
                .body("'errors'[689].'path'[0]", containsString("countries"))
                .body("'errors'[689].'path'[1]", numberMatches(82.0))
                .body("'errors'[689].'path'[2]", containsString("location"))
                .body("'errors'[690].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[690].'path'.size()", equalTo(3))
                .body("'errors'[690].'path'[0]", containsString("countries"))
                .body("'errors'[690].'path'[1]", numberMatches(83.0))
                .body("'errors'[690].'path'[2]", containsString("capital"))
                .body("'errors'[691].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[691].'path'.size()", equalTo(3))
                .body("'errors'[691].'path'[0]", containsString("countries"))
                .body("'errors'[691].'path'[1]", numberMatches(83.0))
                .body("'errors'[691].'path'[2]", containsString("cities"))
                .body("'errors'[692].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[692].'path'.size()", equalTo(3))
                .body("'errors'[692].'path'[0]", containsString("countries"))
                .body("'errors'[692].'path'[1]", numberMatches(83.0))
                .body("'errors'[692].'path'[2]", containsString("languages"))
                .body("'errors'[693].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[693].'path'.size()", equalTo(3))
                .body("'errors'[693].'path'[0]", containsString("countries"))
                .body("'errors'[693].'path'[1]", numberMatches(83.0))
                .body("'errors'[693].'path'[2]", containsString("location"))
                .body("'errors'[694].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[694].'path'.size()", equalTo(3))
                .body("'errors'[694].'path'[0]", containsString("countries"))
                .body("'errors'[694].'path'[1]", numberMatches(84.0))
                .body("'errors'[694].'path'[2]", containsString("capital"))
                .body("'errors'[695].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[695].'path'.size()", equalTo(3))
                .body("'errors'[695].'path'[0]", containsString("countries"))
                .body("'errors'[695].'path'[1]", numberMatches(84.0))
                .body("'errors'[695].'path'[2]", containsString("cities"))
                .body("'errors'[696].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[696].'path'.size()", equalTo(3))
                .body("'errors'[696].'path'[0]", containsString("countries"))
                .body("'errors'[696].'path'[1]", numberMatches(84.0))
                .body("'errors'[696].'path'[2]", containsString("languages"))
                .body("'errors'[697].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[697].'path'.size()", equalTo(3))
                .body("'errors'[697].'path'[0]", containsString("countries"))
                .body("'errors'[697].'path'[1]", numberMatches(84.0))
                .body("'errors'[697].'path'[2]", containsString("location"))
                .body("'errors'[698].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[698].'path'.size()", equalTo(3))
                .body("'errors'[698].'path'[0]", containsString("countries"))
                .body("'errors'[698].'path'[1]", numberMatches(85.0))
                .body("'errors'[698].'path'[2]", containsString("capital"))
                .body("'errors'[699].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[699].'path'.size()", equalTo(3))
                .body("'errors'[699].'path'[0]", containsString("countries"))
                .body("'errors'[699].'path'[1]", numberMatches(85.0))
                .body("'errors'[699].'path'[2]", containsString("cities"))
                .body("'errors'[700].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[700].'path'.size()", equalTo(3))
                .body("'errors'[700].'path'[0]", containsString("countries"))
                .body("'errors'[700].'path'[1]", numberMatches(85.0))
                .body("'errors'[700].'path'[2]", containsString("languages"))
                .body("'errors'[701].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[701].'path'.size()", equalTo(3))
                .body("'errors'[701].'path'[0]", containsString("countries"))
                .body("'errors'[701].'path'[1]", numberMatches(85.0))
                .body("'errors'[701].'path'[2]", containsString("location"))
                .body("'errors'[702].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[702].'path'.size()", equalTo(3))
                .body("'errors'[702].'path'[0]", containsString("countries"))
                .body("'errors'[702].'path'[1]", numberMatches(86.0))
                .body("'errors'[702].'path'[2]", containsString("capital"))
                .body("'errors'[703].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[703].'path'.size()", equalTo(3))
                .body("'errors'[703].'path'[0]", containsString("countries"))
                .body("'errors'[703].'path'[1]", numberMatches(86.0))
                .body("'errors'[703].'path'[2]", containsString("cities"))
                .body("'errors'[704].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[704].'path'.size()", equalTo(3))
                .body("'errors'[704].'path'[0]", containsString("countries"))
                .body("'errors'[704].'path'[1]", numberMatches(86.0))
                .body("'errors'[704].'path'[2]", containsString("languages"))
                .body("'errors'[705].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[705].'path'.size()", equalTo(3))
                .body("'errors'[705].'path'[0]", containsString("countries"))
                .body("'errors'[705].'path'[1]", numberMatches(86.0))
                .body("'errors'[705].'path'[2]", containsString("location"))
                .body("'errors'[706].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[706].'path'.size()", equalTo(3))
                .body("'errors'[706].'path'[0]", containsString("countries"))
                .body("'errors'[706].'path'[1]", numberMatches(87.0))
                .body("'errors'[706].'path'[2]", containsString("capital"))
                .body("'errors'[707].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[707].'path'.size()", equalTo(3))
                .body("'errors'[707].'path'[0]", containsString("countries"))
                .body("'errors'[707].'path'[1]", numberMatches(87.0))
                .body("'errors'[707].'path'[2]", containsString("cities"))
                .body("'errors'[708].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[708].'path'.size()", equalTo(3))
                .body("'errors'[708].'path'[0]", containsString("countries"))
                .body("'errors'[708].'path'[1]", numberMatches(87.0))
                .body("'errors'[708].'path'[2]", containsString("languages"))
                .body("'errors'[709].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[709].'path'.size()", equalTo(3))
                .body("'errors'[709].'path'[0]", containsString("countries"))
                .body("'errors'[709].'path'[1]", numberMatches(87.0))
                .body("'errors'[709].'path'[2]", containsString("location"))
                .body("'errors'[710].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[710].'path'.size()", equalTo(3))
                .body("'errors'[710].'path'[0]", containsString("countries"))
                .body("'errors'[710].'path'[1]", numberMatches(88.0))
                .body("'errors'[710].'path'[2]", containsString("capital"))
                .body("'errors'[711].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[711].'path'.size()", equalTo(3))
                .body("'errors'[711].'path'[0]", containsString("countries"))
                .body("'errors'[711].'path'[1]", numberMatches(88.0))
                .body("'errors'[711].'path'[2]", containsString("cities"))
                .body("'errors'[712].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[712].'path'.size()", equalTo(3))
                .body("'errors'[712].'path'[0]", containsString("countries"))
                .body("'errors'[712].'path'[1]", numberMatches(88.0))
                .body("'errors'[712].'path'[2]", containsString("languages"))
                .body("'errors'[713].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[713].'path'.size()", equalTo(3))
                .body("'errors'[713].'path'[0]", containsString("countries"))
                .body("'errors'[713].'path'[1]", numberMatches(88.0))
                .body("'errors'[713].'path'[2]", containsString("location"))
                .body("'errors'[714].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[714].'path'.size()", equalTo(3))
                .body("'errors'[714].'path'[0]", containsString("countries"))
                .body("'errors'[714].'path'[1]", numberMatches(89.0))
                .body("'errors'[714].'path'[2]", containsString("capital"))
                .body("'errors'[715].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[715].'path'.size()", equalTo(3))
                .body("'errors'[715].'path'[0]", containsString("countries"))
                .body("'errors'[715].'path'[1]", numberMatches(89.0))
                .body("'errors'[715].'path'[2]", containsString("cities"))
                .body("'errors'[716].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[716].'path'.size()", equalTo(3))
                .body("'errors'[716].'path'[0]", containsString("countries"))
                .body("'errors'[716].'path'[1]", numberMatches(89.0))
                .body("'errors'[716].'path'[2]", containsString("languages"))
                .body("'errors'[717].'message'", containsString("query execution time limit exceeded"))
                .body("'errors'[717].'path'.size()", equalTo(3))
                .body("'errors'[717].'path'[0]", containsString("countries"))
                .body("'errors'[717].'path'[1]", numberMatches(89.0))
                .body("'errors'[717].'path'[2]", containsString("location"));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { markdown  (text : \\\"g8\\\")  {html}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'markdown'.'html'", containsString("<p>g8</p>\n"));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { languages  (limit : -463080248,skip : 438, where:{})  {alpha2Code,id}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.isEmpty()", is(true))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("LIMIT specified value of invalid type, must be a positive integer"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("languages"));
    }
    
    
    @Test
    public void test_20() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { currencies  (limit : 511,skip : 954, where:{})  {convert,countries{callingCodes,cities{continent{name},id,location{lat},name,population,timeZoneDST{id,name,offset}},continent{id,name},geonamesID,id,location{lat},name,population},unitSymbols}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'currencies'.size()", equalTo(0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { cities  (limit : 654,skip : 409, where:{})  {geonamesID,id,name,population,timeZone{id,name,offset}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'cities'.size()", equalTo(654))
                .body("'data'.'cities'[0].'geonamesID'", numberMatches(96205.0))
                .body("'data'.'cities'[0].'name'", containsString("Halabja"))
                .body("'data'.'cities'[0].'population'", numberMatches(65200.0))
                .body("'data'.'cities'[0].'timeZone'", nullValue())
                .body("'data'.'cities'[1].'geonamesID'", numberMatches(5914132.0))
                .body("'data'.'cities'[1].'name'", containsString("Campbell River"))
                .body("'data'.'cities'[1].'population'", numberMatches(32588.0))
                .body("'data'.'cities'[1].'timeZone'", nullValue())
                .body("'data'.'cities'[2].'geonamesID'", numberMatches(3687926.0))
                .body("'data'.'cities'[2].'name'", containsString("Cali"))
                .body("'data'.'cities'[2].'population'", numberMatches(2471474.0))
                .body("'data'.'cities'[2].'timeZone'.'name'", containsString("UTC−05:00"))
                .body("'data'.'cities'[2].'timeZone'.'offset'", numberMatches(-5.0))
                .body("'data'.'cities'[3].'geonamesID'", numberMatches(4990512.0))
                .body("'data'.'cities'[3].'name'", containsString("Dearborn Heights"))
                .body("'data'.'cities'[3].'population'", numberMatches(57774.0))
                .body("'data'.'cities'[3].'timeZone'", nullValue())
                .body("'data'.'cities'[4].'geonamesID'", numberMatches(936374.0))
                .body("'data'.'cities'[4].'name'", containsString("Roodepoort"))
                .body("'data'.'cities'[4].'population'", numberMatches(326416.0))
                .body("'data'.'cities'[4].'timeZone'", nullValue())
                .body("'data'.'cities'[5].'geonamesID'", numberMatches(4499612.0))
                .body("'data'.'cities'[5].'name'", containsString("Winston-Salem"))
                .body("'data'.'cities'[5].'population'", numberMatches(229617.0))
                .body("'data'.'cities'[5].'timeZone'", nullValue())
                .body("'data'.'cities'[6].'geonamesID'", numberMatches(1591449.0))
                .body("'data'.'cities'[6].'name'", containsString("Bắc Ninh"))
                .body("'data'.'cities'[6].'population'", numberMatches(520000.0))
                .body("'data'.'cities'[6].'timeZone'", nullValue())
                .body("'data'.'cities'[7].'geonamesID'", numberMatches(5253710.0))
                .body("'data'.'cities'[7].'name'", containsString("Franklin"))
                .body("'data'.'cities'[7].'population'", numberMatches(35451.0))
                .body("'data'.'cities'[7].'timeZone'", nullValue())
                .body("'data'.'cities'[8].'geonamesID'", numberMatches(4937557.0))
                .body("'data'.'cities'[8].'name'", containsString("Gardner"))
                .body("'data'.'cities'[8].'population'", numberMatches(20228.0))
                .body("'data'.'cities'[8].'timeZone'", nullValue())
                .body("'data'.'cities'[9].'geonamesID'", numberMatches(2362909.0))
                .body("'data'.'cities'[9].'name'", containsString("Banfora"))
                .body("'data'.'cities'[9].'population'", numberMatches(117200.0))
                .body("'data'.'cities'[9].'timeZone'", nullValue())
                .body("'data'.'cities'[10].'geonamesID'", numberMatches(5012521.0))
                .body("'data'.'cities'[10].'name'", containsString("Trenton"))
                .body("'data'.'cities'[10].'population'", numberMatches(19584.0))
                .body("'data'.'cities'[10].'timeZone'", nullValue())
                .body("'data'.'cities'[11].'geonamesID'", numberMatches(293420.0))
                .body("'data'.'cities'[11].'name'", containsString("Ma'alot-Tarshiha"))
                .body("'data'.'cities'[11].'population'", numberMatches(36000.0))
                .body("'data'.'cities'[11].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[11].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[12].'geonamesID'", numberMatches(4763231.0))
                .body("'data'.'cities'[12].'name'", containsString("Harrisonburg"))
                .body("'data'.'cities'[12].'population'", numberMatches(51395.0))
                .body("'data'.'cities'[12].'timeZone'", nullValue())
                .body("'data'.'cities'[13].'geonamesID'", numberMatches(3697033.0))
                .body("'data'.'cities'[13].'name'", containsString("Ferreñafe"))
                .body("'data'.'cities'[13].'population'", numberMatches(31777.0))
                .body("'data'.'cities'[13].'timeZone'.'name'", containsString("UTC−05:00"))
                .body("'data'.'cities'[13].'timeZone'.'offset'", numberMatches(-5.0))
                .body("'data'.'cities'[14].'geonamesID'", numberMatches(1864089.0))
                .body("'data'.'cities'[14].'name'", containsString("Fuji"))
                .body("'data'.'cities'[14].'population'", numberMatches(243739.0))
                .body("'data'.'cities'[14].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[14].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[15].'geonamesID'", numberMatches(2644411.0))
                .body("'data'.'cities'[15].'name'", containsString("Lisburn"))
                .body("'data'.'cities'[15].'population'", numberMatches(71465.0))
                .body("'data'.'cities'[15].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[15].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[16].'geonamesID'", numberMatches(5127835.0))
                .body("'data'.'cities'[16].'name'", containsString("Mount Vernon"))
                .body("'data'.'cities'[16].'population'", numberMatches(67292.0))
                .body("'data'.'cities'[16].'timeZone'", nullValue())
                .body("'data'.'cities'[17].'geonamesID'", numberMatches(1264389.0))
                .body("'data'.'cities'[17].'name'", containsString("Mehsana"))
                .body("'data'.'cities'[17].'population'", numberMatches(184991.0))
                .body("'data'.'cities'[17].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[17].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[18].'geonamesID'", numberMatches(8010483.0))
                .body("'data'.'cities'[18].'name'", containsString("Coimbra"))
                .body("'data'.'cities'[18].'population'", numberMatches(143396.0))
                .body("'data'.'cities'[18].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[18].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[19].'geonamesID'", numberMatches(2422442.0))
                .body("'data'.'cities'[19].'name'", containsString("Dabola"))
                .body("'data'.'cities'[19].'population'", numberMatches(38617.0))
                .body("'data'.'cities'[19].'timeZone'", nullValue())
                .body("'data'.'cities'[20].'geonamesID'", numberMatches(5324363.0))
                .body("'data'.'cities'[20].'name'", containsString("Apple Valley"))
                .body("'data'.'cities'[20].'population'", numberMatches(69135.0))
                .body("'data'.'cities'[20].'timeZone'", nullValue())
                .body("'data'.'cities'[21].'geonamesID'", numberMatches(1860626.0))
                .body("'data'.'cities'[21].'name'", containsString("Kameyama"))
                .body("'data'.'cities'[21].'population'", numberMatches(49971.0))
                .body("'data'.'cities'[21].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[21].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[22].'geonamesID'", numberMatches(3640465.0))
                .body("'data'.'cities'[22].'name'", containsString("Guacara"))
                .body("'data'.'cities'[22].'population'", numberMatches(200212.0))
                .body("'data'.'cities'[22].'timeZone'", nullValue())
                .body("'data'.'cities'[23].'geonamesID'", numberMatches(679993.0))
                .body("'data'.'cities'[23].'name'", containsString("Cugir"))
                .body("'data'.'cities'[23].'population'", numberMatches(21376.0))
                .body("'data'.'cities'[23].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[23].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[24].'geonamesID'", numberMatches(3464460.0))
                .body("'data'.'cities'[24].'name'", containsString("Dourados"))
                .body("'data'.'cities'[24].'population'", numberMatches(225495.0))
                .body("'data'.'cities'[24].'timeZone'", nullValue())
                .body("'data'.'cities'[25].'geonamesID'", numberMatches(3646487.0))
                .body("'data'.'cities'[25].'name'", containsString("Carora"))
                .body("'data'.'cities'[25].'population'", numberMatches(112600.0))
                .body("'data'.'cities'[25].'timeZone'", nullValue())
                .body("'data'.'cities'[26].'geonamesID'", numberMatches(5352214.0))
                .body("'data'.'cities'[26].'name'", containsString("Gilroy"))
                .body("'data'.'cities'[26].'population'", numberMatches(48821.0))
                .body("'data'.'cities'[26].'timeZone'", nullValue())
                .body("'data'.'cities'[27].'geonamesID'", numberMatches(2803430.0))
                .body("'data'.'cities'[27].'name'", containsString("Aarschot"))
                .body("'data'.'cities'[27].'population'", numberMatches(29965.0))
                .body("'data'.'cities'[27].'timeZone'", nullValue())
                .body("'data'.'cities'[28].'geonamesID'", numberMatches(932035.0))
                .body("'data'.'cities'[28].'name'", containsString("Teyateyaneng"))
                .body("'data'.'cities'[28].'population'", numberMatches(75115.0))
                .body("'data'.'cities'[28].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[28].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[29].'geonamesID'", numberMatches(1680007.0))
                .body("'data'.'cities'[29].'name'", containsString("Victorias"))
                .body("'data'.'cities'[29].'population'", numberMatches(90101.0))
                .body("'data'.'cities'[29].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[29].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[30].'geonamesID'", numberMatches(1257804.0))
                .body("'data'.'cities'[30].'name'", containsString("Saharsa"))
                .body("'data'.'cities'[30].'population'", numberMatches(156540.0))
                .body("'data'.'cities'[30].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[30].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[31].'geonamesID'", numberMatches(3717590.0))
                .body("'data'.'cities'[31].'name'", containsString("Saint-Marc"))
                .body("'data'.'cities'[31].'population'", numberMatches(160181.0))
                .body("'data'.'cities'[31].'timeZone'", nullValue())
                .body("'data'.'cities'[32].'geonamesID'", numberMatches(886989.0))
                .body("'data'.'cities'[32].'name'", containsString("Marondera"))
                .body("'data'.'cities'[32].'population'", numberMatches(52283.0))
                .body("'data'.'cities'[32].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[32].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[33].'geonamesID'", numberMatches(361546.0))
                .body("'data'.'cities'[33].'name'", containsString("Arish"))
                .body("'data'.'cities'[33].'population'", numberMatches(164830.0))
                .body("'data'.'cities'[33].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[33].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[34].'geonamesID'", numberMatches(1586360.0))
                .body("'data'.'cities'[34].'name'", containsString("Cẩm Phả"))
                .body("'data'.'cities'[34].'population'", numberMatches(156000.0))
                .body("'data'.'cities'[34].'timeZone'.'name'", containsString("UTC+07:00"))
                .body("'data'.'cities'[34].'timeZone'.'offset'", numberMatches(7.0))
                .body("'data'.'cities'[35].'geonamesID'", numberMatches(6557557.0))
                .body("'data'.'cities'[35].'name'", containsString("Burscheid"))
                .body("'data'.'cities'[35].'population'", numberMatches(18172.0))
                .body("'data'.'cities'[35].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[35].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[36].'geonamesID'", numberMatches(5520677.0))
                .body("'data'.'cities'[36].'name'", containsString("Eagle Pass"))
                .body("'data'.'cities'[36].'population'", numberMatches(26248.0))
                .body("'data'.'cities'[36].'timeZone'", nullValue())
                .body("'data'.'cities'[37].'geonamesID'", numberMatches(3065067.0))
                .body("'data'.'cities'[37].'name'", containsString("Strakonice"))
                .body("'data'.'cities'[37].'population'", numberMatches(22428.0))
                .body("'data'.'cities'[37].'timeZone'", nullValue())
                .body("'data'.'cities'[38].'geonamesID'", numberMatches(5345609.0))
                .body("'data'.'cities'[38].'name'", containsString("El Centro"))
                .body("'data'.'cities'[38].'population'", numberMatches(42598.0))
                .body("'data'.'cities'[38].'timeZone'", nullValue())
                .body("'data'.'cities'[39].'geonamesID'", numberMatches(310859.0))
                .body("'data'.'cities'[39].'name'", containsString("Marash"))
                .body("'data'.'cities'[39].'population'", numberMatches(443575.0))
                .body("'data'.'cities'[39].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[39].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[40].'geonamesID'", numberMatches(2192362.0))
                .body("'data'.'cities'[40].'name'", containsString("Christchurch"))
                .body("'data'.'cities'[40].'population'", numberMatches(383200.0))
                .body("'data'.'cities'[40].'timeZone'.'name'", containsString("UTC+12:00"))
                .body("'data'.'cities'[40].'timeZone'.'offset'", numberMatches(12.0))
                .body("'data'.'cities'[41].'geonamesID'", numberMatches(6558018.0))
                .body("'data'.'cities'[41].'name'", containsString("Wertheim"))
                .body("'data'.'cities'[41].'population'", numberMatches(22780.0))
                .body("'data'.'cities'[41].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[41].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[42].'geonamesID'", numberMatches(4407237.0))
                .body("'data'.'cities'[42].'name'", containsString("St. Peters"))
                .body("'data'.'cities'[42].'population'", numberMatches(52575.0))
                .body("'data'.'cities'[42].'timeZone'", nullValue())
                .body("'data'.'cities'[43].'geonamesID'", numberMatches(3877918.0))
                .body("'data'.'cities'[43].'name'", containsString("Ovalle"))
                .body("'data'.'cities'[43].'population'", numberMatches(75864.0))
                .body("'data'.'cities'[43].'timeZone'", nullValue())
                .body("'data'.'cities'[44].'geonamesID'", numberMatches(1831125.0))
                .body("'data'.'cities'[44].'name'", containsString("Kampong Thom"))
                .body("'data'.'cities'[44].'population'", numberMatches(31871.0))
                .body("'data'.'cities'[44].'timeZone'", nullValue())
                .body("'data'.'cities'[45].'geonamesID'", numberMatches(7286743.0))
                .body("'data'.'cities'[45].'name'", containsString("Opfikon"))
                .body("'data'.'cities'[45].'population'", numberMatches(19864.0))
                .body("'data'.'cities'[45].'timeZone'", nullValue())
                .body("'data'.'cities'[46].'geonamesID'", numberMatches(1857206.0))
                .body("'data'.'cities'[46].'name'", containsString("Minamata"))
                .body("'data'.'cities'[46].'population'", numberMatches(23155.0))
                .body("'data'.'cities'[46].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[46].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[47].'geonamesID'", numberMatches(1784285.0))
                .body("'data'.'cities'[47].'name'", containsString("Zhongwei"))
                .body("'data'.'cities'[47].'population'", numberMatches(1046000.0))
                .body("'data'.'cities'[47].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[47].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[48].'geonamesID'", numberMatches(5772959.0))
                .body("'data'.'cities'[48].'name'", containsString("Clearfield"))
                .body("'data'.'cities'[48].'population'", numberMatches(30112.0))
                .body("'data'.'cities'[48].'timeZone'", nullValue())
                .body("'data'.'cities'[49].'geonamesID'", numberMatches(7602483.0))
                .body("'data'.'cities'[49].'name'", containsString("Spremberg"))
                .body("'data'.'cities'[49].'population'", numberMatches(22175.0))
                .body("'data'.'cities'[49].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[49].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[50].'geonamesID'", numberMatches(1610780.0))
                .body("'data'.'cities'[50].'name'", containsString("Hat Yai"))
                .body("'data'.'cities'[50].'population'", numberMatches(159130.0))
                .body("'data'.'cities'[50].'timeZone'.'name'", containsString("UTC+07:00"))
                .body("'data'.'cities'[50].'timeZone'.'offset'", numberMatches(7.0))
                .body("'data'.'cities'[51].'geonamesID'", numberMatches(2130054.0))
                .body("'data'.'cities'[51].'name'", containsString("Kitahiroshima"))
                .body("'data'.'cities'[51].'population'", numberMatches(58125.0))
                .body("'data'.'cities'[51].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[51].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[52].'geonamesID'", numberMatches(4711801.0))
                .body("'data'.'cities'[52].'name'", containsString("Missouri City"))
                .body("'data'.'cities'[52].'population'", numberMatches(67358.0))
                .body("'data'.'cities'[52].'timeZone'", nullValue())
                .body("'data'.'cities'[53].'geonamesID'", numberMatches(3455070.0))
                .body("'data'.'cities'[53].'name'", containsString("Paranaguá"))
                .body("'data'.'cities'[53].'population'", numberMatches(140469.0))
                .body("'data'.'cities'[53].'timeZone'", nullValue())
                .body("'data'.'cities'[54].'geonamesID'", numberMatches(149606.0))
                .body("'data'.'cities'[54].'name'", containsString("Tanga"))
                .body("'data'.'cities'[54].'population'", numberMatches(243580.0))
                .body("'data'.'cities'[54].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[54].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[55].'geonamesID'", numberMatches(373303.0))
                .body("'data'.'cities'[55].'name'", containsString("Juba"))
                .body("'data'.'cities'[55].'population'", numberMatches(372410.0))
                .body("'data'.'cities'[55].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[55].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[56].'geonamesID'", numberMatches(3072929.0))
                .body("'data'.'cities'[56].'name'", containsString("Kralupy nad Vltavou"))
                .body("'data'.'cities'[56].'population'", numberMatches(18485.0))
                .body("'data'.'cities'[56].'timeZone'", nullValue())
                .body("'data'.'cities'[57].'geonamesID'", numberMatches(3832934.0))
                .body("'data'.'cities'[57].'name'", containsString("Victoria"))
                .body("'data'.'cities'[57].'population'", numberMatches(30623.0))
                .body("'data'.'cities'[57].'timeZone'.'name'", containsString("UTC−03:00"))
                .body("'data'.'cities'[57].'timeZone'.'offset'", numberMatches(-3.0))
                .body("'data'.'cities'[58].'geonamesID'", numberMatches(4233813.0))
                .body("'data'.'cities'[58].'name'", containsString("Belleville"))
                .body("'data'.'cities'[58].'population'", numberMatches(44478.0))
                .body("'data'.'cities'[58].'timeZone'", nullValue())
                .body("'data'.'cities'[59].'geonamesID'", numberMatches(4266307.0))
                .body("'data'.'cities'[59].'name'", containsString("Vincennes"))
                .body("'data'.'cities'[59].'population'", numberMatches(18423.0))
                .body("'data'.'cities'[59].'timeZone'", nullValue())
                .body("'data'.'cities'[60].'geonamesID'", numberMatches(6822159.0))
                .body("'data'.'cities'[60].'name'", containsString("Fujimino"))
                .body("'data'.'cities'[60].'population'", numberMatches(112745.0))
                .body("'data'.'cities'[60].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[60].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[61].'geonamesID'", numberMatches(5725846.0))
                .body("'data'.'cities'[61].'name'", containsString("Eugene"))
                .body("'data'.'cities'[61].'population'", numberMatches(160561.0))
                .body("'data'.'cities'[61].'timeZone'.'name'", containsString("UTC−08:00"))
                .body("'data'.'cities'[61].'timeZone'.'offset'", numberMatches(-8.0))
                .body("'data'.'cities'[62].'geonamesID'", numberMatches(8010425.0))
                .body("'data'.'cities'[62].'name'", containsString("Oliveira de Azeméis"))
                .body("'data'.'cities'[62].'population'", numberMatches(68611.0))
                .body("'data'.'cities'[62].'timeZone'", nullValue())
                .body("'data'.'cities'[63].'geonamesID'", numberMatches(1851714.0))
                .body("'data'.'cities'[63].'name'", containsString("Shizuoka"))
                .body("'data'.'cities'[63].'population'", numberMatches(685589.0))
                .body("'data'.'cities'[63].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[63].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[64].'geonamesID'", numberMatches(1850892.0))
                .body("'data'.'cities'[64].'name'", containsString("Takayama"))
                .body("'data'.'cities'[64].'population'", numberMatches(85199.0))
                .body("'data'.'cities'[64].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[64].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[65].'geonamesID'", numberMatches(1861634.0))
                .body("'data'.'cities'[65].'name'", containsString("Inagi"))
                .body("'data'.'cities'[65].'population'", numberMatches(92604.0))
                .body("'data'.'cities'[65].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[65].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[66].'geonamesID'", numberMatches(1848519.0))
                .body("'data'.'cities'[66].'name'", containsString("Yao"))
                .body("'data'.'cities'[66].'population'", numberMatches(264913.0))
                .body("'data'.'cities'[66].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[66].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[67].'geonamesID'", numberMatches(6359231.0))
                .body("'data'.'cities'[67].'name'", containsString("Alcalá de Henares"))
                .body("'data'.'cities'[67].'population'", numberMatches(197562.0))
                .body("'data'.'cities'[67].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[67].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[68].'geonamesID'", numberMatches(1253573.0))
                .body("'data'.'cities'[68].'name'", containsString("Vadodara"))
                .body("'data'.'cities'[68].'population'", numberMatches(2065771.0))
                .body("'data'.'cities'[68].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[68].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[69].'geonamesID'", numberMatches(8010618.0))
                .body("'data'.'cities'[69].'name'", containsString("Barreiro"))
                .body("'data'.'cities'[69].'population'", numberMatches(78764.0))
                .body("'data'.'cities'[69].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[69].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[70].'geonamesID'", numberMatches(298333.0))
                .body("'data'.'cities'[70].'name'", containsString("Edessa"))
                .body("'data'.'cities'[70].'population'", numberMatches(55000.0))
                .body("'data'.'cities'[70].'timeZone'", nullValue())
                .body("'data'.'cities'[71].'geonamesID'", numberMatches(3702431.0))
                .body("'data'.'cities'[71].'name'", containsString("Puerto Armuelles"))
                .body("'data'.'cities'[71].'population'", numberMatches(19763.0))
                .body("'data'.'cities'[71].'timeZone'.'name'", containsString("UTC−05:00"))
                .body("'data'.'cities'[71].'timeZone'.'offset'", numberMatches(-5.0))
                .body("'data'.'cities'[72].'geonamesID'", numberMatches(1265491.0))
                .body("'data'.'cities'[72].'name'", containsString("Kurnool"))
                .body("'data'.'cities'[72].'population'", numberMatches(457633.0))
                .body("'data'.'cities'[72].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[72].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[73].'geonamesID'", numberMatches(3899361.0))
                .body("'data'.'cities'[73].'name'", containsString("Arica"))
                .body("'data'.'cities'[73].'population'", numberMatches(202131.0))
                .body("'data'.'cities'[73].'timeZone'.'name'", containsString("UTC−04:00"))
                .body("'data'.'cities'[73].'timeZone'.'offset'", numberMatches(-4.0))
                .body("'data'.'cities'[74].'geonamesID'", numberMatches(1683877.0))
                .body("'data'.'cities'[74].'name'", containsString("Talisay"))
                .body("'data'.'cities'[74].'population'", numberMatches(108909.0))
                .body("'data'.'cities'[74].'timeZone'", nullValue())
                .body("'data'.'cities'[75].'geonamesID'", numberMatches(8010521.0))
                .body("'data'.'cities'[75].'name'", containsString("Olhão"))
                .body("'data'.'cities'[75].'population'", numberMatches(45396.0))
                .body("'data'.'cities'[75].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[75].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[76].'geonamesID'", numberMatches(3442568.0))
                .body("'data'.'cities'[76].'name'", containsString("Fray Bentos"))
                .body("'data'.'cities'[76].'population'", numberMatches(24406.0))
                .body("'data'.'cities'[76].'timeZone'", nullValue())
                .body("'data'.'cities'[77].'geonamesID'", numberMatches(6556726.0))
                .body("'data'.'cities'[77].'name'", containsString("Bayreuth"))
                .body("'data'.'cities'[77].'population'", numberMatches(74657.0))
                .body("'data'.'cities'[77].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[77].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[78].'geonamesID'", numberMatches(6356131.0))
                .body("'data'.'cities'[78].'name'", containsString("L'Hospitalet de Llobregat"))
                .body("'data'.'cities'[78].'population'", numberMatches(269382.0))
                .body("'data'.'cities'[78].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[78].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[79].'geonamesID'", numberMatches(2185018.0))
                .body("'data'.'cities'[79].'name'", containsString("Palmerston North"))
                .body("'data'.'cities'[79].'population'", numberMatches(81500.0))
                .body("'data'.'cities'[79].'timeZone'.'name'", containsString("UTC+12:00"))
                .body("'data'.'cities'[79].'timeZone'.'offset'", numberMatches(12.0))
                .body("'data'.'cities'[80].'geonamesID'", numberMatches(3070862.0))
                .body("'data'.'cities'[80].'name'", containsString("Mělník"))
                .body("'data'.'cities'[80].'population'", numberMatches(19579.0))
                .body("'data'.'cities'[80].'timeZone'", nullValue())
                .body("'data'.'cities'[81].'geonamesID'", numberMatches(5037784.0))
                .body("'data'.'cities'[81].'name'", containsString("Minnetonka"))
                .body("'data'.'cities'[81].'population'", numberMatches(49734.0))
                .body("'data'.'cities'[81].'timeZone'", nullValue())
                .body("'data'.'cities'[82].'geonamesID'", numberMatches(6541851.0))
                .body("'data'.'cities'[82].'name'", containsString("Cremona"))
                .body("'data'.'cities'[82].'population'", numberMatches(72077.0))
                .body("'data'.'cities'[82].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[82].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[83].'geonamesID'", numberMatches(6557347.0))
                .body("'data'.'cities'[83].'name'", containsString("Quickborn"))
                .body("'data'.'cities'[83].'population'", numberMatches(21296.0))
                .body("'data'.'cities'[83].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[83].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[84].'geonamesID'", numberMatches(1710915.0))
                .body("'data'.'cities'[84].'name'", containsString("Imus"))
                .body("'data'.'cities'[84].'population'", numberMatches(496794.0))
                .body("'data'.'cities'[84].'timeZone'", nullValue())
                .body("'data'.'cities'[85].'geonamesID'", numberMatches(5352439.0))
                .body("'data'.'cities'[85].'name'", containsString("Glendora"))
                .body("'data'.'cities'[85].'population'", numberMatches(50073.0))
                .body("'data'.'cities'[85].'timeZone'", nullValue())
                .body("'data'.'cities'[86].'geonamesID'", numberMatches(3031582.0))
                .body("'data'.'cities'[86].'name'", containsString("Bordeaux"))
                .body("'data'.'cities'[86].'population'", numberMatches(257068.0))
                .body("'data'.'cities'[86].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[86].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[87].'geonamesID'", numberMatches(6822178.0))
                .body("'data'.'cities'[87].'name'", containsString("Komagane"))
                .body("'data'.'cities'[87].'population'", numberMatches(31763.0))
                .body("'data'.'cities'[87].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[87].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[88].'geonamesID'", numberMatches(3188582.0))
                .body("'data'.'cities'[88].'name'", containsString("Tuzla"))
                .body("'data'.'cities'[88].'population'", numberMatches(110979.0))
                .body("'data'.'cities'[88].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[88].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[89].'geonamesID'", numberMatches(5066001.0))
                .body("'data'.'cities'[89].'name'", containsString("Columbus"))
                .body("'data'.'cities'[89].'population'", numberMatches(22111.0))
                .body("'data'.'cities'[89].'timeZone'", nullValue())
                .body("'data'.'cities'[90].'geonamesID'", numberMatches(298977.0))
                .body("'data'.'cities'[90].'name'", containsString("Toprakkale"))
                .body("'data'.'cities'[90].'population'", numberMatches(20127.0))
                .body("'data'.'cities'[90].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[90].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[91].'geonamesID'", numberMatches(1799397.0))
                .body("'data'.'cities'[91].'name'", containsString("Ningbo"))
                .body("'data'.'cities'[91].'population'", numberMatches(7639000.0))
                .body("'data'.'cities'[91].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[91].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[92].'geonamesID'", numberMatches(612287.0))
                .body("'data'.'cities'[92].'name'", containsString("Rustavi"))
                .body("'data'.'cities'[92].'population'", numberMatches(128680.0))
                .body("'data'.'cities'[92].'timeZone'.'name'", containsString("UTC+04:00"))
                .body("'data'.'cities'[92].'timeZone'.'offset'", numberMatches(4.0))
                .body("'data'.'cities'[93].'geonamesID'", numberMatches(1848087.0))
                .body("'data'.'cities'[93].'name'", containsString("Yukuhashi"))
                .body("'data'.'cities'[93].'population'", numberMatches(70922.0))
                .body("'data'.'cities'[93].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[93].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[94].'geonamesID'", numberMatches(3397147.0))
                .body("'data'.'cities'[94].'name'", containsString("Juazeiro do Norte"))
                .body("'data'.'cities'[94].'population'", numberMatches(249939.0))
                .body("'data'.'cities'[94].'timeZone'", nullValue())
                .body("'data'.'cities'[95].'geonamesID'", numberMatches(7370821.0))
                .body("'data'.'cities'[95].'name'", containsString("Katō"))
                .body("'data'.'cities'[95].'population'", numberMatches(40728.0))
                .body("'data'.'cities'[95].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[95].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[96].'geonamesID'", numberMatches(1854774.0))
                .body("'data'.'cities'[96].'name'", containsString("Ōda"))
                .body("'data'.'cities'[96].'population'", numberMatches(32102.0))
                .body("'data'.'cities'[96].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[96].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[97].'geonamesID'", numberMatches(6557645.0))
                .body("'data'.'cities'[97].'name'", containsString("Lübbecke"))
                .body("'data'.'cities'[97].'population'", numberMatches(25490.0))
                .body("'data'.'cities'[97].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[97].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[98].'geonamesID'", numberMatches(7285023.0))
                .body("'data'.'cities'[98].'name'", containsString("Adliswil"))
                .body("'data'.'cities'[98].'population'", numberMatches(18731.0))
                .body("'data'.'cities'[98].'timeZone'", nullValue())
                .body("'data'.'cities'[99].'geonamesID'", numberMatches(360686.0))
                .body("'data'.'cities'[99].'name'", containsString("Minya"))
                .body("'data'.'cities'[99].'population'", numberMatches(236043.0))
                .body("'data'.'cities'[99].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[99].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[100].'geonamesID'", numberMatches(8261304.0))
                .body("'data'.'cities'[100].'name'", containsString("Bulnes"))
                .body("'data'.'cities'[100].'population'", numberMatches(20595.0))
                .body("'data'.'cities'[100].'timeZone'", nullValue())
                .body("'data'.'cities'[101].'geonamesID'", numberMatches(5364329.0))
                .body("'data'.'cities'[101].'name'", containsString("Laguna Niguel"))
                .body("'data'.'cities'[101].'population'", numberMatches(62979.0))
                .body("'data'.'cities'[101].'timeZone'", nullValue())
                .body("'data'.'cities'[102].'geonamesID'", numberMatches(1859393.0))
                .body("'data'.'cities'[102].'name'", containsString("Kisarazu"))
                .body("'data'.'cities'[102].'population'", numberMatches(136118.0))
                .body("'data'.'cities'[102].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[102].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[103].'geonamesID'", numberMatches(362288.0))
                .body("'data'.'cities'[103].'name'", containsString("Abu Qir"))
                .body("'data'.'cities'[103].'population'", numberMatches(37997.0))
                .body("'data'.'cities'[103].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[103].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[104].'geonamesID'", numberMatches(3832132.0))
                .body("'data'.'cities'[104].'name'", containsString("Zapala"))
                .body("'data'.'cities'[104].'population'", numberMatches(32097.0))
                .body("'data'.'cities'[104].'timeZone'.'name'", containsString("UTC−03:00"))
                .body("'data'.'cities'[104].'timeZone'.'offset'", numberMatches(-3.0))
                .body("'data'.'cities'[105].'geonamesID'", numberMatches(1842944.0))
                .body("'data'.'cities'[105].'name'", containsString("Gimcheon"))
                .body("'data'.'cities'[105].'population'", numberMatches(137540.0))
                .body("'data'.'cities'[105].'timeZone'", nullValue())
                .body("'data'.'cities'[106].'geonamesID'", numberMatches(352628.0))
                .body("'data'.'cities'[106].'name'", containsString("Matai"))
                .body("'data'.'cities'[106].'population'", numberMatches(46903.0))
                .body("'data'.'cities'[106].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[106].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[107].'geonamesID'", numberMatches(4076784.0))
                .body("'data'.'cities'[107].'name'", containsString("Montgomery"))
                .body("'data'.'cities'[107].'population'", numberMatches(205764.0))
                .body("'data'.'cities'[107].'timeZone'.'name'", containsString("UTC−06:00"))
                .body("'data'.'cities'[107].'timeZone'.'offset'", numberMatches(-6.0))
                .body("'data'.'cities'[108].'geonamesID'", numberMatches(293100.0))
                .body("'data'.'cities'[108].'name'", containsString("Safed"))
                .body("'data'.'cities'[108].'population'", numberMatches(21200.0))
                .body("'data'.'cities'[108].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[108].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[109].'geonamesID'", numberMatches(2327735.0))
                .body("'data'.'cities'[109].'name'", containsString("Ogbomosho"))
                .body("'data'.'cities'[109].'population'", numberMatches(1032000.0))
                .body("'data'.'cities'[109].'timeZone'", nullValue())
                .body("'data'.'cities'[110].'geonamesID'", numberMatches(4460243.0))
                .body("'data'.'cities'[110].'name'", containsString("Charlotte"))
                .body("'data'.'cities'[110].'population'", numberMatches(34014.0))
                .body("'data'.'cities'[110].'timeZone'", nullValue())
                .body("'data'.'cities'[111].'geonamesID'", numberMatches(1174625.0))
                .body("'data'.'cities'[111].'name'", containsString("Kasur"))
                .body("'data'.'cities'[111].'population'", numberMatches(314617.0))
                .body("'data'.'cities'[111].'timeZone'", nullValue())
                .body("'data'.'cities'[112].'geonamesID'", numberMatches(8740425.0))
                .body("'data'.'cities'[112].'name'", containsString("Etajima"))
                .body("'data'.'cities'[112].'population'", numberMatches(21557.0))
                .body("'data'.'cities'[112].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[112].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[113].'geonamesID'", numberMatches(2795114.0))
                .body("'data'.'cities'[113].'name'", containsString("Huy"))
                .body("'data'.'cities'[113].'population'", numberMatches(21293.0))
                .body("'data'.'cities'[113].'timeZone'", nullValue())
                .body("'data'.'cities'[114].'geonamesID'", numberMatches(6557986.0))
                .body("'data'.'cities'[114].'name'", containsString("Neckarsulm"))
                .body("'data'.'cities'[114].'population'", numberMatches(26492.0))
                .body("'data'.'cities'[114].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[114].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[115].'geonamesID'", numberMatches(2193733.0))
                .body("'data'.'cities'[115].'name'", containsString("Auckland"))
                .body("'data'.'cities'[115].'population'", numberMatches(1470100.0))
                .body("'data'.'cities'[115].'timeZone'.'name'", containsString("UTC+12:00"))
                .body("'data'.'cities'[115].'timeZone'.'offset'", numberMatches(12.0))
                .body("'data'.'cities'[116].'geonamesID'", numberMatches(1854905.0))
                .body("'data'.'cities'[116].'name'", containsString("Numata"))
                .body("'data'.'cities'[116].'population'", numberMatches(44782.0))
                .body("'data'.'cities'[116].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[116].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[117].'geonamesID'", numberMatches(5166819.0))
                .body("'data'.'cities'[117].'name'", containsString("Piqua"))
                .body("'data'.'cities'[117].'population'", numberMatches(20522.0))
                .body("'data'.'cities'[117].'timeZone'", nullValue())
                .body("'data'.'cities'[118].'geonamesID'", numberMatches(722439.0))
                .body("'data'.'cities'[118].'name'", containsString("Békés"))
                .body("'data'.'cities'[118].'population'", numberMatches(18322.0))
                .body("'data'.'cities'[118].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[118].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[119].'geonamesID'", numberMatches(3640226.0))
                .body("'data'.'cities'[119].'name'", containsString("Guanare"))
                .body("'data'.'cities'[119].'population'", numberMatches(192644.0))
                .body("'data'.'cities'[119].'timeZone'", nullValue())
                .body("'data'.'cities'[120].'geonamesID'", numberMatches(1266179.0))
                .body("'data'.'cities'[120].'name'", containsString("Konnagar"))
                .body("'data'.'cities'[120].'population'", numberMatches(76172.0))
                .body("'data'.'cities'[120].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[120].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[121].'geonamesID'", numberMatches(1804591.0))
                .body("'data'.'cities'[121].'name'", containsString("Laiwu"))
                .body("'data'.'cities'[121].'population'", numberMatches(1248636.0))
                .body("'data'.'cities'[121].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[121].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[122].'geonamesID'", numberMatches(1854022.0))
                .body("'data'.'cities'[122].'name'", containsString("Ono"))
                .body("'data'.'cities'[122].'population'", numberMatches(30449.0))
                .body("'data'.'cities'[122].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[122].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[123].'geonamesID'", numberMatches(4161625.0))
                .body("'data'.'cities'[123].'name'", containsString("Lauderhill"))
                .body("'data'.'cities'[123].'population'", numberMatches(66887.0))
                .body("'data'.'cities'[123].'timeZone'", nullValue())
                .body("'data'.'cities'[124].'geonamesID'", numberMatches(789527.0))
                .body("'data'.'cities'[124].'name'", containsString("Kičevo"))
                .body("'data'.'cities'[124].'population'", numberMatches(27067.0))
                .body("'data'.'cities'[124].'timeZone'", nullValue())
                .body("'data'.'cities'[125].'geonamesID'", numberMatches(5234372.0))
                .body("'data'.'cities'[125].'name'", containsString("Burlington"))
                .body("'data'.'cities'[125].'population'", numberMatches(42417.0))
                .body("'data'.'cities'[125].'timeZone'", nullValue())
                .body("'data'.'cities'[126].'geonamesID'", numberMatches(3374462.0))
                .body("'data'.'cities'[126].'name'", containsString("Mindelo"))
                .body("'data'.'cities'[126].'population'", numberMatches(70468.0))
                .body("'data'.'cities'[126].'timeZone'", nullValue())
                .body("'data'.'cities'[127].'geonamesID'", numberMatches(1907123.0))
                .body("'data'.'cities'[127].'name'", containsString("Hasuda"))
                .body("'data'.'cities'[127].'population'", numberMatches(61473.0))
                .body("'data'.'cities'[127].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[127].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[128].'geonamesID'", numberMatches(76184.0))
                .body("'data'.'cities'[128].'name'", containsString("Dhamar"))
                .body("'data'.'cities'[128].'population'", numberMatches(160114.0))
                .body("'data'.'cities'[128].'timeZone'", nullValue())
                .body("'data'.'cities'[129].'geonamesID'", numberMatches(6558990.0))
                .body("'data'.'cities'[129].'name'", containsString("Weißenburg in Bayern"))
                .body("'data'.'cities'[129].'population'", numberMatches(18464.0))
                .body("'data'.'cities'[129].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[129].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[130].'geonamesID'", numberMatches(6320189.0))
                .body("'data'.'cities'[130].'name'", containsString("Natal"))
                .body("'data'.'cities'[130].'population'", numberMatches(877662.0))
                .body("'data'.'cities'[130].'timeZone'.'name'", containsString("UTC−03:00"))
                .body("'data'.'cities'[130].'timeZone'.'offset'", numberMatches(-3.0))
                .body("'data'.'cities'[131].'geonamesID'", numberMatches(2112822.0))
                .body("'data'.'cities'[131].'name'", containsString("Hanamaki"))
                .body("'data'.'cities'[131].'population'", numberMatches(92815.0))
                .body("'data'.'cities'[131].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[131].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[132].'geonamesID'", numberMatches(3691175.0))
                .body("'data'.'cities'[132].'name'", containsString("Trujillo"))
                .body("'data'.'cities'[132].'population'", numberMatches(919899.0))
                .body("'data'.'cities'[132].'timeZone'", nullValue())
                .body("'data'.'cities'[133].'geonamesID'", numberMatches(4580599.0))
                .body("'data'.'cities'[133].'name'", containsString("Greer"))
                .body("'data'.'cities'[133].'population'", numberMatches(27167.0))
                .body("'data'.'cities'[133].'timeZone'", nullValue())
                .body("'data'.'cities'[134].'geonamesID'", numberMatches(2353688.0))
                .body("'data'.'cities'[134].'name'", containsString("Yako"))
                .body("'data'.'cities'[134].'population'", numberMatches(38689.0))
                .body("'data'.'cities'[134].'timeZone'", nullValue())
                .body("'data'.'cities'[135].'geonamesID'", numberMatches(198629.0))
                .body("'data'.'cities'[135].'name'", containsString("Eldoret"))
                .body("'data'.'cities'[135].'population'", numberMatches(193830.0))
                .body("'data'.'cities'[135].'timeZone'", nullValue())
                .body("'data'.'cities'[136].'geonamesID'", numberMatches(4274317.0))
                .body("'data'.'cities'[136].'name'", containsString("Leawood"))
                .body("'data'.'cities'[136].'population'", numberMatches(31867.0))
                .body("'data'.'cities'[136].'timeZone'", nullValue())
                .body("'data'.'cities'[137].'geonamesID'", numberMatches(2800866.0))
                .body("'data'.'cities'[137].'name'", containsString("City of Brussels"))
                .body("'data'.'cities'[137].'population'", numberMatches(185103.0))
                .body("'data'.'cities'[137].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[137].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[138].'geonamesID'", numberMatches(146970.0))
                .body("'data'.'cities'[138].'name'", containsString("Stepanakert"))
                .body("'data'.'cities'[138].'population'", numberMatches(49848.0))
                .body("'data'.'cities'[138].'timeZone'.'name'", containsString("UTC+04:00"))
                .body("'data'.'cities'[138].'timeZone'.'offset'", numberMatches(4.0))
                .body("'data'.'cities'[139].'geonamesID'", numberMatches(4932879.0))
                .body("'data'.'cities'[139].'name'", containsString("Chelsea"))
                .body("'data'.'cities'[139].'population'", numberMatches(38861.0))
                .body("'data'.'cities'[139].'timeZone'", nullValue())
                .body("'data'.'cities'[140].'geonamesID'", numberMatches(158597.0))
                .body("'data'.'cities'[140].'name'", containsString("Kahama"))
                .body("'data'.'cities'[140].'population'", numberMatches(36014.0))
                .body("'data'.'cities'[140].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[140].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[141].'geonamesID'", numberMatches(1214204.0))
                .body("'data'.'cities'[141].'name'", containsString("Pematangsiantar"))
                .body("'data'.'cities'[141].'population'", numberMatches(278055.0))
                .body("'data'.'cities'[141].'timeZone'.'name'", containsString("UTC+07:00"))
                .body("'data'.'cities'[141].'timeZone'.'offset'", numberMatches(7.0))
                .body("'data'.'cities'[142].'geonamesID'", numberMatches(2929668.0))
                .body("'data'.'cities'[142].'name'", containsString("Erfurt"))
                .body("'data'.'cities'[142].'population'", numberMatches(213699.0))
                .body("'data'.'cities'[142].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[142].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[143].'geonamesID'", numberMatches(1528193.0))
                .body("'data'.'cities'[143].'name'", containsString("Kant"))
                .body("'data'.'cities'[143].'population'", numberMatches(21589.0))
                .body("'data'.'cities'[143].'timeZone'.'name'", containsString("UTC+06:00"))
                .body("'data'.'cities'[143].'timeZone'.'offset'", numberMatches(6.0))
                .body("'data'.'cities'[144].'geonamesID'", numberMatches(4734825.0))
                .body("'data'.'cities'[144].'name'", containsString("Sugar Land"))
                .body("'data'.'cities'[144].'population'", numberMatches(78817.0))
                .body("'data'.'cities'[144].'timeZone'", nullValue())
                .body("'data'.'cities'[145].'geonamesID'", numberMatches(1655559.0))
                .body("'data'.'cities'[145].'name'", containsString("Luang Prabang"))
                .body("'data'.'cities'[145].'population'", numberMatches(53792.0))
                .body("'data'.'cities'[145].'timeZone'", nullValue())
                .body("'data'.'cities'[146].'geonamesID'", numberMatches(1854803.0))
                .body("'data'.'cities'[146].'name'", containsString("Ōbu"))
                .body("'data'.'cities'[146].'population'", numberMatches(92562.0))
                .body("'data'.'cities'[146].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[146].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[147].'geonamesID'", numberMatches(2641598.0))
                .body("'data'.'cities'[147].'name'", containsString("Newport"))
                .body("'data'.'cities'[147].'population'", numberMatches(145700.0))
                .body("'data'.'cities'[147].'timeZone'", nullValue())
                .body("'data'.'cities'[148].'geonamesID'", numberMatches(4255466.0))
                .body("'data'.'cities'[148].'name'", containsString("Carmel"))
                .body("'data'.'cities'[148].'population'", numberMatches(101068.0))
                .body("'data'.'cities'[148].'timeZone'.'name'", containsString("UTC−05:00"))
                .body("'data'.'cities'[148].'timeZone'.'offset'", numberMatches(-5.0))
                .body("'data'.'cities'[149].'geonamesID'", numberMatches(2310046.0))
                .body("'data'.'cities'[149].'name'", containsString("Bata"))
                .body("'data'.'cities'[149].'population'", numberMatches(250770.0))
                .body("'data'.'cities'[149].'timeZone'", nullValue())
                .body("'data'.'cities'[150].'geonamesID'", numberMatches(3939285.0))
                .body("'data'.'cities'[150].'name'", containsString("Huaral"))
                .body("'data'.'cities'[150].'population'", numberMatches(79011.0))
                .body("'data'.'cities'[150].'timeZone'", nullValue())
                .body("'data'.'cities'[151].'geonamesID'", numberMatches(3448351.0))
                .body("'data'.'cities'[151].'name'", containsString("São Pedro da Aldeia"))
                .body("'data'.'cities'[151].'population'", numberMatches(87875.0))
                .body("'data'.'cities'[151].'timeZone'", nullValue())
                .body("'data'.'cities'[152].'geonamesID'", numberMatches(2677234.0))
                .body("'data'.'cities'[152].'name'", containsString("Skövde"))
                .body("'data'.'cities'[152].'population'", numberMatches(39543.0))
                .body("'data'.'cities'[152].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[152].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[153].'geonamesID'", numberMatches(6540118.0))
                .body("'data'.'cities'[153].'name'", containsString("Treviso"))
                .body("'data'.'cities'[153].'population'", numberMatches(84954.0))
                .body("'data'.'cities'[153].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[153].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[154].'geonamesID'", numberMatches(6558157.0))
                .body("'data'.'cities'[154].'name'", containsString("Reutlingen"))
                .body("'data'.'cities'[154].'population'", numberMatches(115966.0))
                .body("'data'.'cities'[154].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[154].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[155].'geonamesID'", numberMatches(3451668.0))
                .body("'data'.'cities'[155].'name'", containsString("Resende"))
                .body("'data'.'cities'[155].'population'", numberMatches(125214.0))
                .body("'data'.'cities'[155].'timeZone'", nullValue())
                .body("'data'.'cities'[156].'geonamesID'", numberMatches(3943789.0))
                .body("'data'.'cities'[156].'name'", containsString("Chincha Alta"))
                .body("'data'.'cities'[156].'population'", numberMatches(63671.0))
                .body("'data'.'cities'[156].'timeZone'", nullValue())
                .body("'data'.'cities'[157].'geonamesID'", numberMatches(740205.0))
                .body("'data'.'cities'[157].'name'", containsString("Saray, Tekirdağ"))
                .body("'data'.'cities'[157].'population'", numberMatches(49106.0))
                .body("'data'.'cities'[157].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[157].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[158].'geonamesID'", numberMatches(6558142.0))
                .body("'data'.'cities'[158].'name'", containsString("Lörrach"))
                .body("'data'.'cities'[158].'population'", numberMatches(49347.0))
                .body("'data'.'cities'[158].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[158].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[159].'geonamesID'", numberMatches(8010607.0))
                .body("'data'.'cities'[159].'name'", containsString("Rio Maior"))
                .body("'data'.'cities'[159].'population'", numberMatches(21192.0))
                .body("'data'.'cities'[159].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[159].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[160].'geonamesID'", numberMatches(1797873.0))
                .body("'data'.'cities'[160].'name'", containsString("Huai'an"))
                .body("'data'.'cities'[160].'population'", numberMatches(4799889.0))
                .body("'data'.'cities'[160].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[160].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[161].'geonamesID'", numberMatches(114584.0))
                .body("'data'.'cities'[161].'name'", containsString("Shushtar"))
                .body("'data'.'cities'[161].'population'", numberMatches(101878.0))
                .body("'data'.'cities'[161].'timeZone'", nullValue())
                .body("'data'.'cities'[162].'geonamesID'", numberMatches(6557568.0))
                .body("'data'.'cities'[162].'name'", containsString("Sankt Augustin"))
                .body("'data'.'cities'[162].'population'", numberMatches(55767.0))
                .body("'data'.'cities'[162].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[162].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[163].'geonamesID'", numberMatches(1738050.0))
                .body("'data'.'cities'[163].'name'", containsString("Miri"))
                .body("'data'.'cities'[163].'population'", numberMatches(234541.0))
                .body("'data'.'cities'[163].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[163].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[164].'geonamesID'", numberMatches(4152872.0))
                .body("'data'.'cities'[164].'name'", containsString("Daytona Beach"))
                .body("'data'.'cities'[164].'population'", numberMatches(61005.0))
                .body("'data'.'cities'[164].'timeZone'", nullValue())
                .body("'data'.'cities'[165].'geonamesID'", numberMatches(3461563.0))
                .body("'data'.'cities'[165].'name'", containsString("Ibirité"))
                .body("'data'.'cities'[165].'population'", numberMatches(158954.0))
                .body("'data'.'cities'[165].'timeZone'", nullValue())
                .body("'data'.'cities'[166].'geonamesID'", numberMatches(6557740.0))
                .body("'data'.'cities'[166].'name'", containsString("Maintal"))
                .body("'data'.'cities'[166].'population'", numberMatches(39298.0))
                .body("'data'.'cities'[166].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[166].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[167].'geonamesID'", numberMatches(6362988.0))
                .body("'data'.'cities'[167].'name'", containsString("Melilla"))
                .body("'data'.'cities'[167].'population'", numberMatches(87076.0))
                .body("'data'.'cities'[167].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[167].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[168].'geonamesID'", numberMatches(1268257.0))
                .body("'data'.'cities'[168].'name'", containsString("Kamarhati"))
                .body("'data'.'cities'[168].'population'", numberMatches(330211.0))
                .body("'data'.'cities'[168].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[168].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[169].'geonamesID'", numberMatches(3448632.0))
                .body("'data'.'cities'[169].'name'", containsString("São José dos Pinhais"))
                .body("'data'.'cities'[169].'population'", numberMatches(264210.0))
                .body("'data'.'cities'[169].'timeZone'", nullValue())
                .body("'data'.'cities'[170].'geonamesID'", numberMatches(262036.0))
                .body("'data'.'cities'[170].'name'", containsString("Glyfada"))
                .body("'data'.'cities'[170].'population'", numberMatches(87305.0))
                .body("'data'.'cities'[170].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[170].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[171].'geonamesID'", numberMatches(301350.0))
                .body("'data'.'cities'[171].'name'", containsString("Seferihisar"))
                .body("'data'.'cities'[171].'population'", numberMatches(44526.0))
                .body("'data'.'cities'[171].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[171].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[172].'geonamesID'", numberMatches(5355180.0))
                .body("'data'.'cities'[172].'name'", containsString("Hanford"))
                .body("'data'.'cities'[172].'population'", numberMatches(53967.0))
                .body("'data'.'cities'[172].'timeZone'", nullValue())
                .body("'data'.'cities'[173].'geonamesID'", numberMatches(4829762.0))
                .body("'data'.'cities'[173].'name'", containsString("Alabaster"))
                .body("'data'.'cities'[173].'population'", numberMatches(30352.0))
                .body("'data'.'cities'[173].'timeZone'.'name'", containsString("UTC−06:00"))
                .body("'data'.'cities'[173].'timeZone'.'offset'", numberMatches(-6.0))
                .body("'data'.'cities'[174].'geonamesID'", numberMatches(760924.0))
                .body("'data'.'cities'[174].'name'", containsString("Puławy"))
                .body("'data'.'cities'[174].'population'", numberMatches(49839.0))
                .body("'data'.'cities'[174].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[174].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[175].'geonamesID'", numberMatches(6357306.0))
                .body("'data'.'cities'[175].'name'", containsString("Ferrol"))
                .body("'data'.'cities'[175].'population'", numberMatches(65560.0))
                .body("'data'.'cities'[175].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[175].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[176].'geonamesID'", numberMatches(6356324.0))
                .body("'data'.'cities'[176].'name'", containsString("Vilanova i la Geltrú"))
                .body("'data'.'cities'[176].'population'", numberMatches(67733.0))
                .body("'data'.'cities'[176].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[176].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[177].'geonamesID'", numberMatches(640276.0))
                .body("'data'.'cities'[177].'name'", containsString("Raahe"))
                .body("'data'.'cities'[177].'population'", numberMatches(25165.0))
                .body("'data'.'cities'[177].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[177].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[178].'geonamesID'", numberMatches(3521342.0))
                .body("'data'.'cities'[178].'name'", containsString("Playa del Carmen"))
                .body("'data'.'cities'[178].'population'", numberMatches(304942.0))
                .body("'data'.'cities'[178].'timeZone'", nullValue())
                .body("'data'.'cities'[179].'geonamesID'", numberMatches(4116315.0))
                .body("'data'.'cities'[179].'name'", containsString("Jacksonville"))
                .body("'data'.'cities'[179].'population'", numberMatches(28364.0))
                .body("'data'.'cities'[179].'timeZone'", nullValue())
                .body("'data'.'cities'[180].'geonamesID'", numberMatches(2128570.0))
                .body("'data'.'cities'[180].'name'", containsString("Otaru"))
                .body("'data'.'cities'[180].'population'", numberMatches(112452.0))
                .body("'data'.'cities'[180].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[180].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[181].'geonamesID'", numberMatches(1849809.0))
                .body("'data'.'cities'[181].'name'", containsString("Toyota"))
                .body("'data'.'cities'[181].'population'", numberMatches(422106.0))
                .body("'data'.'cities'[181].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[181].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[182].'geonamesID'", numberMatches(6558445.0))
                .body("'data'.'cities'[182].'name'", containsString("Bückeburg"))
                .body("'data'.'cities'[182].'population'", numberMatches(19245.0))
                .body("'data'.'cities'[182].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[182].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[183].'geonamesID'", numberMatches(4263681.0))
                .body("'data'.'cities'[183].'name'", containsString("Richmond"))
                .body("'data'.'cities'[183].'population'", numberMatches(36812.0))
                .body("'data'.'cities'[183].'timeZone'", nullValue())
                .body("'data'.'cities'[184].'geonamesID'", numberMatches(2548489.0))
                .body("'data'.'cities'[184].'name'", containsString("Guercif"))
                .body("'data'.'cities'[184].'population'", numberMatches(90880.0))
                .body("'data'.'cities'[184].'timeZone'", nullValue())
                .body("'data'.'cities'[185].'geonamesID'", numberMatches(202882.0))
                .body("'data'.'cities'[185].'name'", containsString("Kabuga"))
                .body("'data'.'cities'[185].'population'", numberMatches(40202.0))
                .body("'data'.'cities'[185].'timeZone'", nullValue())
                .body("'data'.'cities'[186].'geonamesID'", numberMatches(7062967.0))
                .body("'data'.'cities'[186].'name'", containsString("Nyanza, Rwanda"))
                .body("'data'.'cities'[186].'population'", numberMatches(25417.0))
                .body("'data'.'cities'[186].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[186].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[187].'geonamesID'", numberMatches(3465038.0))
                .body("'data'.'cities'[187].'name'", containsString("Cuiabá"))
                .body("'data'.'cities'[187].'population'", numberMatches(585367.0))
                .body("'data'.'cities'[187].'timeZone'.'name'", containsString("UTC−04:00"))
                .body("'data'.'cities'[187].'timeZone'.'offset'", numberMatches(-4.0))
                .body("'data'.'cities'[188].'geonamesID'", numberMatches(6557980.0))
                .body("'data'.'cities'[188].'name'", containsString("Eppingen"))
                .body("'data'.'cities'[188].'population'", numberMatches(21819.0))
                .body("'data'.'cities'[188].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[188].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[189].'geonamesID'", numberMatches(2179537.0))
                .body("'data'.'cities'[189].'name'", containsString("Wellington"))
                .body("'data'.'cities'[189].'population'", numberMatches(418500.0))
                .body("'data'.'cities'[189].'timeZone'.'name'", containsString("UTC+12:00"))
                .body("'data'.'cities'[189].'timeZone'.'offset'", numberMatches(12.0))
                .body("'data'.'cities'[190].'geonamesID'", numberMatches(3074197.0))
                .body("'data'.'cities'[190].'name'", containsString("Jihlava"))
                .body("'data'.'cities'[190].'population'", numberMatches(51125.0))
                .body("'data'.'cities'[190].'timeZone'", nullValue())
                .body("'data'.'cities'[191].'geonamesID'", numberMatches(1684308.0))
                .body("'data'.'cities'[191].'name'", containsString("Taguig"))
                .body("'data'.'cities'[191].'population'", numberMatches(886722.0))
                .body("'data'.'cities'[191].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[191].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[192].'geonamesID'", numberMatches(6557787.0))
                .body("'data'.'cities'[192].'name'", containsString("Wetzlar"))
                .body("'data'.'cities'[192].'population'", numberMatches(52954.0))
                .body("'data'.'cities'[192].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[192].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[193].'geonamesID'", numberMatches(8632563.0))
                .body("'data'.'cities'[193].'name'", containsString("Lüleburgaz"))
                .body("'data'.'cities'[193].'population'", numberMatches(148037.0))
                .body("'data'.'cities'[193].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[193].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[194].'geonamesID'", numberMatches(99347.0))
                .body("'data'.'cities'[194].'name'", containsString("Hillah"))
                .body("'data'.'cities'[194].'population'", numberMatches(541034.0))
                .body("'data'.'cities'[194].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[194].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[195].'geonamesID'", numberMatches(4375663.0))
                .body("'data'.'cities'[195].'name'", containsString("Ballwin"))
                .body("'data'.'cities'[195].'population'", numberMatches(30404.0))
                .body("'data'.'cities'[195].'timeZone'.'name'", containsString("UTC−05:00"))
                .body("'data'.'cities'[195].'timeZone'.'offset'", numberMatches(-5.0))
                .body("'data'.'cities'[196].'geonamesID'", numberMatches(4392388.0))
                .body("'data'.'cities'[196].'name'", containsString("Jefferson City"))
                .body("'data'.'cities'[196].'population'", numberMatches(43079.0))
                .body("'data'.'cities'[196].'timeZone'.'name'", containsString("UTC−06:00"))
                .body("'data'.'cities'[196].'timeZone'.'offset'", numberMatches(-6.0))
                .body("'data'.'cities'[197].'geonamesID'", numberMatches(1697018.0))
                .body("'data'.'cities'[197].'name'", containsString("Ormoc"))
                .body("'data'.'cities'[197].'population'", numberMatches(230998.0))
                .body("'data'.'cities'[197].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[197].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[198].'geonamesID'", numberMatches(3567863.0))
                .body("'data'.'cities'[198].'name'", containsString("Banes"))
                .body("'data'.'cities'[198].'population'", numberMatches(34452.0))
                .body("'data'.'cities'[198].'timeZone'", nullValue())
                .body("'data'.'cities'[199].'geonamesID'", numberMatches(6541484.0))
                .body("'data'.'cities'[199].'name'", containsString("Imperia"))
                .body("'data'.'cities'[199].'population'", numberMatches(42602.0))
                .body("'data'.'cities'[199].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[199].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[200].'geonamesID'", numberMatches(1515029.0))
                .body("'data'.'cities'[200].'name'", containsString("Ulaangom"))
                .body("'data'.'cities'[200].'population'", numberMatches(26319.0))
                .body("'data'.'cities'[200].'timeZone'", nullValue())
                .body("'data'.'cities'[201].'geonamesID'", numberMatches(105072.0))
                .body("'data'.'cities'[201].'name'", containsString("Khamis Mushait"))
                .body("'data'.'cities'[201].'population'", numberMatches(99213.0))
                .body("'data'.'cities'[201].'timeZone'", nullValue())
                .body("'data'.'cities'[202].'geonamesID'", numberMatches(5397603.0))
                .body("'data'.'cities'[202].'name'", containsString("South Gate"))
                .body("'data'.'cities'[202].'population'", numberMatches(94396.0))
                .body("'data'.'cities'[202].'timeZone'", nullValue())
                .body("'data'.'cities'[203].'geonamesID'", numberMatches(2796492.0))
                .body("'data'.'cities'[203].'name'", containsString("Hasselt"))
                .body("'data'.'cities'[203].'population'", numberMatches(77651.0))
                .body("'data'.'cities'[203].'timeZone'", nullValue())
                .body("'data'.'cities'[204].'geonamesID'", numberMatches(7391363.0))
                .body("'data'.'cities'[204].'name'", containsString("Ureshino"))
                .body("'data'.'cities'[204].'population'", numberMatches(25593.0))
                .body("'data'.'cities'[204].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[204].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[205].'geonamesID'", numberMatches(4917358.0))
                .body("'data'.'cities'[205].'name'", containsString("Zion"))
                .body("'data'.'cities'[205].'population'", numberMatches(24413.0))
                .body("'data'.'cities'[205].'timeZone'", nullValue())
                .body("'data'.'cities'[206].'geonamesID'", numberMatches(1175021.0))
                .body("'data'.'cities'[206].'name'", containsString("Kandhkot"))
                .body("'data'.'cities'[206].'population'", numberMatches(105011.0))
                .body("'data'.'cities'[206].'timeZone'", nullValue())
                .body("'data'.'cities'[207].'geonamesID'", numberMatches(4063619.0))
                .body("'data'.'cities'[207].'name'", containsString("Gadsden"))
                .body("'data'.'cities'[207].'population'", numberMatches(38978.0))
                .body("'data'.'cities'[207].'timeZone'", nullValue())
                .body("'data'.'cities'[208].'geonamesID'", numberMatches(5027117.0))
                .body("'data'.'cities'[208].'name'", containsString("Forest Lake"))
                .body("'data'.'cities'[208].'population'", numberMatches(18375.0))
                .body("'data'.'cities'[208].'timeZone'", nullValue())
                .body("'data'.'cities'[209].'geonamesID'", numberMatches(146214.0))
                .body("'data'.'cities'[209].'name'", containsString("Paphos"))
                .body("'data'.'cities'[209].'population'", numberMatches(35961.0))
                .body("'data'.'cities'[209].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[209].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[210].'geonamesID'", numberMatches(4094212.0))
                .body("'data'.'cities'[210].'name'", containsString("Trussville"))
                .body("'data'.'cities'[210].'population'", numberMatches(20368.0))
                .body("'data'.'cities'[210].'timeZone'", nullValue())
                .body("'data'.'cities'[211].'geonamesID'", numberMatches(2112141.0))
                .body("'data'.'cities'[211].'name'", containsString("Kōriyama"))
                .body("'data'.'cities'[211].'population'", numberMatches(329706.0))
                .body("'data'.'cities'[211].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[211].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[212].'geonamesID'", numberMatches(2792406.0))
                .body("'data'.'cities'[212].'name'", containsString("Lier"))
                .body("'data'.'cities'[212].'population'", numberMatches(36646.0))
                .body("'data'.'cities'[212].'timeZone'", nullValue())
                .body("'data'.'cities'[213].'geonamesID'", numberMatches(2396646.0))
                .body("'data'.'cities'[213].'name'", containsString("Oyem"))
                .body("'data'.'cities'[213].'population'", numberMatches(60685.0))
                .body("'data'.'cities'[213].'timeZone'", nullValue())
                .body("'data'.'cities'[214].'geonamesID'", numberMatches(3063739.0))
                .body("'data'.'cities'[214].'name'", containsString("Uherské Hradiště"))
                .body("'data'.'cities'[214].'population'", numberMatches(25001.0))
                .body("'data'.'cities'[214].'timeZone'", nullValue())
                .body("'data'.'cities'[215].'geonamesID'", numberMatches(147271.0))
                .body("'data'.'cities'[215].'name'", containsString("Salyan"))
                .body("'data'.'cities'[215].'population'", numberMatches(30396.0))
                .body("'data'.'cities'[215].'timeZone'.'name'", containsString("UTC+04:00"))
                .body("'data'.'cities'[215].'timeZone'.'offset'", numberMatches(4.0))
                .body("'data'.'cities'[216].'geonamesID'", numberMatches(5523369.0))
                .body("'data'.'cities'[216].'name'", containsString("Horizon City"))
                .body("'data'.'cities'[216].'population'", numberMatches(19232.0))
                .body("'data'.'cities'[216].'timeZone'", nullValue())
                .body("'data'.'cities'[217].'geonamesID'", numberMatches(4948247.0))
                .body("'data'.'cities'[217].'name'", containsString("Quincy"))
                .body("'data'.'cities'[217].'population'", numberMatches(92271.0))
                .body("'data'.'cities'[217].'timeZone'", nullValue())
                .body("'data'.'cities'[218].'geonamesID'", numberMatches(4682464.0))
                .body("'data'.'cities'[218].'name'", containsString("College Station"))
                .body("'data'.'cities'[218].'population'", numberMatches(93857.0))
                .body("'data'.'cities'[218].'timeZone'", nullValue())
                .body("'data'.'cities'[219].'geonamesID'", numberMatches(3470044.0))
                .body("'data'.'cities'[219].'name'", containsString("Betim"))
                .body("'data'.'cities'[219].'population'", numberMatches(378089.0))
                .body("'data'.'cities'[219].'timeZone'", nullValue())
                .body("'data'.'cities'[220].'geonamesID'", numberMatches(3406545.0))
                .body("'data'.'cities'[220].'name'", containsString("Balsas"))
                .body("'data'.'cities'[220].'population'", numberMatches(101456.0))
                .body("'data'.'cities'[220].'timeZone'.'name'", containsString("UTC−03:00"))
                .body("'data'.'cities'[220].'timeZone'.'offset'", numberMatches(-3.0))
                .body("'data'.'cities'[221].'geonamesID'", numberMatches(5788054.0))
                .body("'data'.'cities'[221].'name'", containsString("Bremerton"))
                .body("'data'.'cities'[221].'population'", numberMatches(37729.0))
                .body("'data'.'cities'[221].'timeZone'.'name'", containsString("UTC−08:00"))
                .body("'data'.'cities'[221].'timeZone'.'offset'", numberMatches(-8.0))
                .body("'data'.'cities'[222].'geonamesID'", numberMatches(3838797.0))
                .body("'data'.'cities'[222].'name'", containsString("Río Segundo"))
                .body("'data'.'cities'[222].'population'", numberMatches(19713.0))
                .body("'data'.'cities'[222].'timeZone'.'name'", containsString("UTC−03:00"))
                .body("'data'.'cities'[222].'timeZone'.'offset'", numberMatches(-3.0))
                .body("'data'.'cities'[223].'geonamesID'", numberMatches(293619.0))
                .body("'data'.'cities'[223].'name'", containsString("Sderot"))
                .body("'data'.'cities'[223].'population'", numberMatches(23090.0))
                .body("'data'.'cities'[223].'timeZone'", nullValue())
                .body("'data'.'cities'[224].'geonamesID'", numberMatches(3625549.0))
                .body("'data'.'cities'[224].'name'", containsString("Valencia"))
                .body("'data'.'cities'[224].'population'", numberMatches(1484430.0))
                .body("'data'.'cities'[224].'timeZone'.'name'", containsString("UTC−04:00"))
                .body("'data'.'cities'[224].'timeZone'.'offset'", numberMatches(-4.0))
                .body("'data'.'cities'[225].'geonamesID'", numberMatches(4274277.0))
                .body("'data'.'cities'[225].'name'", containsString("Lawrence"))
                .body("'data'.'cities'[225].'population'", numberMatches(87643.0))
                .body("'data'.'cities'[225].'timeZone'", nullValue())
                .body("'data'.'cities'[226].'geonamesID'", numberMatches(3445993.0))
                .body("'data'.'cities'[226].'name'", containsString("Tubarão"))
                .body("'data'.'cities'[226].'population'", numberMatches(106422.0))
                .body("'data'.'cities'[226].'timeZone'", nullValue())
                .body("'data'.'cities'[227].'geonamesID'", numberMatches(3430595.0))
                .body("'data'.'cities'[227].'name'", containsString("Monte Chingolo"))
                .body("'data'.'cities'[227].'population'", numberMatches(85060.0))
                .body("'data'.'cities'[227].'timeZone'.'name'", containsString("UTC−03:00"))
                .body("'data'.'cities'[227].'timeZone'.'offset'", numberMatches(-3.0))
                .body("'data'.'cities'[228].'geonamesID'", numberMatches(6929460.0))
                .body("'data'.'cities'[228].'name'", containsString("Panzhihua"))
                .body("'data'.'cities'[228].'population'", numberMatches(1144000.0))
                .body("'data'.'cities'[228].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[228].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[229].'geonamesID'", numberMatches(4520760.0))
                .body("'data'.'cities'[229].'name'", containsString("Oxford"))
                .body("'data'.'cities'[229].'population'", numberMatches(21943.0))
                .body("'data'.'cities'[229].'timeZone'", nullValue())
                .body("'data'.'cities'[230].'geonamesID'", numberMatches(5774001.0))
                .body("'data'.'cities'[230].'name'", containsString("Draper"))
                .body("'data'.'cities'[230].'population'", numberMatches(42274.0))
                .body("'data'.'cities'[230].'timeZone'", nullValue())
                .body("'data'.'cities'[231].'geonamesID'", numberMatches(4379966.0))
                .body("'data'.'cities'[231].'name'", containsString("Cape Girardeau"))
                .body("'data'.'cities'[231].'population'", numberMatches(37941.0))
                .body("'data'.'cities'[231].'timeZone'", nullValue())
                .body("'data'.'cities'[232].'geonamesID'", numberMatches(243787.0))
                .body("'data'.'cities'[232].'name'", containsString("Goz Beïda"))
                .body("'data'.'cities'[232].'population'", numberMatches(66107.0))
                .body("'data'.'cities'[232].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[232].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[233].'geonamesID'", numberMatches(6362419.0))
                .body("'data'.'cities'[233].'name'", containsString("Portugalete"))
                .body("'data'.'cities'[233].'population'", numberMatches(45746.0))
                .body("'data'.'cities'[233].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[233].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[234].'geonamesID'", numberMatches(3461311.0))
                .body("'data'.'cities'[234].'name'", containsString("Indaiatuba"))
                .body("'data'.'cities'[234].'population'", numberMatches(231033.0))
                .body("'data'.'cities'[234].'timeZone'", nullValue())
                .body("'data'.'cities'[235].'geonamesID'", numberMatches(2224827.0))
                .body("'data'.'cities'[235].'name'", containsString("Ngaoundéré"))
                .body("'data'.'cities'[235].'population'", numberMatches(189800.0))
                .body("'data'.'cities'[235].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[235].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[236].'geonamesID'", numberMatches(783263.0))
                .body("'data'.'cities'[236].'name'", containsString("Elbasan"))
                .body("'data'.'cities'[236].'population'", numberMatches(78703.0))
                .body("'data'.'cities'[236].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[236].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[237].'geonamesID'", numberMatches(5309842.0))
                .body("'data'.'cities'[237].'name'", containsString("Prescott"))
                .body("'data'.'cities'[237].'population'", numberMatches(40590.0))
                .body("'data'.'cities'[237].'timeZone'", nullValue())
                .body("'data'.'cities'[238].'geonamesID'", numberMatches(864512.0))
                .body("'data'.'cities'[238].'name'", containsString("Mažeikiai"))
                .body("'data'.'cities'[238].'population'", numberMatches(32477.0))
                .body("'data'.'cities'[238].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[238].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[239].'geonamesID'", numberMatches(7407411.0))
                .body("'data'.'cities'[239].'name'", containsString("Asakura"))
                .body("'data'.'cities'[239].'population'", numberMatches(49254.0))
                .body("'data'.'cities'[239].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[239].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[240].'geonamesID'", numberMatches(1812728.0))
                .body("'data'.'cities'[240].'name'", containsString("Dingzhou"))
                .body("'data'.'cities'[240].'population'", numberMatches(1165182.0))
                .body("'data'.'cities'[240].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[240].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[241].'geonamesID'", numberMatches(4146166.0))
                .body("'data'.'cities'[241].'name'", containsString("Apopka"))
                .body("'data'.'cities'[241].'population'", numberMatches(41542.0))
                .body("'data'.'cities'[241].'timeZone'.'name'", containsString("UTC−05:00"))
                .body("'data'.'cities'[241].'timeZone'.'offset'", numberMatches(-5.0))
                .body("'data'.'cities'[242].'geonamesID'", numberMatches(1805679.0))
                .body("'data'.'cities'[242].'name'", containsString("Jingdezhen"))
                .body("'data'.'cities'[242].'population'", numberMatches(1587477.0))
                .body("'data'.'cities'[242].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[242].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[243].'geonamesID'", numberMatches(99454.0))
                .body("'data'.'cities'[243].'name'", containsString("Fallujah"))
                .body("'data'.'cities'[243].'population'", numberMatches(326471.0))
                .body("'data'.'cities'[243].'timeZone'", nullValue())
                .body("'data'.'cities'[244].'geonamesID'", numberMatches(4178003.0))
                .body("'data'.'cities'[244].'name'", containsString("Weston"))
                .body("'data'.'cities'[244].'population'", numberMatches(65333.0))
                .body("'data'.'cities'[244].'timeZone'", nullValue())
                .body("'data'.'cities'[245].'geonamesID'", numberMatches(1785781.0))
                .body("'data'.'cities'[245].'name'", containsString("Yulin"))
                .body("'data'.'cities'[245].'population'", numberMatches(5487368.0))
                .body("'data'.'cities'[245].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[245].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[246].'geonamesID'", numberMatches(4265737.0))
                .body("'data'.'cities'[246].'name'", containsString("Terre Haute"))
                .body("'data'.'cities'[246].'population'", numberMatches(60785.0))
                .body("'data'.'cities'[246].'timeZone'", nullValue())
                .body("'data'.'cities'[247].'geonamesID'", numberMatches(1164988.0))
                .body("'data'.'cities'[247].'name'", containsString("Shorkot"))
                .body("'data'.'cities'[247].'population'", numberMatches(71469.0))
                .body("'data'.'cities'[247].'timeZone'", nullValue())
                .body("'data'.'cities'[248].'geonamesID'", numberMatches(1283582.0))
                .body("'data'.'cities'[248].'name'", containsString("Biratnagar"))
                .body("'data'.'cities'[248].'population'", numberMatches(242548.0))
                .body("'data'.'cities'[248].'timeZone'", nullValue())
                .body("'data'.'cities'[249].'geonamesID'", numberMatches(6319369.0))
                .body("'data'.'cities'[249].'name'", containsString("Ananindeua"))
                .body("'data'.'cities'[249].'population'", numberMatches(535547.0))
                .body("'data'.'cities'[249].'timeZone'.'name'", containsString("UTC−03:00"))
                .body("'data'.'cities'[249].'timeZone'.'offset'", numberMatches(-3.0))
                .body("'data'.'cities'[250].'geonamesID'", numberMatches(1262292.0))
                .body("'data'.'cities'[250].'name'", containsString("Nadiad, Gujarat"))
                .body("'data'.'cities'[250].'population'", numberMatches(225132.0))
                .body("'data'.'cities'[250].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[250].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[251].'geonamesID'", numberMatches(2944368.0))
                .body("'data'.'cities'[251].'name'", containsString("Bremerhaven"))
                .body("'data'.'cities'[251].'population'", numberMatches(113634.0))
                .body("'data'.'cities'[251].'timeZone'", nullValue())
                .body("'data'.'cities'[252].'geonamesID'", numberMatches(3644918.0))
                .body("'data'.'cities'[252].'name'", containsString("Cúa"))
                .body("'data'.'cities'[252].'population'", numberMatches(214823.0))
                .body("'data'.'cities'[252].'timeZone'", nullValue())
                .body("'data'.'cities'[253].'geonamesID'", numberMatches(8583252.0))
                .body("'data'.'cities'[253].'name'", containsString("Zacatlán"))
                .body("'data'.'cities'[253].'population'", numberMatches(33736.0))
                .body("'data'.'cities'[253].'timeZone'", nullValue())
                .body("'data'.'cities'[254].'geonamesID'", numberMatches(6357736.0))
                .body("'data'.'cities'[254].'name'", containsString("Loja"))
                .body("'data'.'cities'[254].'population'", numberMatches(20419.0))
                .body("'data'.'cities'[254].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[254].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[255].'geonamesID'", numberMatches(2800482.0))
                .body("'data'.'cities'[255].'name'", containsString("Charleroi"))
                .body("'data'.'cities'[255].'population'", numberMatches(201816.0))
                .body("'data'.'cities'[255].'timeZone'", nullValue())
                .body("'data'.'cities'[256].'geonamesID'", numberMatches(5392868.0))
                .body("'data'.'cities'[256].'name'", containsString("Sanger"))
                .body("'data'.'cities'[256].'population'", numberMatches(24270.0))
                .body("'data'.'cities'[256].'timeZone'", nullValue())
                .body("'data'.'cities'[257].'geonamesID'", numberMatches(6557659.0))
                .body("'data'.'cities'[257].'name'", containsString("Ennepetal"))
                .body("'data'.'cities'[257].'population'", numberMatches(30075.0))
                .body("'data'.'cities'[257].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[257].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[258].'geonamesID'", numberMatches(4716805.0))
                .body("'data'.'cities'[258].'name'", containsString("Orange"))
                .body("'data'.'cities'[258].'population'", numberMatches(18643.0))
                .body("'data'.'cities'[258].'timeZone'", nullValue())
                .body("'data'.'cities'[259].'geonamesID'", numberMatches(627904.0))
                .body("'data'.'cities'[259].'name'", containsString("Grodno"))
                .body("'data'.'cities'[259].'population'", numberMatches(356900.0))
                .body("'data'.'cities'[259].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[259].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[260].'geonamesID'", numberMatches(258620.0))
                .body("'data'.'cities'[260].'name'", containsString("Lamia"))
                .body("'data'.'cities'[260].'population'", numberMatches(52006.0))
                .body("'data'.'cities'[260].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[260].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[261].'geonamesID'", numberMatches(311073.0))
                .body("'data'.'cities'[261].'name'", containsString("Isparta"))
                .body("'data'.'cities'[261].'population'", numberMatches(258375.0))
                .body("'data'.'cities'[261].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[261].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[262].'geonamesID'", numberMatches(1273874.0))
                .body("'data'.'cities'[262].'name'", containsString("Kochi"))
                .body("'data'.'cities'[262].'population'", numberMatches(677381.0))
                .body("'data'.'cities'[262].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[262].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[263].'geonamesID'", numberMatches(3719028.0))
                .body("'data'.'cities'[263].'name'", containsString("Pétion-Ville"))
                .body("'data'.'cities'[263].'population'", numberMatches(376834.0))
                .body("'data'.'cities'[263].'timeZone'", nullValue())
                .body("'data'.'cities'[264].'geonamesID'", numberMatches(2037013.0))
                .body("'data'.'cities'[264].'name'", containsString("Harbin"))
                .body("'data'.'cities'[264].'population'", numberMatches(5015000.0))
                .body("'data'.'cities'[264].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[264].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[265].'geonamesID'", numberMatches(1712520.0))
                .body("'data'.'cities'[265].'name'", containsString("Guihulngan"))
                .body("'data'.'cities'[265].'population'", numberMatches(102656.0))
                .body("'data'.'cities'[265].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[265].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[266].'geonamesID'", numberMatches(1848499.0))
                .body("'data'.'cities'[266].'name'", containsString("Yashio"))
                .body("'data'.'cities'[266].'population'", numberMatches(93283.0))
                .body("'data'.'cities'[266].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[266].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[267].'geonamesID'", numberMatches(5262649.0))
                .body("'data'.'cities'[267].'name'", containsString("Mequon"))
                .body("'data'.'cities'[267].'population'", numberMatches(23132.0))
                .body("'data'.'cities'[267].'timeZone'", nullValue())
                .body("'data'.'cities'[268].'geonamesID'", numberMatches(8394316.0))
                .body("'data'.'cities'[268].'name'", containsString("Unaizah"))
                .body("'data'.'cities'[268].'population'", numberMatches(152895.0))
                .body("'data'.'cities'[268].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[268].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[269].'geonamesID'", numberMatches(3044821.0))
                .body("'data'.'cities'[269].'name'", containsString("Százhalombatta"))
                .body("'data'.'cities'[269].'population'", numberMatches(18241.0))
                .body("'data'.'cities'[269].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[269].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[270].'geonamesID'", numberMatches(2653266.0))
                .body("'data'.'cities'[270].'name'", containsString("Chelmsford"))
                .body("'data'.'cities'[270].'population'", numberMatches(115369.0))
                .body("'data'.'cities'[270].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[270].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[271].'geonamesID'", numberMatches(1484839.0))
                .body("'data'.'cities'[271].'name'", containsString("Tashkent"))
                .body("'data'.'cities'[271].'population'", numberMatches(2424100.0))
                .body("'data'.'cities'[271].'timeZone'.'name'", containsString("UTC+05:00"))
                .body("'data'.'cities'[271].'timeZone'.'offset'", numberMatches(5.0))
                .body("'data'.'cities'[272].'geonamesID'", numberMatches(5367565.0))
                .body("'data'.'cities'[272].'name'", containsString("Lodi"))
                .body("'data'.'cities'[272].'population'", numberMatches(62134.0))
                .body("'data'.'cities'[272].'timeZone'", nullValue())
                .body("'data'.'cities'[273].'geonamesID'", numberMatches(163345.0))
                .body("'data'.'cities'[273].'name'", containsString("Tartus"))
                .body("'data'.'cities'[273].'population'", numberMatches(89457.0))
                .body("'data'.'cities'[273].'timeZone'", nullValue())
                .body("'data'.'cities'[274].'geonamesID'", numberMatches(5844096.0))
                .body("'data'.'cities'[274].'name'", containsString("American Fork"))
                .body("'data'.'cities'[274].'population'", numberMatches(27147.0))
                .body("'data'.'cities'[274].'timeZone'", nullValue())
                .body("'data'.'cities'[275].'geonamesID'", numberMatches(3111605.0))
                .body("'data'.'cities'[275].'name'", containsString("Ripollet"))
                .body("'data'.'cities'[275].'population'", numberMatches(38347.0))
                .body("'data'.'cities'[275].'timeZone'", nullValue())
                .body("'data'.'cities'[276].'geonamesID'", numberMatches(6556231.0))
                .body("'data'.'cities'[276].'name'", containsString("Olching"))
                .body("'data'.'cities'[276].'population'", numberMatches(27741.0))
                .body("'data'.'cities'[276].'timeZone'", nullValue())
                .body("'data'.'cities'[277].'geonamesID'", numberMatches(895061.0))
                .body("'data'.'cities'[277].'name'", containsString("Bindura"))
                .body("'data'.'cities'[277].'population'", numberMatches(46275.0))
                .body("'data'.'cities'[277].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[277].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[278].'geonamesID'", numberMatches(6558111.0))
                .body("'data'.'cities'[278].'name'", containsString("Offenburg"))
                .body("'data'.'cities'[278].'population'", numberMatches(59646.0))
                .body("'data'.'cities'[278].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[278].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[279].'geonamesID'", numberMatches(787595.0))
                .body("'data'.'cities'[279].'name'", containsString("Novi Pazar"))
                .body("'data'.'cities'[279].'population'", numberMatches(66527.0))
                .body("'data'.'cities'[279].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[279].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[280].'geonamesID'", numberMatches(1784130.0))
                .body("'data'.'cities'[280].'name'", containsString("Zhoukou"))
                .body("'data'.'cities'[280].'population'", numberMatches(9901000.0))
                .body("'data'.'cities'[280].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[280].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[281].'geonamesID'", numberMatches(8632419.0))
                .body("'data'.'cities'[281].'name'", containsString("Kınık"))
                .body("'data'.'cities'[281].'population'", numberMatches(29803.0))
                .body("'data'.'cities'[281].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[281].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[282].'geonamesID'", numberMatches(1640344.0))
                .body("'data'.'cities'[282].'name'", containsString("Kendari"))
                .body("'data'.'cities'[282].'population'", numberMatches(331013.0))
                .body("'data'.'cities'[282].'timeZone'.'name'", containsString("UTC+07:00"))
                .body("'data'.'cities'[282].'timeZone'.'offset'", numberMatches(7.0))
                .body("'data'.'cities'[283].'geonamesID'", numberMatches(1786217.0))
                .body("'data'.'cities'[283].'name'", containsString("Yongzhou"))
                .body("'data'.'cities'[283].'population'", numberMatches(5446100.0))
                .body("'data'.'cities'[283].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[283].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[284].'geonamesID'", numberMatches(1849862.0))
                .body("'data'.'cities'[284].'name'", containsString("Toyoake"))
                .body("'data'.'cities'[284].'population'", numberMatches(69389.0))
                .body("'data'.'cities'[284].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[284].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[285].'geonamesID'", numberMatches(3624370.0))
                .body("'data'.'cities'[285].'name'", containsString("Cartago"))
                .body("'data'.'cities'[285].'population'", numberMatches(151774.0))
                .body("'data'.'cities'[285].'timeZone'", nullValue())
                .body("'data'.'cities'[286].'geonamesID'", numberMatches(3468403.0))
                .body("'data'.'cities'[286].'name'", containsString("Cachoeirinha"))
                .body("'data'.'cities'[286].'population'", numberMatches(118278.0))
                .body("'data'.'cities'[286].'timeZone'", nullValue())
                .body("'data'.'cities'[287].'geonamesID'", numberMatches(2989317.0))
                .body("'data'.'cities'[287].'name'", containsString("Orléans"))
                .body("'data'.'cities'[287].'population'", numberMatches(116238.0))
                .body("'data'.'cities'[287].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[287].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[288].'geonamesID'", numberMatches(6053154.0))
                .body("'data'.'cities'[288].'name'", containsString("Lethbridge"))
                .body("'data'.'cities'[288].'population'", numberMatches(92729.0))
                .body("'data'.'cities'[288].'timeZone'", nullValue())
                .body("'data'.'cities'[289].'geonamesID'", numberMatches(3068927.0))
                .body("'data'.'cities'[289].'name'", containsString("Opava"))
                .body("'data'.'cities'[289].'population'", numberMatches(55996.0))
                .body("'data'.'cities'[289].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[289].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[290].'geonamesID'", numberMatches(256866.0))
                .body("'data'.'cities'[290].'name'", containsString("Mytilene"))
                .body("'data'.'cities'[290].'population'", numberMatches(27871.0))
                .body("'data'.'cities'[290].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[290].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[291].'geonamesID'", numberMatches(6949678.0))
                .body("'data'.'cities'[291].'name'", containsString("Taitung City"))
                .body("'data'.'cities'[291].'population'", numberMatches(108905.0))
                .body("'data'.'cities'[291].'timeZone'", nullValue())
                .body("'data'.'cities'[292].'geonamesID'", numberMatches(293397.0))
                .body("'data'.'cities'[292].'name'", containsString("Tel Aviv"))
                .body("'data'.'cities'[292].'population'", numberMatches(451523.0))
                .body("'data'.'cities'[292].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[292].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[293].'geonamesID'", numberMatches(3386496.0))
                .body("'data'.'cities'[293].'name'", containsString("Teresina"))
                .body("'data'.'cities'[293].'population'", numberMatches(847430.0))
                .body("'data'.'cities'[293].'timeZone'", nullValue())
                .body("'data'.'cities'[294].'geonamesID'", numberMatches(4151316.0))
                .body("'data'.'cities'[294].'name'", containsString("Clearwater"))
                .body("'data'.'cities'[294].'population'", numberMatches(107685.0))
                .body("'data'.'cities'[294].'timeZone'", nullValue())
                .body("'data'.'cities'[295].'geonamesID'", numberMatches(3221111.0))
                .body("'data'.'cities'[295].'name'", containsString("Hamm"))
                .body("'data'.'cities'[295].'population'", numberMatches(179111.0))
                .body("'data'.'cities'[295].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[295].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[296].'geonamesID'", numberMatches(4172372.0))
                .body("'data'.'cities'[296].'name'", containsString("Sebastian"))
                .body("'data'.'cities'[296].'population'", numberMatches(21921.0))
                .body("'data'.'cities'[296].'timeZone'", nullValue())
                .body("'data'.'cities'[297].'geonamesID'", numberMatches(1851348.0))
                .body("'data'.'cities'[297].'name'", containsString("Suzuka"))
                .body("'data'.'cities'[297].'population'", numberMatches(195250.0))
                .body("'data'.'cities'[297].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[297].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[298].'geonamesID'", numberMatches(1798821.0))
                .body("'data'.'cities'[298].'name'", containsString("Pingdu"))
                .body("'data'.'cities'[298].'population'", numberMatches(1378900.0))
                .body("'data'.'cities'[298].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[298].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[299].'geonamesID'", numberMatches(5427946.0))
                .body("'data'.'cities'[299].'name'", containsString("Lakewood"))
                .body("'data'.'cities'[299].'population'", numberMatches(142980.0))
                .body("'data'.'cities'[299].'timeZone'", nullValue())
                .body("'data'.'cities'[300].'geonamesID'", numberMatches(3052542.0))
                .body("'data'.'cities'[300].'name'", containsString("Fót"))
                .body("'data'.'cities'[300].'population'", numberMatches(19674.0))
                .body("'data'.'cities'[300].'timeZone'", nullValue())
                .body("'data'.'cities'[301].'geonamesID'", numberMatches(5004005.0))
                .body("'data'.'cities'[301].'name'", containsString("Norton Shores"))
                .body("'data'.'cities'[301].'population'", numberMatches(23994.0))
                .body("'data'.'cities'[301].'timeZone'", nullValue())
                .body("'data'.'cities'[302].'geonamesID'", numberMatches(1268761.0))
                .body("'data'.'cities'[302].'name'", containsString("Junnar"))
                .body("'data'.'cities'[302].'population'", numberMatches(40000.0))
                .body("'data'.'cities'[302].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[302].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[303].'geonamesID'", numberMatches(3077929.0))
                .body("'data'.'cities'[303].'name'", containsString("Česká Lípa"))
                .body("'data'.'cities'[303].'population'", numberMatches(37361.0))
                .body("'data'.'cities'[303].'timeZone'", nullValue())
                .body("'data'.'cities'[304].'geonamesID'", numberMatches(828310.0))
                .body("'data'.'cities'[304].'name'", containsString("Kutaisi"))
                .body("'data'.'cities'[304].'population'", numberMatches(147900.0))
                .body("'data'.'cities'[304].'timeZone'.'name'", containsString("UTC+04:00"))
                .body("'data'.'cities'[304].'timeZone'.'offset'", numberMatches(4.0))
                .body("'data'.'cities'[305].'geonamesID'", numberMatches(1647866.0))
                .body("'data'.'cities'[305].'name'", containsString("Bukittinggi"))
                .body("'data'.'cities'[305].'population'", numberMatches(113326.0))
                .body("'data'.'cities'[305].'timeZone'.'name'", containsString("UTC+07:00"))
                .body("'data'.'cities'[305].'timeZone'.'offset'", numberMatches(7.0))
                .body("'data'.'cities'[306].'geonamesID'", numberMatches(1859955.0))
                .body("'data'.'cities'[306].'name'", containsString("Kashiba"))
                .body("'data'.'cities'[306].'population'", numberMatches(78346.0))
                .body("'data'.'cities'[306].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[306].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[307].'geonamesID'", numberMatches(3145580.0))
                .body("'data'.'cities'[307].'name'", containsString("Molde"))
                .body("'data'.'cities'[307].'population'", numberMatches(21103.0))
                .body("'data'.'cities'[307].'timeZone'", nullValue())
                .body("'data'.'cities'[308].'geonamesID'", numberMatches(1793724.0))
                .body("'data'.'cities'[308].'name'", containsString("Tai'an"))
                .body("'data'.'cities'[308].'population'", numberMatches(5494207.0))
                .body("'data'.'cities'[308].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[308].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[309].'geonamesID'", numberMatches(5386754.0))
                .body("'data'.'cities'[309].'name'", containsString("Redlands"))
                .body("'data'.'cities'[309].'population'", numberMatches(63591.0))
                .body("'data'.'cities'[309].'timeZone'.'name'", containsString("UTC−08:00"))
                .body("'data'.'cities'[309].'timeZone'.'offset'", numberMatches(-8.0))
                .body("'data'.'cities'[310].'geonamesID'", numberMatches(2040893.0))
                .body("'data'.'cities'[310].'name'", containsString("Sinuiju"))
                .body("'data'.'cities'[310].'population'", numberMatches(352000.0))
                .body("'data'.'cities'[310].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[310].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[311].'geonamesID'", numberMatches(6113365.0))
                .body("'data'.'cities'[311].'name'", containsString("Prince George"))
                .body("'data'.'cities'[311].'population'", numberMatches(74003.0))
                .body("'data'.'cities'[311].'timeZone'", nullValue())
                .body("'data'.'cities'[312].'geonamesID'", numberMatches(302043.0))
                .body("'data'.'cities'[312].'name'", containsString("Salihli"))
                .body("'data'.'cities'[312].'population'", numberMatches(161562.0))
                .body("'data'.'cities'[312].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[312].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[313].'geonamesID'", numberMatches(4506008.0))
                .body("'data'.'cities'[313].'name'", containsString("Beavercreek"))
                .body("'data'.'cities'[313].'population'", numberMatches(45193.0))
                .body("'data'.'cities'[313].'timeZone'", nullValue())
                .body("'data'.'cities'[314].'geonamesID'", numberMatches(1927639.0))
                .body("'data'.'cities'[314].'name'", containsString("Yueyang"))
                .body("'data'.'cities'[314].'population'", numberMatches(5771300.0))
                .body("'data'.'cities'[314].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[314].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[315].'geonamesID'", numberMatches(1184845.0))
                .body("'data'.'cities'[315].'name'", containsString("Ahmadpur East"))
                .body("'data'.'cities'[315].'population'", numberMatches(128112.0))
                .body("'data'.'cities'[315].'timeZone'", nullValue())
                .body("'data'.'cities'[316].'geonamesID'", numberMatches(3056508.0))
                .body("'data'.'cities'[316].'name'", containsString("Žilina"))
                .body("'data'.'cities'[316].'population'", numberMatches(82704.0))
                .body("'data'.'cities'[316].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[316].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[317].'geonamesID'", numberMatches(1805953.0))
                .body("'data'.'cities'[317].'name'", containsString("Jiaxing"))
                .body("'data'.'cities'[317].'population'", numberMatches(4501657.0))
                .body("'data'.'cities'[317].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[317].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[318].'geonamesID'", numberMatches(3674600.0))
                .body("'data'.'cities'[318].'name'", containsString("Santa Cruz de Mompox"))
                .body("'data'.'cities'[318].'population'", numberMatches(45417.0))
                .body("'data'.'cities'[318].'timeZone'", nullValue())
                .body("'data'.'cities'[319].'geonamesID'", numberMatches(5000500.0))
                .body("'data'.'cities'[319].'name'", containsString("Madison Heights"))
                .body("'data'.'cities'[319].'population'", numberMatches(29694.0))
                .body("'data'.'cities'[319].'timeZone'", nullValue())
                .body("'data'.'cities'[320].'geonamesID'", numberMatches(2787770.0))
                .body("'data'.'cities'[320].'name'", containsString("Ronse"))
                .body("'data'.'cities'[320].'population'", numberMatches(26337.0))
                .body("'data'.'cities'[320].'timeZone'", nullValue())
                .body("'data'.'cities'[321].'geonamesID'", numberMatches(6558120.0))
                .body("'data'.'cities'[321].'name'", containsString("Schramberg"))
                .body("'data'.'cities'[321].'population'", numberMatches(21189.0))
                .body("'data'.'cities'[321].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[321].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[322].'geonamesID'", numberMatches(1269843.0))
                .body("'data'.'cities'[322].'name'", containsString("Hyderabad"))
                .body("'data'.'cities'[322].'population'", numberMatches(9305000.0))
                .body("'data'.'cities'[322].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[322].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[323].'geonamesID'", numberMatches(4679803.0))
                .body("'data'.'cities'[323].'name'", containsString("Cedar Hill"))
                .body("'data'.'cities'[323].'population'", numberMatches(45028.0))
                .body("'data'.'cities'[323].'timeZone'", nullValue())
                .body("'data'.'cities'[324].'geonamesID'", numberMatches(146617.0))
                .body("'data'.'cities'[324].'name'", containsString("Famagusta"))
                .body("'data'.'cities'[324].'population'", numberMatches(40920.0))
                .body("'data'.'cities'[324].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[324].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[325].'geonamesID'", numberMatches(2266987.0))
                .body("'data'.'cities'[325].'name'", containsString("Loulé"))
                .body("'data'.'cities'[325].'population'", numberMatches(70622.0))
                .body("'data'.'cities'[325].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[325].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[326].'geonamesID'", numberMatches(639734.0))
                .body("'data'.'cities'[326].'name'", containsString("Rauma"))
                .body("'data'.'cities'[326].'population'", numberMatches(39809.0))
                .body("'data'.'cities'[326].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[326].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[327].'geonamesID'", numberMatches(2243940.0))
                .body("'data'.'cities'[327].'name'", containsString("Ziguinchor"))
                .body("'data'.'cities'[327].'population'", numberMatches(205294.0))
                .body("'data'.'cities'[327].'timeZone'", nullValue())
                .body("'data'.'cities'[328].'geonamesID'", numberMatches(3140084.0))
                .body("'data'.'cities'[328].'name'", containsString("Sarpsborg"))
                .body("'data'.'cities'[328].'population'", numberMatches(54678.0))
                .body("'data'.'cities'[328].'timeZone'", nullValue())
                .body("'data'.'cities'[329].'geonamesID'", numberMatches(169023.0))
                .body("'data'.'cities'[329].'name'", containsString("Jisr al-Shughur"))
                .body("'data'.'cities'[329].'population'", numberMatches(44322.0))
                .body("'data'.'cities'[329].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[329].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[330].'geonamesID'", numberMatches(3522551.0))
                .body("'data'.'cities'[330].'name'", containsString("Nuevo Laredo"))
                .body("'data'.'cities'[330].'population'", numberMatches(384033.0))
                .body("'data'.'cities'[330].'timeZone'", nullValue())
                .body("'data'.'cities'[331].'geonamesID'", numberMatches(4844309.0))
                .body("'data'.'cities'[331].'name'", containsString("Torrington"))
                .body("'data'.'cities'[331].'population'", numberMatches(36383.0))
                .body("'data'.'cities'[331].'timeZone'", nullValue())
                .body("'data'.'cities'[332].'geonamesID'", numberMatches(3449344.0))
                .body("'data'.'cities'[332].'name'", containsString("São Bernardo do Campo"))
                .body("'data'.'cities'[332].'population'", numberMatches(816925.0))
                .body("'data'.'cities'[332].'timeZone'", nullValue())
                .body("'data'.'cities'[333].'geonamesID'", numberMatches(5341704.0))
                .body("'data'.'cities'[333].'name'", containsString("Davis"))
                .body("'data'.'cities'[333].'population'", numberMatches(65622.0))
                .body("'data'.'cities'[333].'timeZone'", nullValue())
                .body("'data'.'cities'[334].'geonamesID'", numberMatches(8617692.0))
                .body("'data'.'cities'[334].'name'", containsString("San Pedro Garza García"))
                .body("'data'.'cities'[334].'population'", numberMatches(122659.0))
                .body("'data'.'cities'[334].'timeZone'.'name'", containsString("UTC−06:00"))
                .body("'data'.'cities'[334].'timeZone'.'offset'", numberMatches(-6.0))
                .body("'data'.'cities'[335].'geonamesID'", numberMatches(8334767.0))
                .body("'data'.'cities'[335].'name'", containsString("Satu Mare"))
                .body("'data'.'cities'[335].'population'", numberMatches(102411.0))
                .body("'data'.'cities'[335].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[335].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[336].'geonamesID'", numberMatches(3691474.0))
                .body("'data'.'cities'[336].'name'", containsString("Tarapoto"))
                .body("'data'.'cities'[336].'population'", numberMatches(240453.0))
                .body("'data'.'cities'[336].'timeZone'", nullValue())
                .body("'data'.'cities'[337].'geonamesID'", numberMatches(4830198.0))
                .body("'data'.'cities'[337].'name'", containsString("Anniston"))
                .body("'data'.'cities'[337].'population'", numberMatches(23106.0))
                .body("'data'.'cities'[337].'timeZone'.'name'", containsString("UTC−06:00"))
                .body("'data'.'cities'[337].'timeZone'.'offset'", numberMatches(-6.0))
                .body("'data'.'cities'[338].'geonamesID'", numberMatches(3432079.0))
                .body("'data'.'cities'[338].'name'", containsString("La Paz, Entre Ríos"))
                .body("'data'.'cities'[338].'population'", numberMatches(24307.0))
                .body("'data'.'cities'[338].'timeZone'.'name'", containsString("UTC−03:00"))
                .body("'data'.'cities'[338].'timeZone'.'offset'", numberMatches(-3.0))
                .body("'data'.'cities'[339].'geonamesID'", numberMatches(601734.0))
                .body("'data'.'cities'[339].'name'", containsString("Daşoguz"))
                .body("'data'.'cities'[339].'population'", numberMatches(227184.0))
                .body("'data'.'cities'[339].'timeZone'.'name'", containsString("UTC+05:00"))
                .body("'data'.'cities'[339].'timeZone'.'offset'", numberMatches(5.0))
                .body("'data'.'cities'[340].'geonamesID'", numberMatches(2800931.0))
                .body("'data'.'cities'[340].'name'", containsString("Bruges"))
                .body("'data'.'cities'[340].'population'", numberMatches(118053.0))
                .body("'data'.'cities'[340].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[340].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[341].'geonamesID'", numberMatches(6862586.0))
                .body("'data'.'cities'[341].'name'", containsString("Hokuto"))
                .body("'data'.'cities'[341].'population'", numberMatches(45661.0))
                .body("'data'.'cities'[341].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[341].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[342].'geonamesID'", numberMatches(5405878.0))
                .body("'data'.'cities'[342].'name'", containsString("Ventura"))
                .body("'data'.'cities'[342].'population'", numberMatches(106433.0))
                .body("'data'.'cities'[342].'timeZone'.'name'", containsString("UTC−08:00"))
                .body("'data'.'cities'[342].'timeZone'.'offset'", numberMatches(-8.0))
                .body("'data'.'cities'[343].'geonamesID'", numberMatches(5122432.0))
                .body("'data'.'cities'[343].'name'", containsString("Ithaca"))
                .body("'data'.'cities'[343].'population'", numberMatches(30837.0))
                .body("'data'.'cities'[343].'timeZone'", nullValue())
                .body("'data'.'cities'[344].'geonamesID'", numberMatches(3465644.0))
                .body("'data'.'cities'[344].'name'", containsString("Conselheiro Lafaiete"))
                .body("'data'.'cities'[344].'population'", numberMatches(129606.0))
                .body("'data'.'cities'[344].'timeZone'", nullValue())
                .body("'data'.'cities'[345].'geonamesID'", numberMatches(1843561.0))
                .body("'data'.'cities'[345].'name'", containsString("Incheon"))
                .body("'data'.'cities'[345].'population'", numberMatches(2913024.0))
                .body("'data'.'cities'[345].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[345].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[346].'geonamesID'", numberMatches(4313697.0))
                .body("'data'.'cities'[346].'name'", containsString("Winchester"))
                .body("'data'.'cities'[346].'population'", numberMatches(18368.0))
                .body("'data'.'cities'[346].'timeZone'", nullValue())
                .body("'data'.'cities'[347].'geonamesID'", numberMatches(98860.0))
                .body("'data'.'cities'[347].'name'", containsString("Najaf"))
                .body("'data'.'cities'[347].'population'", numberMatches(724700.0))
                .body("'data'.'cities'[347].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[347].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[348].'geonamesID'", numberMatches(307515.0))
                .body("'data'.'cities'[348].'name'", containsString("Kırşehir"))
                .body("'data'.'cities'[348].'population'", numberMatches(153511.0))
                .body("'data'.'cities'[348].'timeZone'", nullValue())
                .body("'data'.'cities'[349].'geonamesID'", numberMatches(1853552.0))
                .body("'data'.'cities'[349].'name'", containsString("Ōtsu"))
                .body("'data'.'cities'[349].'population'", numberMatches(342607.0))
                .body("'data'.'cities'[349].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[349].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[350].'geonamesID'", numberMatches(614455.0))
                .body("'data'.'cities'[350].'name'", containsString("Gori"))
                .body("'data'.'cities'[350].'population'", numberMatches(48143.0))
                .body("'data'.'cities'[350].'timeZone'.'name'", containsString("UTC+04:00"))
                .body("'data'.'cities'[350].'timeZone'.'offset'", numberMatches(4.0))
                .body("'data'.'cities'[351].'geonamesID'", numberMatches(6557683.0))
                .body("'data'.'cities'[351].'name'", containsString("Meinerzhagen"))
                .body("'data'.'cities'[351].'population'", numberMatches(20397.0))
                .body("'data'.'cities'[351].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[351].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[352].'geonamesID'", numberMatches(6324325.0))
                .body("'data'.'cities'[352].'name'", containsString("Paulo Afonso"))
                .body("'data'.'cities'[352].'population'", numberMatches(119214.0))
                .body("'data'.'cities'[352].'timeZone'", nullValue())
                .body("'data'.'cities'[353].'geonamesID'", numberMatches(3893629.0))
                .body("'data'.'cities'[353].'name'", containsString("Atlético Morelia"))
                .body("'data'.'cities'[353].'population'", numberMatches(204068.0))
                .body("'data'.'cities'[353].'timeZone'.'name'", containsString("UTC−04:00"))
                .body("'data'.'cities'[353].'timeZone'.'offset'", numberMatches(-4.0))
                .body("'data'.'cities'[354].'geonamesID'", numberMatches(1849876.0))
                .body("'data'.'cities'[354].'name'", containsString("Toyama"))
                .body("'data'.'cities'[354].'population'", numberMatches(413028.0))
                .body("'data'.'cities'[354].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[354].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[355].'geonamesID'", numberMatches(765876.0))
                .body("'data'.'cities'[355].'name'", containsString("Lublin"))
                .body("'data'.'cities'[355].'population'", numberMatches(339850.0))
                .body("'data'.'cities'[355].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[355].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[356].'geonamesID'", numberMatches(5339663.0))
                .body("'data'.'cities'[356].'name'", containsString("Coronado"))
                .body("'data'.'cities'[356].'population'", numberMatches(18912.0))
                .body("'data'.'cities'[356].'timeZone'", nullValue())
                .body("'data'.'cities'[357].'geonamesID'", numberMatches(3658192.0))
                .body("'data'.'cities'[357].'name'", containsString("Durán"))
                .body("'data'.'cities'[357].'population'", numberMatches(230839.0))
                .body("'data'.'cities'[357].'timeZone'.'name'", containsString("UTC−05:00"))
                .body("'data'.'cities'[357].'timeZone'.'offset'", numberMatches(-5.0))
                .body("'data'.'cities'[358].'geonamesID'", numberMatches(1874225.0))
                .body("'data'.'cities'[358].'name'", containsString("Munchon"))
                .body("'data'.'cities'[358].'population'", numberMatches(122934.0))
                .body("'data'.'cities'[358].'timeZone'", nullValue())
                .body("'data'.'cities'[359].'geonamesID'", numberMatches(2128291.0))
                .body("'data'.'cities'[359].'name'", containsString("Sapporo"))
                .body("'data'.'cities'[359].'population'", numberMatches(1961690.0))
                .body("'data'.'cities'[359].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[359].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[360].'geonamesID'", numberMatches(6558072.0))
                .body("'data'.'cities'[360].'name'", containsString("Nagold"))
                .body("'data'.'cities'[360].'population'", numberMatches(22294.0))
                .body("'data'.'cities'[360].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[360].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[361].'geonamesID'", numberMatches(4608408.0))
                .body("'data'.'cities'[361].'name'", containsString("Brentwood"))
                .body("'data'.'cities'[361].'population'", numberMatches(37060.0))
                .body("'data'.'cities'[361].'timeZone'", nullValue())
                .body("'data'.'cities'[362].'geonamesID'", numberMatches(1527260.0))
                .body("'data'.'cities'[362].'name'", containsString("Tashkömür"))
                .body("'data'.'cities'[362].'population'", numberMatches(19310.0))
                .body("'data'.'cities'[362].'timeZone'", nullValue())
                .body("'data'.'cities'[363].'geonamesID'", numberMatches(5359777.0))
                .body("'data'.'cities'[363].'name'", containsString("Irvine"))
                .body("'data'.'cities'[363].'population'", numberMatches(250384.0))
                .body("'data'.'cities'[363].'timeZone'.'name'", containsString("UTC−08:00"))
                .body("'data'.'cities'[363].'timeZone'.'offset'", numberMatches(-8.0))
                .body("'data'.'cities'[364].'geonamesID'", numberMatches(161616.0))
                .body("'data'.'cities'[364].'name'", containsString("Balkanabat"))
                .body("'data'.'cities'[364].'population'", numberMatches(89785.0))
                .body("'data'.'cities'[364].'timeZone'.'name'", containsString("UTC+05:00"))
                .body("'data'.'cities'[364].'timeZone'.'offset'", numberMatches(5.0))
                .body("'data'.'cities'[365].'geonamesID'", numberMatches(6541998.0))
                .body("'data'.'cities'[365].'name'", containsString("Bologna"))
                .body("'data'.'cities'[365].'population'", numberMatches(389261.0))
                .body("'data'.'cities'[365].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[365].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[366].'geonamesID'", numberMatches(5162077.0))
                .body("'data'.'cities'[366].'name'", containsString("Marysville"))
                .body("'data'.'cities'[366].'population'", numberMatches(22094.0))
                .body("'data'.'cities'[366].'timeZone'", nullValue())
                .body("'data'.'cities'[367].'geonamesID'", numberMatches(3247905.0))
                .body("'data'.'cities'[367].'name'", containsString("Landau in der Pfalz"))
                .body("'data'.'cities'[367].'population'", numberMatches(46677.0))
                .body("'data'.'cities'[367].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[367].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[368].'geonamesID'", numberMatches(8010567.0))
                .body("'data'.'cities'[368].'name'", containsString("Torres Vedras"))
                .body("'data'.'cities'[368].'population'", numberMatches(79465.0))
                .body("'data'.'cities'[368].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[368].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[369].'geonamesID'", numberMatches(1804651.0))
                .body("'data'.'cities'[369].'name'", containsString("Kunming"))
                .body("'data'.'cities'[369].'population'", numberMatches(6250000.0))
                .body("'data'.'cities'[369].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[369].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[370].'geonamesID'", numberMatches(163533.0))
                .body("'data'.'cities'[370].'name'", containsString("Talkalakh"))
                .body("'data'.'cities'[370].'population'", numberMatches(35445.0))
                .body("'data'.'cities'[370].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[370].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[371].'geonamesID'", numberMatches(1180289.0))
                .body("'data'.'cities'[371].'name'", containsString("Dera Ghazi Khan"))
                .body("'data'.'cities'[371].'population'", numberMatches(399064.0))
                .body("'data'.'cities'[371].'timeZone'", nullValue())
                .body("'data'.'cities'[372].'geonamesID'", numberMatches(2633948.0))
                .body("'data'.'cities'[372].'name'", containsString("Wigan"))
                .body("'data'.'cities'[372].'population'", numberMatches(103608.0))
                .body("'data'.'cities'[372].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[372].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[373].'geonamesID'", numberMatches(3905658.0))
                .body("'data'.'cities'[373].'name'", containsString("San Ignacio de Velasco"))
                .body("'data'.'cities'[373].'population'", numberMatches(23569.0))
                .body("'data'.'cities'[373].'timeZone'", nullValue())
                .body("'data'.'cities'[374].'geonamesID'", numberMatches(2649808.0))
                .body("'data'.'cities'[374].'name'", containsString("Exeter"))
                .body("'data'.'cities'[374].'population'", numberMatches(124180.0))
                .body("'data'.'cities'[374].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[374].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[375].'geonamesID'", numberMatches(4817641.0))
                .body("'data'.'cities'[375].'name'", containsString("Parkersburg"))
                .body("'data'.'cities'[375].'population'", numberMatches(30601.0))
                .body("'data'.'cities'[375].'timeZone'", nullValue())
                .body("'data'.'cities'[376].'geonamesID'", numberMatches(3095126.0))
                .body("'data'.'cities'[376].'name'", containsString("Kościerzyna"))
                .body("'data'.'cities'[376].'population'", numberMatches(23744.0))
                .body("'data'.'cities'[376].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[376].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[377].'geonamesID'", numberMatches(3567823.0))
                .body("'data'.'cities'[377].'name'", containsString("Baraguá"))
                .body("'data'.'cities'[377].'population'", numberMatches(32909.0))
                .body("'data'.'cities'[377].'timeZone'", nullValue())
                .body("'data'.'cities'[378].'geonamesID'", numberMatches(339594.0))
                .body("'data'.'cities'[378].'name'", containsString("Degehabur"))
                .body("'data'.'cities'[378].'population'", numberMatches(30027.0))
                .body("'data'.'cities'[378].'timeZone'", nullValue())
                .body("'data'.'cities'[379].'geonamesID'", numberMatches(2791538.0))
                .body("'data'.'cities'[379].'name'", containsString("Mechelen"))
                .body("'data'.'cities'[379].'population'", numberMatches(86921.0))
                .body("'data'.'cities'[379].'timeZone'", nullValue())
                .body("'data'.'cities'[380].'geonamesID'", numberMatches(3049512.0))
                .body("'data'.'cities'[380].'name'", containsString("Komló"))
                .body("'data'.'cities'[380].'population'", numberMatches(22635.0))
                .body("'data'.'cities'[380].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[380].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[381].'geonamesID'", numberMatches(4048662.0))
                .body("'data'.'cities'[381].'name'", containsString("Paducah"))
                .body("'data'.'cities'[381].'population'", numberMatches(25024.0))
                .body("'data'.'cities'[381].'timeZone'", nullValue())
                .body("'data'.'cities'[382].'geonamesID'", numberMatches(79415.0))
                .body("'data'.'cities'[382].'name'", containsString("Al Hudaydah"))
                .body("'data'.'cities'[382].'population'", numberMatches(548433.0))
                .body("'data'.'cities'[382].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[382].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[383].'geonamesID'", numberMatches(5102466.0))
                .body("'data'.'cities'[383].'name'", containsString("Paterson"))
                .body("'data'.'cities'[383].'population'", numberMatches(146199.0))
                .body("'data'.'cities'[383].'timeZone'", nullValue())
                .body("'data'.'cities'[384].'geonamesID'", numberMatches(3854985.0))
                .body("'data'.'cities'[384].'name'", containsString("Villa Gobernador Gálvez"))
                .body("'data'.'cities'[384].'population'", numberMatches(80769.0))
                .body("'data'.'cities'[384].'timeZone'.'name'", containsString("UTC−03:00"))
                .body("'data'.'cities'[384].'timeZone'.'offset'", numberMatches(-3.0))
                .body("'data'.'cities'[385].'geonamesID'", numberMatches(1855363.0))
                .body("'data'.'cities'[385].'name'", containsString("Nirasaki"))
                .body("'data'.'cities'[385].'population'", numberMatches(28896.0))
                .body("'data'.'cities'[385].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[385].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[386].'geonamesID'", numberMatches(6557497.0))
                .body("'data'.'cities'[386].'name'", containsString("Erkrath"))
                .body("'data'.'cities'[386].'population'", numberMatches(44384.0))
                .body("'data'.'cities'[386].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[386].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[387].'geonamesID'", numberMatches(4727326.0))
                .body("'data'.'cities'[387].'name'", containsString("Schertz"))
                .body("'data'.'cities'[387].'population'", numberMatches(34883.0))
                .body("'data'.'cities'[387].'timeZone'", nullValue())
                .body("'data'.'cities'[388].'geonamesID'", numberMatches(5272893.0))
                .body("'data'.'cities'[388].'name'", containsString("Sheboygan"))
                .body("'data'.'cities'[388].'population'", numberMatches(48895.0))
                .body("'data'.'cities'[388].'timeZone'.'name'", containsString("UTC−06:00"))
                .body("'data'.'cities'[388].'timeZone'.'offset'", numberMatches(-6.0))
                .body("'data'.'cities'[389].'geonamesID'", numberMatches(139817.0))
                .body("'data'.'cities'[389].'name'", containsString("Bushehr"))
                .body("'data'.'cities'[389].'population'", numberMatches(195222.0))
                .body("'data'.'cities'[389].'timeZone'.'name'", containsString("UTC+03:30"))
                .body("'data'.'cities'[389].'timeZone'.'offset'", numberMatches(3.5))
                .body("'data'.'cities'[390].'geonamesID'", numberMatches(3671117.0))
                .body("'data'.'cities'[390].'name'", containsString("Quibdó"))
                .body("'data'.'cities'[390].'population'", numberMatches(130825.0))
                .body("'data'.'cities'[390].'timeZone'", nullValue())
                .body("'data'.'cities'[391].'geonamesID'", numberMatches(4979244.0))
                .body("'data'.'cities'[391].'name'", containsString("South Portland"))
                .body("'data'.'cities'[391].'population'", numberMatches(25068.0))
                .body("'data'.'cities'[391].'timeZone'", nullValue())
                .body("'data'.'cities'[392].'geonamesID'", numberMatches(639406.0))
                .body("'data'.'cities'[392].'name'", containsString("Riihimäki"))
                .body("'data'.'cities'[392].'population'", numberMatches(29269.0))
                .body("'data'.'cities'[392].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[392].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[393].'geonamesID'", numberMatches(5591778.0))
                .body("'data'.'cities'[393].'name'", containsString("Eagle"))
                .body("'data'.'cities'[393].'population'", numberMatches(19908.0))
                .body("'data'.'cities'[393].'timeZone'", nullValue())
                .body("'data'.'cities'[394].'geonamesID'", numberMatches(715338.0))
                .body("'data'.'cities'[394].'name'", containsString("Szentes"))
                .body("'data'.'cities'[394].'population'", numberMatches(27080.0))
                .body("'data'.'cities'[394].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[394].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[395].'geonamesID'", numberMatches(4439869.0))
                .body("'data'.'cities'[395].'name'", containsString("Olive Branch"))
                .body("'data'.'cities'[395].'population'", numberMatches(33484.0))
                .body("'data'.'cities'[395].'timeZone'", nullValue())
                .body("'data'.'cities'[396].'geonamesID'", numberMatches(2795010.0))
                .body("'data'.'cities'[396].'name'", containsString("Izegem"))
                .body("'data'.'cities'[396].'population'", numberMatches(27729.0))
                .body("'data'.'cities'[396].'timeZone'", nullValue())
                .body("'data'.'cities'[397].'geonamesID'", numberMatches(3609586.0))
                .body("'data'.'cities'[397].'name'", containsString("Gracias"))
                .body("'data'.'cities'[397].'population'", numberMatches(50256.0))
                .body("'data'.'cities'[397].'timeZone'", nullValue())
                .body("'data'.'cities'[398].'geonamesID'", numberMatches(2112704.0))
                .body("'data'.'cities'[398].'name'", containsString("Hitachi"))
                .body("'data'.'cities'[398].'population'", numberMatches(172709.0))
                .body("'data'.'cities'[398].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[398].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[399].'geonamesID'", numberMatches(5052916.0))
                .body("'data'.'cities'[399].'name'", containsString("Willmar"))
                .body("'data'.'cities'[399].'population'", numberMatches(19610.0))
                .body("'data'.'cities'[399].'timeZone'", nullValue())
                .body("'data'.'cities'[400].'geonamesID'", numberMatches(4914570.0))
                .body("'data'.'cities'[400].'name'", containsString("Urbana"))
                .body("'data'.'cities'[400].'population'", numberMatches(41250.0))
                .body("'data'.'cities'[400].'timeZone'.'name'", containsString("UTC−06:00"))
                .body("'data'.'cities'[400].'timeZone'.'offset'", numberMatches(-6.0))
                .body("'data'.'cities'[401].'geonamesID'", numberMatches(5069802.0))
                .body("'data'.'cities'[401].'name'", containsString("Hastings"))
                .body("'data'.'cities'[401].'population'", numberMatches(24907.0))
                .body("'data'.'cities'[401].'timeZone'", nullValue())
                .body("'data'.'cities'[402].'geonamesID'", numberMatches(5392368.0))
                .body("'data'.'cities'[402].'name'", containsString("San Marcos"))
                .body("'data'.'cities'[402].'population'", numberMatches(83781.0))
                .body("'data'.'cities'[402].'timeZone'", nullValue())
                .body("'data'.'cities'[403].'geonamesID'", numberMatches(1253102.0))
                .body("'data'.'cities'[403].'name'", containsString("Visakhapatnam"))
                .body("'data'.'cities'[403].'population'", numberMatches(2035922.0))
                .body("'data'.'cities'[403].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[403].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[404].'geonamesID'", numberMatches(4846960.0))
                .body("'data'.'cities'[404].'name'", containsString("Ankeny"))
                .body("'data'.'cities'[404].'population'", numberMatches(45582.0))
                .body("'data'.'cities'[404].'timeZone'.'name'", containsString("UTC−06:00"))
                .body("'data'.'cities'[404].'timeZone'.'offset'", numberMatches(-6.0))
                .body("'data'.'cities'[405].'geonamesID'", numberMatches(2111823.0))
                .body("'data'.'cities'[405].'name'", containsString("Motomiya"))
                .body("'data'.'cities'[405].'population'", numberMatches(30253.0))
                .body("'data'.'cities'[405].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[405].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[406].'geonamesID'", numberMatches(349715.0))
                .body("'data'.'cities'[406].'name'", containsString("Samannud"))
                .body("'data'.'cities'[406].'population'", numberMatches(57177.0))
                .body("'data'.'cities'[406].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[406].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[407].'geonamesID'", numberMatches(7287397.0))
                .body("'data'.'cities'[407].'name'", containsString("Uster"))
                .body("'data'.'cities'[407].'population'", numberMatches(34442.0))
                .body("'data'.'cities'[407].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[407].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[408].'geonamesID'", numberMatches(5380748.0))
                .body("'data'.'cities'[408].'name'", containsString("Palo Alto"))
                .body("'data'.'cities'[408].'population'", numberMatches(66777.0))
                .body("'data'.'cities'[408].'timeZone'.'name'", containsString("UTC−08:00"))
                .body("'data'.'cities'[408].'timeZone'.'offset'", numberMatches(-8.0))
                .body("'data'.'cities'[409].'geonamesID'", numberMatches(746425.0))
                .body("'data'.'cities'[409].'name'", containsString("Gümüşhane"))
                .body("'data'.'cities'[409].'population'", numberMatches(57269.0))
                .body("'data'.'cities'[409].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[409].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[410].'geonamesID'", numberMatches(2797657.0))
                .body("'data'.'cities'[410].'name'", containsString("Ghent"))
                .body("'data'.'cities'[410].'population'", numberMatches(262219.0))
                .body("'data'.'cities'[410].'timeZone'", nullValue())
                .body("'data'.'cities'[411].'geonamesID'", numberMatches(8010474.0))
                .body("'data'.'cities'[411].'name'", containsString("Covilhã"))
                .body("'data'.'cities'[411].'population'", numberMatches(51797.0))
                .body("'data'.'cities'[411].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[411].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[412].'geonamesID'", numberMatches(3408424.0))
                .body("'data'.'cities'[412].'name'", containsString("Abaetetuba"))
                .body("'data'.'cities'[412].'population'", numberMatches(159080.0))
                .body("'data'.'cities'[412].'timeZone'.'name'", containsString("UTC−03:00"))
                .body("'data'.'cities'[412].'timeZone'.'offset'", numberMatches(-3.0))
                .body("'data'.'cities'[413].'geonamesID'", numberMatches(3998655.0))
                .body("'data'.'cities'[413].'name'", containsString("León de Los Aldama"))
                .body("'data'.'cities'[413].'population'", numberMatches(1238496.0))
                .body("'data'.'cities'[413].'timeZone'", nullValue())
                .body("'data'.'cities'[414].'geonamesID'", numberMatches(1276609.0))
                .body("'data'.'cities'[414].'name'", containsString("Begusarai"))
                .body("'data'.'cities'[414].'population'", numberMatches(252008.0))
                .body("'data'.'cities'[414].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[414].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[415].'geonamesID'", numberMatches(4533580.0))
                .body("'data'.'cities'[415].'name'", containsString("Claremore"))
                .body("'data'.'cities'[415].'population'", numberMatches(18581.0))
                .body("'data'.'cities'[415].'timeZone'", nullValue())
                .body("'data'.'cities'[416].'geonamesID'", numberMatches(1719251.0))
                .body("'data'.'cities'[416].'name'", containsString("Candon"))
                .body("'data'.'cities'[416].'population'", numberMatches(50564.0))
                .body("'data'.'cities'[416].'timeZone'", nullValue())
                .body("'data'.'cities'[417].'geonamesID'", numberMatches(7530964.0))
                .body("'data'.'cities'[417].'name'", containsString("Częstochowa"))
                .body("'data'.'cities'[417].'population'", numberMatches(223322.0))
                .body("'data'.'cities'[417].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[417].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[418].'geonamesID'", numberMatches(1625929.0))
                .body("'data'.'cities'[418].'name'", containsString("Sungai Penuh"))
                .body("'data'.'cities'[418].'population'", numberMatches(101325.0))
                .body("'data'.'cities'[418].'timeZone'.'name'", containsString("UTC+07:00"))
                .body("'data'.'cities'[418].'timeZone'.'offset'", numberMatches(7.0))
                .body("'data'.'cities'[419].'geonamesID'", numberMatches(5084868.0))
                .body("'data'.'cities'[419].'name'", containsString("Concord"))
                .body("'data'.'cities'[419].'population'", numberMatches(42695.0))
                .body("'data'.'cities'[419].'timeZone'.'name'", containsString("UTC−05:00"))
                .body("'data'.'cities'[419].'timeZone'.'offset'", numberMatches(-5.0))
                .body("'data'.'cities'[420].'geonamesID'", numberMatches(3649833.0))
                .body("'data'.'cities'[420].'name'", containsString("Acarigua"))
                .body("'data'.'cities'[420].'population'", numberMatches(195637.0))
                .body("'data'.'cities'[420].'timeZone'", nullValue())
                .body("'data'.'cities'[421].'geonamesID'", numberMatches(8010583.0))
                .body("'data'.'cities'[421].'name'", containsString("Marco de Canaveses"))
                .body("'data'.'cities'[421].'population'", numberMatches(53450.0))
                .body("'data'.'cities'[421].'timeZone'", nullValue())
                .body("'data'.'cities'[422].'geonamesID'", numberMatches(6557486.0))
                .body("'data'.'cities'[422].'name'", containsString("Vechta"))
                .body("'data'.'cities'[422].'population'", numberMatches(32433.0))
                .body("'data'.'cities'[422].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[422].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[423].'geonamesID'", numberMatches(4220629.0))
                .body("'data'.'cities'[423].'name'", containsString("St. Marys"))
                .body("'data'.'cities'[423].'population'", numberMatches(29986.0))
                .body("'data'.'cities'[423].'timeZone'", nullValue())
                .body("'data'.'cities'[424].'geonamesID'", numberMatches(2798988.0))
                .body("'data'.'cities'[424].'name'", containsString("Eeklo"))
                .body("'data'.'cities'[424].'population'", numberMatches(20890.0))
                .body("'data'.'cities'[424].'timeZone'", nullValue())
                .body("'data'.'cities'[425].'geonamesID'", numberMatches(98182.0))
                .body("'data'.'cities'[425].'name'", containsString("Baghdad"))
                .body("'data'.'cities'[425].'population'", numberMatches(6960000.0))
                .body("'data'.'cities'[425].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[425].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[426].'geonamesID'", numberMatches(5777224.0))
                .body("'data'.'cities'[426].'name'", containsString("Lehi"))
                .body("'data'.'cities'[426].'population'", numberMatches(47407.0))
                .body("'data'.'cities'[426].'timeZone'", nullValue())
                .body("'data'.'cities'[427].'geonamesID'", numberMatches(8632418.0))
                .body("'data'.'cities'[427].'name'", containsString("Turgutlu"))
                .body("'data'.'cities'[427].'population'", numberMatches(163223.0))
                .body("'data'.'cities'[427].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[427].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[428].'geonamesID'", numberMatches(7413152.0))
                .body("'data'.'cities'[428].'name'", containsString("Uki"))
                .body("'data'.'cities'[428].'population'", numberMatches(57096.0))
                .body("'data'.'cities'[428].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[428].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[429].'geonamesID'", numberMatches(2653775.0))
                .body("'data'.'cities'[429].'name'", containsString("Carlisle"))
                .body("'data'.'cities'[429].'population'", numberMatches(75399.0))
                .body("'data'.'cities'[429].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[429].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[430].'geonamesID'", numberMatches(1277240.0))
                .body("'data'.'cities'[430].'name'", containsString("Bansberia"))
                .body("'data'.'cities'[430].'population'", numberMatches(103920.0))
                .body("'data'.'cities'[430].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[430].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[431].'geonamesID'", numberMatches(7872055.0))
                .body("'data'.'cities'[431].'name'", containsString("Leonding"))
                .body("'data'.'cities'[431].'population'", numberMatches(28698.0))
                .body("'data'.'cities'[431].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[431].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[432].'geonamesID'", numberMatches(1183883.0))
                .body("'data'.'cities'[432].'name'", containsString("Bahawalnagar"))
                .body("'data'.'cities'[432].'population'", numberMatches(141935.0))
                .body("'data'.'cities'[432].'timeZone'", nullValue())
                .body("'data'.'cities'[433].'geonamesID'", numberMatches(4177887.0))
                .body("'data'.'cities'[433].'name'", containsString("West Palm Beach"))
                .body("'data'.'cities'[433].'population'", numberMatches(99919.0))
                .body("'data'.'cities'[433].'timeZone'", nullValue())
                .body("'data'.'cities'[434].'geonamesID'", numberMatches(5249871.0))
                .body("'data'.'cities'[434].'name'", containsString("Cudahy"))
                .body("'data'.'cities'[434].'population'", numberMatches(18267.0))
                .body("'data'.'cities'[434].'timeZone'", nullValue())
                .body("'data'.'cities'[435].'geonamesID'", numberMatches(175499.0))
                .body("'data'.'cities'[435].'name'", containsString("Nchelenge"))
                .body("'data'.'cities'[435].'population'", numberMatches(147927.0))
                .body("'data'.'cities'[435].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[435].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[436].'geonamesID'", numberMatches(4277718.0))
                .body("'data'.'cities'[436].'name'", containsString("Prairie Village"))
                .body("'data'.'cities'[436].'population'", numberMatches(21447.0))
                .body("'data'.'cities'[436].'timeZone'", nullValue())
                .body("'data'.'cities'[437].'geonamesID'", numberMatches(4794134.0))
                .body("'data'.'cities'[437].'name'", containsString("Winchester"))
                .body("'data'.'cities'[437].'population'", numberMatches(27216.0))
                .body("'data'.'cities'[437].'timeZone'", nullValue())
                .body("'data'.'cities'[438].'geonamesID'", numberMatches(1607017.0))
                .body("'data'.'cities'[438].'name'", containsString("Rayong"))
                .body("'data'.'cities'[438].'population'", numberMatches(61902.0))
                .body("'data'.'cities'[438].'timeZone'.'name'", containsString("UTC+07:00"))
                .body("'data'.'cities'[438].'timeZone'.'offset'", numberMatches(7.0))
                .body("'data'.'cities'[439].'geonamesID'", numberMatches(3694178.0))
                .body("'data'.'cities'[439].'name'", containsString("Pacasmayo"))
                .body("'data'.'cities'[439].'population'", numberMatches(26125.0))
                .body("'data'.'cities'[439].'timeZone'", nullValue())
                .body("'data'.'cities'[440].'geonamesID'", numberMatches(8010592.0))
                .body("'data'.'cities'[440].'name'", containsString("Vila Nova de Gaia"))
                .body("'data'.'cities'[440].'population'", numberMatches(302295.0))
                .body("'data'.'cities'[440].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[440].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[441].'geonamesID'", numberMatches(1270484.0))
                .body("'data'.'cities'[441].'name'", containsString("Halisahar"))
                .body("'data'.'cities'[441].'population'", numberMatches(124939.0))
                .body("'data'.'cities'[441].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[441].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[442].'geonamesID'", numberMatches(6558056.0))
                .body("'data'.'cities'[442].'name'", containsString("Leimen"))
                .body("'data'.'cities'[442].'population'", numberMatches(26968.0))
                .body("'data'.'cities'[442].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[442].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[443].'geonamesID'", numberMatches(5340970.0))
                .body("'data'.'cities'[443].'name'", containsString("Suisun City"))
                .body("'data'.'cities'[443].'population'", numberMatches(28111.0))
                .body("'data'.'cities'[443].'timeZone'", nullValue())
                .body("'data'.'cities'[444].'geonamesID'", numberMatches(5914653.0))
                .body("'data'.'cities'[444].'name'", containsString("Camrose"))
                .body("'data'.'cities'[444].'population'", numberMatches(18742.0))
                .body("'data'.'cities'[444].'timeZone'", nullValue())
                .body("'data'.'cities'[445].'geonamesID'", numberMatches(1526193.0))
                .body("'data'.'cities'[445].'name'", containsString("Arkalyk"))
                .body("'data'.'cities'[445].'population'", numberMatches(28169.0))
                .body("'data'.'cities'[445].'timeZone'", nullValue())
                .body("'data'.'cities'[446].'geonamesID'", numberMatches(5384170.0))
                .body("'data'.'cities'[446].'name'", containsString("Pomona"))
                .body("'data'.'cities'[446].'population'", numberMatches(149058.0))
                .body("'data'.'cities'[446].'timeZone'", nullValue())
                .body("'data'.'cities'[447].'geonamesID'", numberMatches(8010590.0))
                .body("'data'.'cities'[447].'name'", containsString("Valongo"))
                .body("'data'.'cities'[447].'population'", numberMatches(93858.0))
                .body("'data'.'cities'[447].'timeZone'", nullValue())
                .body("'data'.'cities'[448].'geonamesID'", numberMatches(1513064.0))
                .body("'data'.'cities'[448].'name'", containsString("Olmaliq"))
                .body("'data'.'cities'[448].'population'", numberMatches(112078.0))
                .body("'data'.'cities'[448].'timeZone'.'name'", containsString("UTC+05:00"))
                .body("'data'.'cities'[448].'timeZone'.'offset'", numberMatches(5.0))
                .body("'data'.'cities'[449].'geonamesID'", numberMatches(601084.0))
                .body("'data'.'cities'[449].'name'", containsString("Alytus"))
                .body("'data'.'cities'[449].'population'", numberMatches(49888.0))
                .body("'data'.'cities'[449].'timeZone'", nullValue())
                .body("'data'.'cities'[450].'geonamesID'", numberMatches(2966131.0))
                .body("'data'.'cities'[450].'name'", containsString("Blackrock"))
                .body("'data'.'cities'[450].'population'", numberMatches(28557.0))
                .body("'data'.'cities'[450].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[450].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[451].'geonamesID'", numberMatches(3617448.0))
                .body("'data'.'cities'[451].'name'", containsString("Ocotal"))
                .body("'data'.'cities'[451].'population'", numberMatches(34580.0))
                .body("'data'.'cities'[451].'timeZone'", nullValue())
                .body("'data'.'cities'[452].'geonamesID'", numberMatches(2090409.0))
                .body("'data'.'cities'[452].'name'", containsString("Mount Hagen"))
                .body("'data'.'cities'[452].'population'", numberMatches(29765.0))
                .body("'data'.'cities'[452].'timeZone'", nullValue())
                .body("'data'.'cities'[453].'geonamesID'", numberMatches(1270927.0))
                .body("'data'.'cities'[453].'name'", containsString("Gorakhpur"))
                .body("'data'.'cities'[453].'population'", numberMatches(673446.0))
                .body("'data'.'cities'[453].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[453].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[454].'geonamesID'", numberMatches(3893656.0))
                .body("'data'.'cities'[454].'name'", containsString("Copiapó"))
                .body("'data'.'cities'[454].'population'", numberMatches(150804.0))
                .body("'data'.'cities'[454].'timeZone'.'name'", containsString("UTC−04:00"))
                .body("'data'.'cities'[454].'timeZone'.'offset'", numberMatches(-4.0))
                .body("'data'.'cities'[455].'geonamesID'", numberMatches(4278890.0))
                .body("'data'.'cities'[455].'name'", containsString("Salina"))
                .body("'data'.'cities'[455].'population'", numberMatches(47707.0))
                .body("'data'.'cities'[455].'timeZone'", nullValue())
                .body("'data'.'cities'[456].'geonamesID'", numberMatches(6643375.0))
                .body("'data'.'cities'[456].'name'", containsString("Bazhong"))
                .body("'data'.'cities'[456].'population'", numberMatches(3134000.0))
                .body("'data'.'cities'[456].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[456].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[457].'geonamesID'", numberMatches(3073371.0))
                .body("'data'.'cities'[457].'name'", containsString("Kolín"))
                .body("'data'.'cities'[457].'population'", numberMatches(32490.0))
                .body("'data'.'cities'[457].'timeZone'", nullValue())
                .body("'data'.'cities'[458].'geonamesID'", numberMatches(1708524.0))
                .body("'data'.'cities'[458].'name'", containsString("Koronadal"))
                .body("'data'.'cities'[458].'population'", numberMatches(195398.0))
                .body("'data'.'cities'[458].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[458].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[459].'geonamesID'", numberMatches(4475773.0))
                .body("'data'.'cities'[459].'name'", containsString("Lexington"))
                .body("'data'.'cities'[459].'population'", numberMatches(18931.0))
                .body("'data'.'cities'[459].'timeZone'", nullValue())
                .body("'data'.'cities'[460].'geonamesID'", numberMatches(656083.0))
                .body("'data'.'cities'[460].'name'", containsString("Jämsä"))
                .body("'data'.'cities'[460].'population'", numberMatches(21542.0))
                .body("'data'.'cities'[460].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[460].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[461].'geonamesID'", numberMatches(6154383.0))
                .body("'data'.'cities'[461].'name'", containsString("Spruce Grove"))
                .body("'data'.'cities'[461].'population'", numberMatches(34066.0))
                .body("'data'.'cities'[461].'timeZone'", nullValue())
                .body("'data'.'cities'[462].'geonamesID'", numberMatches(5301388.0))
                .body("'data'.'cities'[462].'name'", containsString("Lake Havasu City"))
                .body("'data'.'cities'[462].'population'", numberMatches(52527.0))
                .body("'data'.'cities'[462].'timeZone'", nullValue())
                .body("'data'.'cities'[463].'geonamesID'", numberMatches(6557785.0))
                .body("'data'.'cities'[463].'name'", containsString("Herborn"))
                .body("'data'.'cities'[463].'population'", numberMatches(20603.0))
                .body("'data'.'cities'[463].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[463].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[464].'geonamesID'", numberMatches(2206854.0))
                .body("'data'.'cities'[464].'name'", containsString("Gisborne"))
                .body("'data'.'cities'[464].'population'", numberMatches(34527.0))
                .body("'data'.'cities'[464].'timeZone'", nullValue())
                .body("'data'.'cities'[465].'geonamesID'", numberMatches(1696899.0))
                .body("'data'.'cities'[465].'name'", containsString("Ozamiz"))
                .body("'data'.'cities'[465].'population'", numberMatches(140334.0))
                .body("'data'.'cities'[465].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[465].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[466].'geonamesID'", numberMatches(162183.0))
                .body("'data'.'cities'[466].'name'", containsString("Ashgabat"))
                .body("'data'.'cities'[466].'population'", numberMatches(1031992.0))
                .body("'data'.'cities'[466].'timeZone'.'name'", containsString("UTC+05:00"))
                .body("'data'.'cities'[466].'timeZone'.'offset'", numberMatches(5.0))
                .body("'data'.'cities'[467].'geonamesID'", numberMatches(4760084.0))
                .body("'data'.'cities'[467].'name'", containsString("Fredericksburg"))
                .body("'data'.'cities'[467].'population'", numberMatches(29036.0))
                .body("'data'.'cities'[467].'timeZone'", nullValue())
                .body("'data'.'cities'[468].'geonamesID'", numberMatches(5405228.0))
                .body("'data'.'cities'[468].'name'", containsString("Vacaville"))
                .body("'data'.'cities'[468].'population'", numberMatches(92428.0))
                .body("'data'.'cities'[468].'timeZone'", nullValue())
                .body("'data'.'cities'[469].'geonamesID'", numberMatches(6547441.0))
                .body("'data'.'cities'[469].'name'", containsString("Pforzheim"))
                .body("'data'.'cities'[469].'population'", numberMatches(125542.0))
                .body("'data'.'cities'[469].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[469].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[470].'geonamesID'", numberMatches(3881276.0))
                .body("'data'.'cities'[470].'name'", containsString("Lota"))
                .body("'data'.'cities'[470].'population'", numberMatches(43272.0))
                .body("'data'.'cities'[470].'timeZone'", nullValue())
                .body("'data'.'cities'[471].'geonamesID'", numberMatches(5443910.0))
                .body("'data'.'cities'[471].'name'", containsString("Westminster"))
                .body("'data'.'cities'[471].'population'", numberMatches(106114.0))
                .body("'data'.'cities'[471].'timeZone'.'name'", containsString("UTC−07:00"))
                .body("'data'.'cities'[471].'timeZone'.'offset'", numberMatches(-7.0))
                .body("'data'.'cities'[472].'geonamesID'", numberMatches(3671917.0))
                .body("'data'.'cities'[472].'name'", containsString("Popayán"))
                .body("'data'.'cities'[472].'population'", numberMatches(300837.0))
                .body("'data'.'cities'[472].'timeZone'.'name'", containsString("UTC−05:00"))
                .body("'data'.'cities'[472].'timeZone'.'offset'", numberMatches(-5.0))
                .body("'data'.'cities'[473].'geonamesID'", numberMatches(1496153.0))
                .body("'data'.'cities'[473].'name'", containsString("Omsk"))
                .body("'data'.'cities'[473].'population'", numberMatches(1178391.0))
                .body("'data'.'cities'[473].'timeZone'.'name'", containsString("UTC+06:00"))
                .body("'data'.'cities'[473].'timeZone'.'offset'", numberMatches(6.0))
                .body("'data'.'cities'[474].'geonamesID'", numberMatches(6049429.0))
                .body("'data'.'cities'[474].'name'", containsString("Langley"))
                .body("'data'.'cities'[474].'population'", numberMatches(25888.0))
                .body("'data'.'cities'[474].'timeZone'", nullValue())
                .body("'data'.'cities'[475].'geonamesID'", numberMatches(1513131.0))
                .body("'data'.'cities'[475].'name'", containsString("Navoiy"))
                .body("'data'.'cities'[475].'population'", numberMatches(134100.0))
                .body("'data'.'cities'[475].'timeZone'.'name'", containsString("UTC+05:00"))
                .body("'data'.'cities'[475].'timeZone'.'offset'", numberMatches(5.0))
                .body("'data'.'cities'[476].'geonamesID'", numberMatches(5423294.0))
                .body("'data'.'cities'[476].'name'", containsString("Golden"))
                .body("'data'.'cities'[476].'population'", numberMatches(18867.0))
                .body("'data'.'cities'[476].'timeZone'", nullValue())
                .body("'data'.'cities'[477].'geonamesID'", numberMatches(4677551.0))
                .body("'data'.'cities'[477].'name'", containsString("Burleson"))
                .body("'data'.'cities'[477].'population'", numberMatches(36690.0))
                .body("'data'.'cities'[477].'timeZone'", nullValue())
                .body("'data'.'cities'[478].'geonamesID'", numberMatches(8379485.0))
                .body("'data'.'cities'[478].'name'", containsString("Tlalnepantla de Baz Municipality"))
                .body("'data'.'cities'[478].'population'", numberMatches(700734.0))
                .body("'data'.'cities'[478].'timeZone'.'name'", containsString("UTC−06:00"))
                .body("'data'.'cities'[478].'timeZone'.'offset'", numberMatches(-6.0))
                .body("'data'.'cities'[479].'geonamesID'", numberMatches(3667985.0))
                .body("'data'.'cities'[479].'name'", containsString("Sincelejo"))
                .body("'data'.'cities'[479].'population'", numberMatches(286716.0))
                .body("'data'.'cities'[479].'timeZone'.'name'", containsString("UTC−05:00"))
                .body("'data'.'cities'[479].'timeZone'.'offset'", numberMatches(-5.0))
                .body("'data'.'cities'[480].'geonamesID'", numberMatches(6357616.0))
                .body("'data'.'cities'[480].'name'", containsString("Olot"))
                .body("'data'.'cities'[480].'population'", numberMatches(35926.0))
                .body("'data'.'cities'[480].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[480].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[481].'geonamesID'", numberMatches(4689550.0))
                .body("'data'.'cities'[481].'name'", containsString("Euless"))
                .body("'data'.'cities'[481].'population'", numberMatches(51277.0))
                .body("'data'.'cities'[481].'timeZone'", nullValue())
                .body("'data'.'cities'[482].'geonamesID'", numberMatches(5022025.0))
                .body("'data'.'cities'[482].'name'", containsString("Coon Rapids"))
                .body("'data'.'cities'[482].'population'", numberMatches(61476.0))
                .body("'data'.'cities'[482].'timeZone'", nullValue())
                .body("'data'.'cities'[483].'geonamesID'", numberMatches(5326297.0))
                .body("'data'.'cities'[483].'name'", containsString("Barstow"))
                .body("'data'.'cities'[483].'population'", numberMatches(22639.0))
                .body("'data'.'cities'[483].'timeZone'.'name'", containsString("UTC−08:00"))
                .body("'data'.'cities'[483].'timeZone'.'offset'", numberMatches(-8.0))
                .body("'data'.'cities'[484].'geonamesID'", numberMatches(1024694.0))
                .body("'data'.'cities'[484].'name'", containsString("Mocuba"))
                .body("'data'.'cities'[484].'population'", numberMatches(69045.0))
                .body("'data'.'cities'[484].'timeZone'", nullValue())
                .body("'data'.'cities'[485].'geonamesID'", numberMatches(1857594.0))
                .body("'data'.'cities'[485].'name'", containsString("Masuda"))
                .body("'data'.'cities'[485].'population'", numberMatches(44474.0))
                .body("'data'.'cities'[485].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[485].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[486].'geonamesID'", numberMatches(751057.0))
                .body("'data'.'cities'[486].'name'", containsString("Bartın"))
                .body("'data'.'cities'[486].'population'", numberMatches(155016.0))
                .body("'data'.'cities'[486].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[486].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[487].'geonamesID'", numberMatches(1720402.0))
                .body("'data'.'cities'[487].'name'", containsString("Calbayog"))
                .body("'data'.'cities'[487].'population'", numberMatches(186960.0))
                .body("'data'.'cities'[487].'timeZone'", nullValue())
                .body("'data'.'cities'[488].'geonamesID'", numberMatches(1271951.0))
                .body("'data'.'cities'[488].'name'", containsString("Faridabad"))
                .body("'data'.'cities'[488].'population'", numberMatches(1404653.0))
                .body("'data'.'cities'[488].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[488].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[489].'geonamesID'", numberMatches(5779334.0))
                .body("'data'.'cities'[489].'name'", containsString("Orem"))
                .body("'data'.'cities'[489].'population'", numberMatches(88328.0))
                .body("'data'.'cities'[489].'timeZone'", nullValue())
                .body("'data'.'cities'[490].'geonamesID'", numberMatches(290340.0))
                .body("'data'.'cities'[490].'name'", containsString("Manama"))
                .body("'data'.'cities'[490].'population'", numberMatches(157474.0))
                .body("'data'.'cities'[490].'timeZone'", nullValue())
                .body("'data'.'cities'[491].'geonamesID'", numberMatches(5384690.0))
                .body("'data'.'cities'[491].'name'", containsString("Poway"))
                .body("'data'.'cities'[491].'population'", numberMatches(47811.0))
                .body("'data'.'cities'[491].'timeZone'", nullValue())
                .body("'data'.'cities'[492].'geonamesID'", numberMatches(4006163.0))
                .body("'data'.'cities'[492].'name'", containsString("Fresnillo"))
                .body("'data'.'cities'[492].'population'", numberMatches(230865.0))
                .body("'data'.'cities'[492].'timeZone'", nullValue())
                .body("'data'.'cities'[493].'geonamesID'", numberMatches(5356451.0))
                .body("'data'.'cities'[493].'name'", containsString("Hercules"))
                .body("'data'.'cities'[493].'population'", numberMatches(24060.0))
                .body("'data'.'cities'[493].'timeZone'", nullValue())
                .body("'data'.'cities'[494].'geonamesID'", numberMatches(1703321.0))
                .body("'data'.'cities'[494].'name'", containsString("Malabon"))
                .body("'data'.'cities'[494].'population'", numberMatches(380522.0))
                .body("'data'.'cities'[494].'timeZone'", nullValue())
                .body("'data'.'cities'[495].'geonamesID'", numberMatches(7391698.0))
                .body("'data'.'cities'[495].'name'", containsString("Izumisano"))
                .body("'data'.'cities'[495].'population'", numberMatches(99328.0))
                .body("'data'.'cities'[495].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[495].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[496].'geonamesID'", numberMatches(4639848.0))
                .body("'data'.'cities'[496].'name'", containsString("Maryville"))
                .body("'data'.'cities'[496].'population'", numberMatches(27465.0))
                .body("'data'.'cities'[496].'timeZone'", nullValue())
                .body("'data'.'cities'[497].'geonamesID'", numberMatches(632453.0))
                .body("'data'.'cities'[497].'name'", containsString("Vantaa"))
                .body("'data'.'cities'[497].'population'", numberMatches(214605.0))
                .body("'data'.'cities'[497].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[497].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[498].'geonamesID'", numberMatches(4736388.0))
                .body("'data'.'cities'[498].'name'", containsString("The Colony"))
                .body("'data'.'cities'[498].'population'", numberMatches(36328.0))
                .body("'data'.'cities'[498].'timeZone'", nullValue())
                .body("'data'.'cities'[499].'geonamesID'", numberMatches(1734810.0))
                .body("'data'.'cities'[499].'name'", containsString("Seremban"))
                .body("'data'.'cities'[499].'population'", numberMatches(419536.0))
                .body("'data'.'cities'[499].'timeZone'", nullValue())
                .body("'data'.'cities'[500].'geonamesID'", numberMatches(1786546.0))
                .body("'data'.'cities'[500].'name'", containsString("Zhongxiang City"))
                .body("'data'.'cities'[500].'population'", numberMatches(1022514.0))
                .body("'data'.'cities'[500].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[500].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[501].'geonamesID'", numberMatches(3669739.0))
                .body("'data'.'cities'[501].'name'", containsString("San Jacinto"))
                .body("'data'.'cities'[501].'population'", numberMatches(21644.0))
                .body("'data'.'cities'[501].'timeZone'", nullValue())
                .body("'data'.'cities'[502].'geonamesID'", numberMatches(6555439.0))
                .body("'data'.'cities'[502].'name'", containsString("Mayen"))
                .body("'data'.'cities'[502].'population'", numberMatches(19144.0))
                .body("'data'.'cities'[502].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[502].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[503].'geonamesID'", numberMatches(8010473.0))
                .body("'data'.'cities'[503].'name'", containsString("Castelo Branco"))
                .body("'data'.'cities'[503].'population'", numberMatches(56109.0))
                .body("'data'.'cities'[503].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[503].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[504].'geonamesID'", numberMatches(3404817.0))
                .body("'data'.'cities'[504].'name'", containsString("Breves"))
                .body("'data'.'cities'[504].'population'", numberMatches(99080.0))
                .body("'data'.'cities'[504].'timeZone'", nullValue())
                .body("'data'.'cities'[505].'geonamesID'", numberMatches(4481682.0))
                .body("'data'.'cities'[505].'name'", containsString("New Bern"))
                .body("'data'.'cities'[505].'population'", numberMatches(29524.0))
                .body("'data'.'cities'[505].'timeZone'.'name'", containsString("UTC−05:00"))
                .body("'data'.'cities'[505].'timeZone'.'offset'", numberMatches(-5.0))
                .body("'data'.'cities'[506].'geonamesID'", numberMatches(3662762.0))
                .body("'data'.'cities'[506].'name'", containsString("Porto Velho"))
                .body("'data'.'cities'[506].'population'", numberMatches(428527.0))
                .body("'data'.'cities'[506].'timeZone'.'name'", containsString("UTC−04:00"))
                .body("'data'.'cities'[506].'timeZone'.'offset'", numberMatches(-4.0))
                .body("'data'.'cities'[507].'geonamesID'", numberMatches(1526384.0))
                .body("'data'.'cities'[507].'name'", containsString("Almaty"))
                .body("'data'.'cities'[507].'population'", numberMatches(1916822.0))
                .body("'data'.'cities'[507].'timeZone'.'name'", containsString("UTC+06:00"))
                .body("'data'.'cities'[507].'timeZone'.'offset'", numberMatches(6.0))
                .body("'data'.'cities'[508].'geonamesID'", numberMatches(4509884.0))
                .body("'data'.'cities'[508].'name'", containsString("Dayton"))
                .body("'data'.'cities'[508].'population'", numberMatches(141527.0))
                .body("'data'.'cities'[508].'timeZone'", nullValue())
                .body("'data'.'cities'[509].'geonamesID'", numberMatches(2362344.0))
                .body("'data'.'cities'[509].'name'", containsString("Bobo Dioulasso"))
                .body("'data'.'cities'[509].'population'", numberMatches(903887.0))
                .body("'data'.'cities'[509].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[509].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[510].'geonamesID'", numberMatches(1859730.0))
                .body("'data'.'cities'[510].'name'", containsString("Kawaguchi"))
                .body("'data'.'cities'[510].'population'", numberMatches(593353.0))
                .body("'data'.'cities'[510].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[510].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[511].'geonamesID'", numberMatches(518659.0))
                .body("'data'.'cities'[511].'name'", containsString("Novokuybyshevsk"))
                .body("'data'.'cities'[511].'population'", numberMatches(102075.0))
                .body("'data'.'cities'[511].'timeZone'", nullValue())
                .body("'data'.'cities'[512].'geonamesID'", numberMatches(2190224.0))
                .body("'data'.'cities'[512].'name'", containsString("Hastings"))
                .body("'data'.'cities'[512].'population'", numberMatches(49000.0))
                .body("'data'.'cities'[512].'timeZone'", nullValue())
                .body("'data'.'cities'[513].'geonamesID'", numberMatches(259245.0))
                .body("'data'.'cities'[513].'name'", containsString("Kos (city)"))
                .body("'data'.'cities'[513].'population'", numberMatches(19432.0))
                .body("'data'.'cities'[513].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[513].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[514].'geonamesID'", numberMatches(6094325.0))
                .body("'data'.'cities'[514].'name'", containsString("Orillia"))
                .body("'data'.'cities'[514].'population'", numberMatches(30586.0))
                .body("'data'.'cities'[514].'timeZone'", nullValue())
                .body("'data'.'cities'[515].'geonamesID'", numberMatches(7316547.0))
                .body("'data'.'cities'[515].'name'", containsString("Rockville"))
                .body("'data'.'cities'[515].'population'", numberMatches(68079.0))
                .body("'data'.'cities'[515].'timeZone'.'name'", containsString("UTC−05:00"))
                .body("'data'.'cities'[515].'timeZone'.'offset'", numberMatches(-5.0))
                .body("'data'.'cities'[516].'geonamesID'", numberMatches(1648186.0))
                .body("'data'.'cities'[516].'name'", containsString("Bontang"))
                .body("'data'.'cities'[516].'population'", numberMatches(161413.0))
                .body("'data'.'cities'[516].'timeZone'", nullValue())
                .body("'data'.'cities'[517].'geonamesID'", numberMatches(2633691.0))
                .body("'data'.'cities'[517].'name'", containsString("Wolverhampton"))
                .body("'data'.'cities'[517].'population'", numberMatches(250970.0))
                .body("'data'.'cities'[517].'timeZone'", nullValue())
                .body("'data'.'cities'[518].'geonamesID'", numberMatches(4991735.0))
                .body("'data'.'cities'[518].'name'", containsString("Eastpointe"))
                .body("'data'.'cities'[518].'population'", numberMatches(34077.0))
                .body("'data'.'cities'[518].'timeZone'", nullValue())
                .body("'data'.'cities'[519].'geonamesID'", numberMatches(5038108.0))
                .body("'data'.'cities'[519].'name'", containsString("Moorhead"))
                .body("'data'.'cities'[519].'population'", numberMatches(38065.0))
                .body("'data'.'cities'[519].'timeZone'", nullValue())
                .body("'data'.'cities'[520].'geonamesID'", numberMatches(3247442.0))
                .body("'data'.'cities'[520].'name'", containsString("Münster"))
                .body("'data'.'cities'[520].'population'", numberMatches(314319.0))
                .body("'data'.'cities'[520].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[520].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[521].'geonamesID'", numberMatches(1721080.0))
                .body("'data'.'cities'[521].'name'", containsString("Cagayan de Oro"))
                .body("'data'.'cities'[521].'population'", numberMatches(728402.0))
                .body("'data'.'cities'[521].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[521].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[522].'geonamesID'", numberMatches(598099.0))
                .body("'data'.'cities'[522].'name'", containsString("Klaipėda"))
                .body("'data'.'cities'[522].'population'", numberMatches(164310.0))
                .body("'data'.'cities'[522].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[522].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[523].'geonamesID'", numberMatches(6551009.0))
                .body("'data'.'cities'[523].'name'", containsString("Apolda"))
                .body("'data'.'cities'[523].'population'", numberMatches(22012.0))
                .body("'data'.'cities'[523].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[523].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[524].'geonamesID'", numberMatches(3985604.0))
                .body("'data'.'cities'[524].'name'", containsString("San Luis Río Colorado"))
                .body("'data'.'cities'[524].'population'", numberMatches(192739.0))
                .body("'data'.'cities'[524].'timeZone'", nullValue())
                .body("'data'.'cities'[525].'geonamesID'", numberMatches(4180439.0))
                .body("'data'.'cities'[525].'name'", containsString("Atlanta"))
                .body("'data'.'cities'[525].'population'", numberMatches(486290.0))
                .body("'data'.'cities'[525].'timeZone'.'name'", containsString("UTC−05:00"))
                .body("'data'.'cities'[525].'timeZone'.'offset'", numberMatches(-5.0))
                .body("'data'.'cities'[526].'geonamesID'", numberMatches(1527004.0))
                .body("'data'.'cities'[526].'name'", containsString("Balykchy"))
                .body("'data'.'cities'[526].'population'", numberMatches(42380.0))
                .body("'data'.'cities'[526].'timeZone'.'name'", containsString("UTC+06:00"))
                .body("'data'.'cities'[526].'timeZone'.'offset'", numberMatches(6.0))
                .body("'data'.'cities'[527].'geonamesID'", numberMatches(6930331.0))
                .body("'data'.'cities'[527].'name'", containsString("Loures"))
                .body("'data'.'cities'[527].'population'", numberMatches(205054.0))
                .body("'data'.'cities'[527].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[527].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[528].'geonamesID'", numberMatches(3134331.0))
                .body("'data'.'cities'[528].'name'", containsString("Tønsberg"))
                .body("'data'.'cities'[528].'population'", numberMatches(52419.0))
                .body("'data'.'cities'[528].'timeZone'", nullValue())
                .body("'data'.'cities'[529].'geonamesID'", numberMatches(6558170.0))
                .body("'data'.'cities'[529].'name'", containsString("Albstadt"))
                .body("'data'.'cities'[529].'population'", numberMatches(45465.0))
                .body("'data'.'cities'[529].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[529].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[530].'geonamesID'", numberMatches(3461879.0))
                .body("'data'.'cities'[530].'name'", containsString("Guarapuava"))
                .body("'data'.'cities'[530].'population'", numberMatches(167328.0))
                .body("'data'.'cities'[530].'timeZone'", nullValue())
                .body("'data'.'cities'[531].'geonamesID'", numberMatches(4509177.0))
                .body("'data'.'cities'[531].'name'", containsString("Columbus"))
                .body("'data'.'cities'[531].'population'", numberMatches(913921.0))
                .body("'data'.'cities'[531].'timeZone'.'name'", containsString("UTC−05:00"))
                .body("'data'.'cities'[531].'timeZone'.'offset'", numberMatches(-5.0))
                .body("'data'.'cities'[532].'geonamesID'", numberMatches(6356927.0))
                .body("'data'.'cities'[532].'name'", containsString("Cádiz"))
                .body("'data'.'cities'[532].'population'", numberMatches(115439.0))
                .body("'data'.'cities'[532].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[532].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[533].'geonamesID'", numberMatches(2950073.0))
                .body("'data'.'cities'[533].'name'", containsString("Bernburg"))
                .body("'data'.'cities'[533].'population'", numberMatches(32674.0))
                .body("'data'.'cities'[533].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[533].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[534].'geonamesID'", numberMatches(4608657.0))
                .body("'data'.'cities'[534].'name'", containsString("Bristol"))
                .body("'data'.'cities'[534].'population'", numberMatches(26702.0))
                .body("'data'.'cities'[534].'timeZone'", nullValue())
                .body("'data'.'cities'[535].'geonamesID'", numberMatches(2031964.0))
                .body("'data'.'cities'[535].'name'", containsString("Darkhan"))
                .body("'data'.'cities'[535].'population'", numberMatches(74738.0))
                .body("'data'.'cities'[535].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[535].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[536].'geonamesID'", numberMatches(6557577.0))
                .body("'data'.'cities'[536].'name'", containsString("Stadtlohn"))
                .body("'data'.'cities'[536].'population'", numberMatches(20322.0))
                .body("'data'.'cities'[536].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[536].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[537].'geonamesID'", numberMatches(260989.0))
                .body("'data'.'cities'[537].'name'", containsString("Karditsa"))
                .body("'data'.'cities'[537].'population'", numberMatches(38554.0))
                .body("'data'.'cities'[537].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[537].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[538].'geonamesID'", numberMatches(5143396.0))
                .body("'data'.'cities'[538].'name'", containsString("Watertown"))
                .body("'data'.'cities'[538].'population'", numberMatches(27023.0))
                .body("'data'.'cities'[538].'timeZone'", nullValue())
                .body("'data'.'cities'[539].'geonamesID'", numberMatches(6558045.0))
                .body("'data'.'cities'[539].'name'", containsString("Rastatt"))
                .body("'data'.'cities'[539].'population'", numberMatches(49783.0))
                .body("'data'.'cities'[539].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[539].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[540].'geonamesID'", numberMatches(1852899.0))
                .body("'data'.'cities'[540].'name'", containsString("Sasebo"))
                .body("'data'.'cities'[540].'population'", numberMatches(242664.0))
                .body("'data'.'cities'[540].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[540].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[541].'geonamesID'", numberMatches(5006233.0))
                .body("'data'.'cities'[541].'name'", containsString("Port Huron"))
                .body("'data'.'cities'[541].'population'", numberMatches(30184.0))
                .body("'data'.'cities'[541].'timeZone'", nullValue())
                .body("'data'.'cities'[542].'geonamesID'", numberMatches(3129133.0))
                .body("'data'.'cities'[542].'name'", containsString("Avilés"))
                .body("'data'.'cities'[542].'population'", numberMatches(77791.0))
                .body("'data'.'cities'[542].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[542].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[543].'geonamesID'", numberMatches(3044681.0))
                .body("'data'.'cities'[543].'name'", containsString("Szentendre"))
                .body("'data'.'cities'[543].'population'", numberMatches(26447.0))
                .body("'data'.'cities'[543].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[543].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[544].'geonamesID'", numberMatches(3567595.0))
                .body("'data'.'cities'[544].'name'", containsString("Bayamo"))
                .body("'data'.'cities'[544].'population'", numberMatches(235107.0))
                .body("'data'.'cities'[544].'timeZone'", nullValue())
                .body("'data'.'cities'[545].'geonamesID'", numberMatches(6557647.0))
                .body("'data'.'cities'[545].'name'", containsString("Petershagen"))
                .body("'data'.'cities'[545].'population'", numberMatches(25168.0))
                .body("'data'.'cities'[545].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[545].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[546].'geonamesID'", numberMatches(1808198.0))
                .body("'data'.'cities'[546].'name'", containsString("Heze"))
                .body("'data'.'cities'[546].'population'", numberMatches(8750000.0))
                .body("'data'.'cities'[546].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[546].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[547].'geonamesID'", numberMatches(598316.0))
                .body("'data'.'cities'[547].'name'", containsString("Kaunas"))
                .body("'data'.'cities'[547].'population'", numberMatches(288466.0))
                .body("'data'.'cities'[547].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[547].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[548].'geonamesID'", numberMatches(935582.0))
                .body("'data'.'cities'[548].'name'", containsString("Le Tampon"))
                .body("'data'.'cities'[548].'population'", numberMatches(79385.0))
                .body("'data'.'cities'[548].'timeZone'.'name'", containsString("UTC+04:00"))
                .body("'data'.'cities'[548].'timeZone'.'offset'", numberMatches(4.0))
                .body("'data'.'cities'[549].'geonamesID'", numberMatches(3169070.0))
                .body("'data'.'cities'[549].'name'", containsString("Rome"))
                .body("'data'.'cities'[549].'population'", numberMatches(2872800.0))
                .body("'data'.'cities'[549].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[549].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[550].'geonamesID'", numberMatches(2411586.0))
                .body("'data'.'cities'[550].'name'", containsString("Gibraltar"))
                .body("'data'.'cities'[550].'population'", numberMatches(34003.0))
                .body("'data'.'cities'[550].'timeZone'", nullValue())
                .body("'data'.'cities'[551].'geonamesID'", numberMatches(771158.0))
                .body("'data'.'cities'[551].'name'", containsString("Hajnówka"))
                .body("'data'.'cities'[551].'population'", numberMatches(20615.0))
                .body("'data'.'cities'[551].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[551].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[552].'geonamesID'", numberMatches(71491.0))
                .body("'data'.'cities'[552].'name'", containsString("Rada'a"))
                .body("'data'.'cities'[552].'population'", numberMatches(44755.0))
                .body("'data'.'cities'[552].'timeZone'", nullValue())
                .body("'data'.'cities'[553].'geonamesID'", numberMatches(5392034.0))
                .body("'data'.'cities'[553].'name'", containsString("San Gabriel"))
                .body("'data'.'cities'[553].'population'", numberMatches(39718.0))
                .body("'data'.'cities'[553].'timeZone'", nullValue())
                .body("'data'.'cities'[554].'geonamesID'", numberMatches(1897007.0))
                .body("'data'.'cities'[554].'name'", containsString("Hanam"))
                .body("'data'.'cities'[554].'population'", numberMatches(154838.0))
                .body("'data'.'cities'[554].'timeZone'", nullValue())
                .body("'data'.'cities'[555].'geonamesID'", numberMatches(1788534.0))
                .body("'data'.'cities'[555].'name'", containsString("Xinyang"))
                .body("'data'.'cities'[555].'population'", numberMatches(6634000.0))
                .body("'data'.'cities'[555].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[555].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[556].'geonamesID'", numberMatches(2633352.0))
                .body("'data'.'cities'[556].'name'", containsString("York"))
                .body("'data'.'cities'[556].'population'", numberMatches(198051.0))
                .body("'data'.'cities'[556].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[556].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[557].'geonamesID'", numberMatches(172469.0))
                .body("'data'.'cities'[557].'name'", containsString("Al-Sanamayn"))
                .body("'data'.'cities'[557].'population'", numberMatches(26268.0))
                .body("'data'.'cities'[557].'timeZone'", nullValue())
                .body("'data'.'cities'[558].'geonamesID'", numberMatches(2786546.0))
                .body("'data'.'cities'[558].'name'", containsString("Sint-Truiden"))
                .body("'data'.'cities'[558].'population'", numberMatches(40672.0))
                .body("'data'.'cities'[558].'timeZone'", nullValue())
                .body("'data'.'cities'[559].'geonamesID'", numberMatches(360526.0))
                .body("'data'.'cities'[559].'name'", containsString("Cusae"))
                .body("'data'.'cities'[559].'population'", numberMatches(69388.0))
                .body("'data'.'cities'[559].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[559].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[560].'geonamesID'", numberMatches(3202781.0))
                .body("'data'.'cities'[560].'name'", containsString("Celje"))
                .body("'data'.'cities'[560].'population'", numberMatches(37872.0))
                .body("'data'.'cities'[560].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[560].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[561].'geonamesID'", numberMatches(4101260.0))
                .body("'data'.'cities'[561].'name'", containsString("Bentonville"))
                .body("'data'.'cities'[561].'population'", numberMatches(35301.0))
                .body("'data'.'cities'[561].'timeZone'.'name'", containsString("UTC−06:00"))
                .body("'data'.'cities'[561].'timeZone'.'offset'", numberMatches(-6.0))
                .body("'data'.'cities'[562].'geonamesID'", numberMatches(3568312.0))
                .body("'data'.'cities'[562].'name'", containsString("Artemisa"))
                .body("'data'.'cities'[562].'population'", numberMatches(59130.0))
                .body("'data'.'cities'[562].'timeZone'", nullValue())
                .body("'data'.'cities'[563].'geonamesID'", numberMatches(7286283.0))
                .body("'data'.'cities'[563].'name'", containsString("Lausanne"))
                .body("'data'.'cities'[563].'population'", numberMatches(138905.0))
                .body("'data'.'cities'[563].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[563].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[564].'geonamesID'", numberMatches(1859485.0))
                .body("'data'.'cities'[564].'name'", containsString("Kikugawa"))
                .body("'data'.'cities'[564].'population'", numberMatches(47194.0))
                .body("'data'.'cities'[564].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[564].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[565].'geonamesID'", numberMatches(3437021.0))
                .body("'data'.'cities'[565].'name'", containsString("San Pedro de Ycuamandiyú"))
                .body("'data'.'cities'[565].'population'", numberMatches(35021.0))
                .body("'data'.'cities'[565].'timeZone'", nullValue())
                .body("'data'.'cities'[566].'geonamesID'", numberMatches(1646446.0))
                .body("'data'.'cities'[566].'name'", containsString("Cimahi"))
                .body("'data'.'cities'[566].'population'", numberMatches(586580.0))
                .body("'data'.'cities'[566].'timeZone'", nullValue())
                .body("'data'.'cities'[567].'geonamesID'", numberMatches(4936159.0))
                .body("'data'.'cities'[567].'name'", containsString("Fall River"))
                .body("'data'.'cities'[567].'population'", numberMatches(88857.0))
                .body("'data'.'cities'[567].'timeZone'", nullValue())
                .body("'data'.'cities'[568].'geonamesID'", numberMatches(5330567.0))
                .body("'data'.'cities'[568].'name'", containsString("Brawley"))
                .body("'data'.'cities'[568].'population'", numberMatches(24953.0))
                .body("'data'.'cities'[568].'timeZone'", nullValue())
                .body("'data'.'cities'[569].'geonamesID'", numberMatches(1283401.0))
                .body("'data'.'cities'[569].'name'", containsString("Gaur, Nepal"))
                .body("'data'.'cities'[569].'population'", numberMatches(34937.0))
                .body("'data'.'cities'[569].'timeZone'", nullValue())
                .body("'data'.'cities'[570].'geonamesID'", numberMatches(6559146.0))
                .body("'data'.'cities'[570].'name'", containsString("Eschwege"))
                .body("'data'.'cities'[570].'population'", numberMatches(19606.0))
                .body("'data'.'cities'[570].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[570].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[571].'geonamesID'", numberMatches(4534934.0))
                .body("'data'.'cities'[571].'name'", containsString("Del City"))
                .body("'data'.'cities'[571].'population'", numberMatches(21332.0))
                .body("'data'.'cities'[571].'timeZone'", nullValue())
                .body("'data'.'cities'[572].'geonamesID'", numberMatches(2987914.0))
                .body("'data'.'cities'[572].'name'", containsString("Perpignan"))
                .body("'data'.'cities'[572].'population'", numberMatches(119188.0))
                .body("'data'.'cities'[572].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[572].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[573].'geonamesID'", numberMatches(5044407.0))
                .body("'data'.'cities'[573].'name'", containsString("St. Cloud"))
                .body("'data'.'cities'[573].'population'", numberMatches(65842.0))
                .body("'data'.'cities'[573].'timeZone'", nullValue())
                .body("'data'.'cities'[574].'geonamesID'", numberMatches(4151871.0))
                .body("'data'.'cities'[574].'name'", containsString("Coral Gables"))
                .body("'data'.'cities'[574].'population'", numberMatches(49631.0))
                .body("'data'.'cities'[574].'timeZone'", nullValue())
                .body("'data'.'cities'[575].'geonamesID'", numberMatches(1568510.0))
                .body("'data'.'cities'[575].'name'", containsString("Rạch Giá"))
                .body("'data'.'cities'[575].'population'", numberMatches(250660.0))
                .body("'data'.'cities'[575].'timeZone'", nullValue())
                .body("'data'.'cities'[576].'geonamesID'", numberMatches(30490.0))
                .body("'data'.'cities'[576].'name'", containsString("Ash Shihr"))
                .body("'data'.'cities'[576].'population'", numberMatches(68313.0))
                .body("'data'.'cities'[576].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[576].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[577].'geonamesID'", numberMatches(277130.0))
                .body("'data'.'cities'[577].'name'", containsString("Baalbek"))
                .body("'data'.'cities'[577].'population'", numberMatches(24000.0))
                .body("'data'.'cities'[577].'timeZone'", nullValue())
                .body("'data'.'cities'[578].'geonamesID'", numberMatches(5197517.0))
                .body("'data'.'cities'[578].'name'", containsString("Lebanon"))
                .body("'data'.'cities'[578].'population'", numberMatches(25477.0))
                .body("'data'.'cities'[578].'timeZone'", nullValue())
                .body("'data'.'cities'[579].'geonamesID'", numberMatches(3869657.0))
                .body("'data'.'cities'[579].'name'", containsString("Tomé"))
                .body("'data'.'cities'[579].'population'", numberMatches(42312.0))
                .body("'data'.'cities'[579].'timeZone'", nullValue())
                .body("'data'.'cities'[580].'geonamesID'", numberMatches(3447399.0))
                .body("'data'.'cities'[580].'name'", containsString("Sorocaba"))
                .body("'data'.'cities'[580].'population'", numberMatches(644919.0))
                .body("'data'.'cities'[580].'timeZone'.'name'", containsString("UTC−03:00"))
                .body("'data'.'cities'[580].'timeZone'.'offset'", numberMatches(-3.0))
                .body("'data'.'cities'[581].'geonamesID'", numberMatches(7911054.0))
                .body("'data'.'cities'[581].'name'", containsString("Ayancık"))
                .body("'data'.'cities'[581].'population'", numberMatches(23720.0))
                .body("'data'.'cities'[581].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[581].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[582].'geonamesID'", numberMatches(4467732.0))
                .body("'data'.'cities'[582].'name'", containsString("Gastonia"))
                .body("'data'.'cities'[582].'population'", numberMatches(71741.0))
                .body("'data'.'cities'[582].'timeZone'", nullValue())
                .body("'data'.'cities'[583].'geonamesID'", numberMatches(3460845.0))
                .body("'data'.'cities'[583].'name'", containsString("Itajaí"))
                .body("'data'.'cities'[583].'population'", numberMatches(223112.0))
                .body("'data'.'cities'[583].'timeZone'", nullValue())
                .body("'data'.'cities'[584].'geonamesID'", numberMatches(1864667.0))
                .body("'data'.'cities'[584].'name'", containsString("Bungotakada"))
                .body("'data'.'cities'[584].'population'", numberMatches(21901.0))
                .body("'data'.'cities'[584].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[584].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[585].'geonamesID'", numberMatches(5378771.0))
                .body("'data'.'cities'[585].'name'", containsString("Oceanside"))
                .body("'data'.'cities'[585].'population'", numberMatches(174558.0))
                .body("'data'.'cities'[585].'timeZone'", nullValue())
                .body("'data'.'cities'[586].'geonamesID'", numberMatches(351434.0))
                .body("'data'.'cities'[586].'name'", containsString("Nag Hammadi"))
                .body("'data'.'cities'[586].'population'", numberMatches(45038.0))
                .body("'data'.'cities'[586].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[586].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[587].'geonamesID'", numberMatches(4905367.0))
                .body("'data'.'cities'[587].'name'", containsString("Park Ridge"))
                .body("'data'.'cities'[587].'population'", numberMatches(37480.0))
                .body("'data'.'cities'[587].'timeZone'", nullValue())
                .body("'data'.'cities'[588].'geonamesID'", numberMatches(8334714.0))
                .body("'data'.'cities'[588].'name'", containsString("Piatra Neamț"))
                .body("'data'.'cities'[588].'population'", numberMatches(85055.0))
                .body("'data'.'cities'[588].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[588].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[589].'geonamesID'", numberMatches(1514891.0))
                .body("'data'.'cities'[589].'name'", containsString("Konibodom"))
                .body("'data'.'cities'[589].'population'", numberMatches(50400.0))
                .body("'data'.'cities'[589].'timeZone'.'name'", containsString("UTC+05:00"))
                .body("'data'.'cities'[589].'timeZone'.'offset'", numberMatches(5.0))
                .body("'data'.'cities'[590].'geonamesID'", numberMatches(4174855.0))
                .body("'data'.'cities'[590].'name'", containsString("Tarpon Springs"))
                .body("'data'.'cities'[590].'population'", numberMatches(23484.0))
                .body("'data'.'cities'[590].'timeZone'", nullValue())
                .body("'data'.'cities'[591].'geonamesID'", numberMatches(1857769.0))
                .body("'data'.'cities'[591].'name'", containsString("Maibara"))
                .body("'data'.'cities'[591].'population'", numberMatches(37374.0))
                .body("'data'.'cities'[591].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[591].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[592].'geonamesID'", numberMatches(2037610.0))
                .body("'data'.'cities'[592].'name'", containsString("Dongning"))
                .body("'data'.'cities'[592].'population'", numberMatches(210000.0))
                .body("'data'.'cities'[592].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[592].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[593].'geonamesID'", numberMatches(6557904.0))
                .body("'data'.'cities'[593].'name'", containsString("Konz"))
                .body("'data'.'cities'[593].'population'", numberMatches(18348.0))
                .body("'data'.'cities'[593].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[593].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[594].'geonamesID'", numberMatches(6546410.0))
                .body("'data'.'cities'[594].'name'", containsString("Fkih Ben Saleh"))
                .body("'data'.'cities'[594].'population'", numberMatches(102019.0))
                .body("'data'.'cities'[594].'timeZone'", nullValue())
                .body("'data'.'cities'[595].'geonamesID'", numberMatches(1512535.0))
                .body("'data'.'cities'[595].'name'", containsString("Turtkul"))
                .body("'data'.'cities'[595].'population'", numberMatches(50800.0))
                .body("'data'.'cities'[595].'timeZone'.'name'", containsString("UTC+05:00"))
                .body("'data'.'cities'[595].'timeZone'.'offset'", numberMatches(5.0))
                .body("'data'.'cities'[596].'geonamesID'", numberMatches(4708308.0))
                .body("'data'.'cities'[596].'name'", containsString("Lufkin"))
                .body("'data'.'cities'[596].'population'", numberMatches(32709.0))
                .body("'data'.'cities'[596].'timeZone'", nullValue())
                .body("'data'.'cities'[597].'geonamesID'", numberMatches(4170174.0))
                .body("'data'.'cities'[597].'name'", containsString("Riviera Beach"))
                .body("'data'.'cities'[597].'population'", numberMatches(33369.0))
                .body("'data'.'cities'[597].'timeZone'", nullValue())
                .body("'data'.'cities'[598].'geonamesID'", numberMatches(7649051.0))
                .body("'data'.'cities'[598].'name'", containsString("Tamale"))
                .body("'data'.'cities'[598].'population'", numberMatches(466723.0))
                .body("'data'.'cities'[598].'timeZone'", nullValue())
                .body("'data'.'cities'[599].'geonamesID'", numberMatches(5570160.0))
                .body("'data'.'cities'[599].'name'", containsString("Redding"))
                .body("'data'.'cities'[599].'population'", numberMatches(89861.0))
                .body("'data'.'cities'[599].'timeZone'.'name'", containsString("UTC−08:00"))
                .body("'data'.'cities'[599].'timeZone'.'offset'", numberMatches(-8.0))
                .body("'data'.'cities'[600].'geonamesID'", numberMatches(6319248.0))
                .body("'data'.'cities'[600].'name'", containsString("Vilhena"))
                .body("'data'.'cities'[600].'population'", numberMatches(93745.0))
                .body("'data'.'cities'[600].'timeZone'", nullValue())
                .body("'data'.'cities'[601].'geonamesID'", numberMatches(2530333.0))
                .body("'data'.'cities'[601].'name'", containsString("Tangier"))
                .body("'data'.'cities'[601].'population'", numberMatches(947952.0))
                .body("'data'.'cities'[601].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[601].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[602].'geonamesID'", numberMatches(3057124.0))
                .body("'data'.'cities'[602].'name'", containsString("Trnava"))
                .body("'data'.'cities'[602].'population'", numberMatches(65382.0))
                .body("'data'.'cities'[602].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[602].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[603].'geonamesID'", numberMatches(2113077.0))
                .body("'data'.'cities'[603].'name'", containsString("Asahi"))
                .body("'data'.'cities'[603].'population'", numberMatches(63507.0))
                .body("'data'.'cities'[603].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[603].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[604].'geonamesID'", numberMatches(248875.0))
                .body("'data'.'cities'[604].'name'", containsString("Jerash"))
                .body("'data'.'cities'[604].'population'", numberMatches(50745.0))
                .body("'data'.'cities'[604].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[604].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[605].'geonamesID'", numberMatches(1605239.0))
                .body("'data'.'cities'[605].'name'", containsString("Udon Thani"))
                .body("'data'.'cities'[605].'population'", numberMatches(130274.0))
                .body("'data'.'cities'[605].'timeZone'", nullValue())
                .body("'data'.'cities'[606].'geonamesID'", numberMatches(1860583.0))
                .body("'data'.'cities'[606].'name'", containsString("Kami"))
                .body("'data'.'cities'[606].'population'", numberMatches(26376.0))
                .body("'data'.'cities'[606].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[606].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[607].'geonamesID'", numberMatches(6356233.0))
                .body("'data'.'cities'[607].'name'", containsString("Sant Feliu de Llobregat"))
                .body("'data'.'cities'[607].'population'", numberMatches(45467.0))
                .body("'data'.'cities'[607].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[607].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[608].'geonamesID'", numberMatches(1214520.0))
                .body("'data'.'cities'[608].'name'", containsString("Medan"))
                .body("'data'.'cities'[608].'population'", numberMatches(2524341.0))
                .body("'data'.'cities'[608].'timeZone'.'name'", containsString("UTC+07:00"))
                .body("'data'.'cities'[608].'timeZone'.'offset'", numberMatches(7.0))
                .body("'data'.'cities'[609].'geonamesID'", numberMatches(3453535.0))
                .body("'data'.'cities'[609].'name'", containsString("Piraquara"))
                .body("'data'.'cities'[609].'population'", numberMatches(93207.0))
                .body("'data'.'cities'[609].'timeZone'", nullValue())
                .body("'data'.'cities'[610].'geonamesID'", numberMatches(2208791.0))
                .body("'data'.'cities'[610].'name'", containsString("Yafran"))
                .body("'data'.'cities'[610].'population'", numberMatches(72662.0))
                .body("'data'.'cities'[610].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[610].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[611].'geonamesID'", numberMatches(1636722.0))
                .body("'data'.'cities'[611].'name'", containsString("Malang"))
                .body("'data'.'cities'[611].'population'", numberMatches(780000.0))
                .body("'data'.'cities'[611].'timeZone'.'name'", containsString("UTC+07:00"))
                .body("'data'.'cities'[611].'timeZone'.'offset'", numberMatches(7.0))
                .body("'data'.'cities'[612].'geonamesID'", numberMatches(6551245.0))
                .body("'data'.'cities'[612].'name'", containsString("Blankenburg"))
                .body("'data'.'cities'[612].'population'", numberMatches(19817.0))
                .body("'data'.'cities'[612].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[612].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[613].'geonamesID'", numberMatches(4709013.0))
                .body("'data'.'cities'[613].'name'", containsString("Mansfield"))
                .body("'data'.'cities'[613].'population'", numberMatches(56368.0))
                .body("'data'.'cities'[613].'timeZone'", nullValue())
                .body("'data'.'cities'[614].'geonamesID'", numberMatches(3044774.0))
                .body("'data'.'cities'[614].'name'", containsString("Székesfehérvár"))
                .body("'data'.'cities'[614].'population'", numberMatches(96940.0))
                .body("'data'.'cities'[614].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[614].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[615].'geonamesID'", numberMatches(551487.0))
                .body("'data'.'cities'[615].'name'", containsString("Kazan"))
                .body("'data'.'cities'[615].'population'", numberMatches(1243500.0))
                .body("'data'.'cities'[615].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[615].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[616].'geonamesID'", numberMatches(1232783.0))
                .body("'data'.'cities'[616].'name'", containsString("Nuwara Eliya"))
                .body("'data'.'cities'[616].'population'", numberMatches(27500.0))
                .body("'data'.'cities'[616].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[616].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[617].'geonamesID'", numberMatches(1254187.0))
                .body("'data'.'cities'[617].'name'", containsString("Thrissur"))
                .body("'data'.'cities'[617].'population'", numberMatches(315596.0))
                .body("'data'.'cities'[617].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[617].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[618].'geonamesID'", numberMatches(5376890.0))
                .body("'data'.'cities'[618].'name'", containsString("Newport Beach"))
                .body("'data'.'cities'[618].'population'", numberMatches(85186.0))
                .body("'data'.'cities'[618].'timeZone'", nullValue())
                .body("'data'.'cities'[619].'geonamesID'", numberMatches(2980291.0))
                .body("'data'.'cities'[619].'name'", containsString("Saint-Étienne"))
                .body("'data'.'cities'[619].'population'", numberMatches(173089.0))
                .body("'data'.'cities'[619].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[619].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[620].'geonamesID'", numberMatches(2937956.0))
                .body("'data'.'cities'[620].'name'", containsString("Dessau-Roßlau"))
                .body("'data'.'cities'[620].'population'", numberMatches(81237.0))
                .body("'data'.'cities'[620].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[620].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[621].'geonamesID'", numberMatches(5157588.0))
                .body("'data'.'cities'[621].'name'", containsString("Hilliard"))
                .body("'data'.'cities'[621].'population'", numberMatches(28435.0))
                .body("'data'.'cities'[621].'timeZone'", nullValue())
                .body("'data'.'cities'[622].'geonamesID'", numberMatches(5433124.0))
                .body("'data'.'cities'[622].'name'", containsString("Northglenn"))
                .body("'data'.'cities'[622].'population'", numberMatches(33697.0))
                .body("'data'.'cities'[622].'timeZone'", nullValue())
                .body("'data'.'cities'[623].'geonamesID'", numberMatches(5341531.0))
                .body("'data'.'cities'[623].'name'", containsString("Danville"))
                .body("'data'.'cities'[623].'population'", numberMatches(69420.0))
                .body("'data'.'cities'[623].'timeZone'", nullValue())
                .body("'data'.'cities'[624].'geonamesID'", numberMatches(1687894.0))
                .body("'data'.'cities'[624].'name'", containsString("Santa Rosa"))
                .body("'data'.'cities'[624].'population'", numberMatches(414812.0))
                .body("'data'.'cities'[624].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[624].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[625].'geonamesID'", numberMatches(2129370.0))
                .body("'data'.'cities'[625].'name'", containsString("Kushiro"))
                .body("'data'.'cities'[625].'population'", numberMatches(165699.0))
                .body("'data'.'cities'[625].'timeZone'.'name'", containsString("UTC+09:00"))
                .body("'data'.'cities'[625].'timeZone'.'offset'", numberMatches(9.0))
                .body("'data'.'cities'[626].'geonamesID'", numberMatches(2491889.0))
                .body("'data'.'cities'[626].'name'", containsString("Khenchela"))
                .body("'data'.'cities'[626].'population'", numberMatches(108580.0))
                .body("'data'.'cities'[626].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[626].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[627].'geonamesID'", numberMatches(6559115.0))
                .body("'data'.'cities'[627].'name'", containsString("Oberursel"))
                .body("'data'.'cities'[627].'population'", numberMatches(46248.0))
                .body("'data'.'cities'[627].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[627].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[628].'geonamesID'", numberMatches(298846.0))
                .body("'data'.'cities'[628].'name'", containsString("Tunceli"))
                .body("'data'.'cities'[628].'population'", numberMatches(38504.0))
                .body("'data'.'cities'[628].'timeZone'.'name'", containsString("UTC+03:00"))
                .body("'data'.'cities'[628].'timeZone'.'offset'", numberMatches(3.0))
                .body("'data'.'cities'[629].'geonamesID'", numberMatches(784227.0))
                .body("'data'.'cities'[629].'name'", containsString("Vranje"))
                .body("'data'.'cities'[629].'population'", numberMatches(55138.0))
                .body("'data'.'cities'[629].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[629].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[630].'geonamesID'", numberMatches(2968254.0))
                .body("'data'.'cities'[630].'name'", containsString("Villeurbanne"))
                .body("'data'.'cities'[630].'population'", numberMatches(150659.0))
                .body("'data'.'cities'[630].'timeZone'", nullValue())
                .body("'data'.'cities'[631].'geonamesID'", numberMatches(726050.0))
                .body("'data'.'cities'[631].'name'", containsString("Varna"))
                .body("'data'.'cities'[631].'population'", numberMatches(369162.0))
                .body("'data'.'cities'[631].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[631].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[632].'geonamesID'", numberMatches(3446621.0))
                .body("'data'.'cities'[632].'name'", containsString("Teófilo Otoni"))
                .body("'data'.'cities'[632].'population'", numberMatches(140937.0))
                .body("'data'.'cities'[632].'timeZone'", nullValue())
                .body("'data'.'cities'[633].'geonamesID'", numberMatches(4928788.0))
                .body("'data'.'cities'[633].'name'", containsString("Agawam"))
                .body("'data'.'cities'[633].'population'", numberMatches(28438.0))
                .body("'data'.'cities'[633].'timeZone'.'name'", containsString("UTC−05:00"))
                .body("'data'.'cities'[633].'timeZone'.'offset'", numberMatches(-5.0))
                .body("'data'.'cities'[634].'geonamesID'", numberMatches(1176229.0))
                .body("'data'.'cities'[634].'name'", containsString("Jamshoro"))
                .body("'data'.'cities'[634].'population'", numberMatches(80000.0))
                .body("'data'.'cities'[634].'timeZone'", nullValue())
                .body("'data'.'cities'[635].'geonamesID'", numberMatches(1265859.0))
                .body("'data'.'cities'[635].'name'", containsString("Krishnanagar"))
                .body("'data'.'cities'[635].'population'", numberMatches(153062.0))
                .body("'data'.'cities'[635].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[635].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[636].'geonamesID'", numberMatches(2653228.0))
                .body("'data'.'cities'[636].'name'", containsString("Chester"))
                .body("'data'.'cities'[636].'population'", numberMatches(87507.0))
                .body("'data'.'cities'[636].'timeZone'.'name'", containsString("UTC±00:00"))
                .body("'data'.'cities'[636].'timeZone'.'offset'", numberMatches(0.0))
                .body("'data'.'cities'[637].'geonamesID'", numberMatches(198476.0))
                .body("'data'.'cities'[637].'name'", containsString("Embu"))
                .body("'data'.'cities'[637].'population'", numberMatches(41092.0))
                .body("'data'.'cities'[637].'timeZone'", nullValue())
                .body("'data'.'cities'[638].'geonamesID'", numberMatches(3037854.0))
                .body("'data'.'cities'[638].'name'", containsString("Amiens"))
                .body("'data'.'cities'[638].'population'", numberMatches(133891.0))
                .body("'data'.'cities'[638].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[638].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[639].'geonamesID'", numberMatches(3384987.0))
                .body("'data'.'cities'[639].'name'", containsString("Vitória de Santo Antão"))
                .body("'data'.'cities'[639].'population'", numberMatches(129974.0))
                .body("'data'.'cities'[639].'timeZone'", nullValue())
                .body("'data'.'cities'[640].'geonamesID'", numberMatches(349158.0))
                .body("'data'.'cities'[640].'name'", containsString("Shibin Al Kawm, Al Minufiyah"))
                .body("'data'.'cities'[640].'population'", numberMatches(177112.0))
                .body("'data'.'cities'[640].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[640].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[641].'geonamesID'", numberMatches(1568574.0))
                .body("'data'.'cities'[641].'name'", containsString("Qui Nhơn"))
                .body("'data'.'cities'[641].'population'", numberMatches(311000.0))
                .body("'data'.'cities'[641].'timeZone'", nullValue())
                .body("'data'.'cities'[642].'geonamesID'", numberMatches(1715348.0))
                .body("'data'.'cities'[642].'name'", containsString("Davao City"))
                .body("'data'.'cities'[642].'population'", numberMatches(1776949.0))
                .body("'data'.'cities'[642].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[642].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[643].'geonamesID'", numberMatches(4710178.0))
                .body("'data'.'cities'[643].'name'", containsString("McKinney"))
                .body("'data'.'cities'[643].'population'", numberMatches(131117.0))
                .body("'data'.'cities'[643].'timeZone'", nullValue())
                .body("'data'.'cities'[644].'geonamesID'", numberMatches(1572151.0))
                .body("'data'.'cities'[644].'name'", containsString("Nha Trang"))
                .body("'data'.'cities'[644].'population'", numberMatches(392279.0))
                .body("'data'.'cities'[644].'timeZone'", nullValue())
                .body("'data'.'cities'[645].'geonamesID'", numberMatches(618577.0))
                .body("'data'.'cities'[645].'name'", containsString("Bender"))
                .body("'data'.'cities'[645].'population'", numberMatches(91882.0))
                .body("'data'.'cities'[645].'timeZone'.'name'", containsString("UTC+02:00"))
                .body("'data'.'cities'[645].'timeZone'.'offset'", numberMatches(2.0))
                .body("'data'.'cities'[646].'geonamesID'", numberMatches(2352947.0))
                .body("'data'.'cities'[646].'name'", containsString("Abeokuta"))
                .body("'data'.'cities'[646].'population'", numberMatches(888924.0))
                .body("'data'.'cities'[646].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[646].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[647].'geonamesID'", numberMatches(1268990.0))
                .body("'data'.'cities'[647].'name'", containsString("Jhargram"))
                .body("'data'.'cities'[647].'population'", numberMatches(61712.0))
                .body("'data'.'cities'[647].'timeZone'.'name'", containsString("UTC+05:30"))
                .body("'data'.'cities'[647].'timeZone'.'offset'", numberMatches(5.5))
                .body("'data'.'cities'[648].'geonamesID'", numberMatches(1527879.0))
                .body("'data'.'cities'[648].'name'", containsString("Mailuu-Suu"))
                .body("'data'.'cities'[648].'population'", numberMatches(20200.0))
                .body("'data'.'cities'[648].'timeZone'", nullValue())
                .body("'data'.'cities'[649].'geonamesID'", numberMatches(2659496.0))
                .body("'data'.'cities'[649].'name'", containsString("Neuchâtel"))
                .body("'data'.'cities'[649].'population'", numberMatches(33475.0))
                .body("'data'.'cities'[649].'timeZone'", nullValue())
                .body("'data'.'cities'[650].'geonamesID'", numberMatches(5368335.0))
                .body("'data'.'cities'[650].'name'", containsString("Los Altosi"))
                .body("'data'.'cities'[650].'population'", numberMatches(28976.0))
                .body("'data'.'cities'[650].'timeZone'", nullValue())
                .body("'data'.'cities'[651].'geonamesID'", numberMatches(3046526.0))
                .body("'data'.'cities'[651].'name'", containsString("Pécs"))
                .body("'data'.'cities'[651].'population'", numberMatches(142873.0))
                .body("'data'.'cities'[651].'timeZone'.'name'", containsString("UTC+01:00"))
                .body("'data'.'cities'[651].'timeZone'.'offset'", numberMatches(1.0))
                .body("'data'.'cities'[652].'geonamesID'", numberMatches(1720561.0))
                .body("'data'.'cities'[652].'name'", containsString("Calapan"))
                .body("'data'.'cities'[652].'population'", numberMatches(145786.0))
                .body("'data'.'cities'[652].'timeZone'.'name'", containsString("UTC+08:00"))
                .body("'data'.'cities'[652].'timeZone'.'offset'", numberMatches(8.0))
                .body("'data'.'cities'[653].'geonamesID'", numberMatches(3052045.0))
                .body("'data'.'cities'[653].'name'", containsString("Gyömrő"))
                .body("'data'.'cities'[653].'population'", numberMatches(18301.0))
                .body("'data'.'cities'[653].'timeZone'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  client  {userAgent}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'client'.'userAgent'", containsString("Jersey/2.33 (HttpUrlConnection 1.8.0_265)"));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { timeZones  (limit : -1952508221,skip : 557, where:{})  {cities{continent{countries{currencies{name},geonamesID,languages{alpha2Code},location{lat},name,vatRate},id,name,population},country{alpha2Code,continent{name,population},currencies{convert,id},geonamesID,id,languages{alpha2Code}},location{lat,long},name,population}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.isEmpty()", is(true))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("LIMIT specified value of invalid type, must be a positive integer"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("timeZones"));
    }
    
    
    @Test
    public void test_21() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { domainName  (name : \\\"9FPy7T\\\")  {aaaa{address,city{continent{countries{alpha2Code,currencies{convert,unitSymbols},geonamesID,id},geonamesID,name},id,location{lat},name,timeZone{name}},type},mx{preference},name}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'domainName'.'aaaa'.size()", equalTo(0))
                .body("'data'.'domainName'.'mx'.size()", equalTo(0))
                .body("'data'.'domainName'.'name'", containsString("9FPy7T"));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { countries  (limit : 994,skip : 102, where:{})  {alpha2Code,alpha3Code,capital{geonamesID,population},continent{id,population},currencies{id,name,unitSymbols},geonamesID,population}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'countries'.size()", equalTo(92))
                .body("'data'.'countries'[0].'alpha2Code'", containsString("MV"))
                .body("'data'.'countries'[0].'alpha3Code'", containsString("MDV"))
                .body("'data'.'countries'[0].'capital'.'geonamesID'", numberMatches(1282027.0))
                .body("'data'.'countries'[0].'capital'.'population'", numberMatches(133019.0))
                .body("'data'.'countries'[0].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[0].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[0].'currencies'[0].'name'", containsString("Maldivian rufiyaa"))
                .body("'data'.'countries'[0].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[0].'currencies'[0].'unitSymbols'", hasItems("Rf"))
                .body("'data'.'countries'[0].'geonamesID'", numberMatches(1282028.0))
                .body("'data'.'countries'[0].'population'", numberMatches(436330.0))
                .body("'data'.'countries'[1].'alpha2Code'", containsString("ML"))
                .body("'data'.'countries'[1].'alpha3Code'", containsString("MLI"))
                .body("'data'.'countries'[1].'capital'.'geonamesID'", numberMatches(2460594.0))
                .body("'data'.'countries'[1].'capital'.'population'", numberMatches(2009109.0))
                .body("'data'.'countries'[1].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[1].'currencies'.size()", equalTo(0))
                .body("'data'.'countries'[1].'geonamesID'", numberMatches(2453866.0))
                .body("'data'.'countries'[1].'population'", numberMatches(1.854198E7))
                .body("'data'.'countries'[2].'alpha2Code'", containsString("MT"))
                .body("'data'.'countries'[2].'alpha3Code'", containsString("MLT"))
                .body("'data'.'countries'[2].'capital'", nullValue())
                .body("'data'.'countries'[2].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[2].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[2].'currencies'[0].'name'", containsString("euro"))
                .body("'data'.'countries'[2].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[2].'currencies'[0].'unitSymbols'", hasItems("€"))
                .body("'data'.'countries'[2].'geonamesID'", numberMatches(2562770.0))
                .body("'data'.'countries'[2].'population'", numberMatches(465292.0))
                .body("'data'.'countries'[3].'alpha2Code'", containsString("MH"))
                .body("'data'.'countries'[3].'alpha3Code'", containsString("MHL"))
                .body("'data'.'countries'[3].'capital'", nullValue())
                .body("'data'.'countries'[3].'continent'.'population'", numberMatches(1.2355695E7))
                .body("'data'.'countries'[3].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[3].'currencies'[0].'name'", containsString("United States dollar"))
                .body("'data'.'countries'[3].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[3].'currencies'[0].'unitSymbols'", hasItems("$"))
                .body("'data'.'countries'[3].'geonamesID'", numberMatches(2080185.0))
                .body("'data'.'countries'[3].'population'", numberMatches(53127.0))
                .body("'data'.'countries'[4].'alpha2Code'", containsString("MR"))
                .body("'data'.'countries'[4].'alpha3Code'", containsString("MRT"))
                .body("'data'.'countries'[4].'capital'.'geonamesID'", numberMatches(2377450.0))
                .body("'data'.'countries'[4].'capital'.'population'", numberMatches(1077169.0))
                .body("'data'.'countries'[4].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[4].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[4].'currencies'[0].'name'", containsString("Mauritanian ouguiya"))
                .body("'data'.'countries'[4].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[4].'currencies'[0].'unitSymbols'", hasItems("UM"))
                .body("'data'.'countries'[4].'geonamesID'", numberMatches(2378080.0))
                .body("'data'.'countries'[4].'population'", numberMatches(4420184.0))
                .body("'data'.'countries'[5].'alpha2Code'", containsString("MU"))
                .body("'data'.'countries'[5].'alpha3Code'", containsString("MUS"))
                .body("'data'.'countries'[5].'capital'.'geonamesID'", numberMatches(934154.0))
                .body("'data'.'countries'[5].'capital'.'population'", numberMatches(149194.0))
                .body("'data'.'countries'[5].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[5].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[5].'currencies'[0].'name'", containsString("Mauritian rupee"))
                .body("'data'.'countries'[5].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[5].'currencies'[0].'unitSymbols'", hasItems("₨"))
                .body("'data'.'countries'[5].'geonamesID'", numberMatches(934292.0))
                .body("'data'.'countries'[5].'population'", numberMatches(1264613.0))
                .body("'data'.'countries'[6].'alpha2Code'", containsString("MX"))
                .body("'data'.'countries'[6].'alpha3Code'", containsString("MEX"))
                .body("'data'.'countries'[6].'capital'.'geonamesID'", numberMatches(3527646.0))
                .body("'data'.'countries'[6].'capital'.'population'", numberMatches(8918653.0))
                .body("'data'.'countries'[6].'continent'.'population'", numberMatches(5.79E8))
                .body("'data'.'countries'[6].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[6].'currencies'[0].'name'", containsString("Mexican peso"))
                .body("'data'.'countries'[6].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[6].'currencies'[0].'unitSymbols'", hasItems("$"))
                .body("'data'.'countries'[6].'geonamesID'", numberMatches(3996063.0))
                .body("'data'.'countries'[6].'population'", numberMatches(1.24777324E8))
                .body("'data'.'countries'[7].'alpha2Code'", containsString("MD"))
                .body("'data'.'countries'[7].'alpha3Code'", containsString("MDA"))
                .body("'data'.'countries'[7].'capital'.'geonamesID'", numberMatches(618426.0))
                .body("'data'.'countries'[7].'capital'.'population'", numberMatches(639000.0))
                .body("'data'.'countries'[7].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[7].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[7].'currencies'[0].'name'", containsString("Moldovan leu"))
                .body("'data'.'countries'[7].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[7].'currencies'[0].'unitSymbols'", hasItems("L"))
                .body("'data'.'countries'[7].'geonamesID'", numberMatches(617790.0))
                .body("'data'.'countries'[7].'population'", numberMatches(2550900.0))
                .body("'data'.'countries'[8].'alpha2Code'", containsString("MC"))
                .body("'data'.'countries'[8].'alpha3Code'", containsString("MCO"))
                .body("'data'.'countries'[8].'capital'", nullValue())
                .body("'data'.'countries'[8].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[8].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[8].'currencies'[0].'name'", containsString("euro"))
                .body("'data'.'countries'[8].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[8].'currencies'[0].'unitSymbols'", hasItems("€"))
                .body("'data'.'countries'[8].'geonamesID'", numberMatches(2993457.0))
                .body("'data'.'countries'[8].'population'", numberMatches(38695.0))
                .body("'data'.'countries'[9].'alpha2Code'", containsString("MN"))
                .body("'data'.'countries'[9].'alpha3Code'", containsString("MNG"))
                .body("'data'.'countries'[9].'capital'.'geonamesID'", numberMatches(2028462.0))
                .body("'data'.'countries'[9].'capital'.'population'", numberMatches(1396288.0))
                .body("'data'.'countries'[9].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[9].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[9].'currencies'[0].'name'", containsString("tugrik"))
                .body("'data'.'countries'[9].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[9].'currencies'[0].'unitSymbols'", hasItems("₮"))
                .body("'data'.'countries'[9].'geonamesID'", numberMatches(2029969.0))
                .body("'data'.'countries'[9].'population'", numberMatches(3075647.0))
                .body("'data'.'countries'[10].'alpha2Code'", containsString("ME"))
                .body("'data'.'countries'[10].'alpha3Code'", containsString("MNE"))
                .body("'data'.'countries'[10].'capital'.'geonamesID'", numberMatches(3193044.0))
                .body("'data'.'countries'[10].'capital'.'population'", numberMatches(174515.0))
                .body("'data'.'countries'[10].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[10].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[10].'currencies'[0].'name'", containsString("euro"))
                .body("'data'.'countries'[10].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[10].'currencies'[0].'unitSymbols'", hasItems("€"))
                .body("'data'.'countries'[10].'geonamesID'", numberMatches(3194884.0))
                .body("'data'.'countries'[10].'population'", numberMatches(622359.0))
                .body("'data'.'countries'[11].'alpha2Code'", containsString("MA"))
                .body("'data'.'countries'[11].'alpha3Code'", containsString("MAR"))
                .body("'data'.'countries'[11].'capital'.'geonamesID'", numberMatches(2538475.0))
                .body("'data'.'countries'[11].'capital'.'population'", numberMatches(572717.0))
                .body("'data'.'countries'[11].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[11].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[11].'currencies'[0].'name'", containsString("Moroccan dirham"))
                .body("'data'.'countries'[11].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[11].'currencies'[0].'unitSymbols'", hasItems("DH"))
                .body("'data'.'countries'[11].'geonamesID'", numberMatches(2542007.0))
                .body("'data'.'countries'[11].'population'", numberMatches(3.6029138E7))
                .body("'data'.'countries'[12].'alpha2Code'", containsString("MZ"))
                .body("'data'.'countries'[12].'alpha3Code'", containsString("MOZ"))
                .body("'data'.'countries'[12].'capital'.'geonamesID'", numberMatches(1040652.0))
                .body("'data'.'countries'[12].'capital'.'population'", numberMatches(1191613.0))
                .body("'data'.'countries'[12].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[12].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[12].'currencies'[0].'name'", containsString("Mozambican metical"))
                .body("'data'.'countries'[12].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[12].'currencies'[0].'unitSymbols'", hasItems("MT"))
                .body("'data'.'countries'[12].'geonamesID'", numberMatches(1036973.0))
                .body("'data'.'countries'[12].'population'", numberMatches(2.9668834E7))
                .body("'data'.'countries'[13].'alpha2Code'", containsString("MM"))
                .body("'data'.'countries'[13].'alpha3Code'", containsString("MMR"))
                .body("'data'.'countries'[13].'capital'.'geonamesID'", numberMatches(6611854.0))
                .body("'data'.'countries'[13].'capital'.'population'", numberMatches(1160242.0))
                .body("'data'.'countries'[13].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[13].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[13].'currencies'[0].'name'", containsString("kyat"))
                .body("'data'.'countries'[13].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[13].'currencies'[0].'unitSymbols'", hasItems("K"))
                .body("'data'.'countries'[13].'geonamesID'", numberMatches(1327865.0))
                .body("'data'.'countries'[13].'population'", numberMatches(5.3370609E7))
                .body("'data'.'countries'[14].'alpha2Code'", containsString("NA"))
                .body("'data'.'countries'[14].'alpha3Code'", containsString("NAM"))
                .body("'data'.'countries'[14].'capital'.'geonamesID'", numberMatches(3352136.0))
                .body("'data'.'countries'[14].'capital'.'population'", numberMatches(322500.0))
                .body("'data'.'countries'[14].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[14].'currencies'.size()", equalTo(2))
                .body("'data'.'countries'[14].'currencies'[0].'name'", containsString("Namibian dollar"))
                .body("'data'.'countries'[14].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[14].'currencies'[0].'unitSymbols'", hasItems("N$"))
                .body("'data'.'countries'[14].'currencies'[1].'name'", containsString("South African rand"))
                .body("'data'.'countries'[14].'currencies'[1].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[14].'currencies'[1].'unitSymbols'", hasItems("R"))
                .body("'data'.'countries'[14].'geonamesID'", numberMatches(3355338.0))
                .body("'data'.'countries'[14].'population'", numberMatches(2533794.0))
                .body("'data'.'countries'[15].'alpha2Code'", containsString("NR"))
                .body("'data'.'countries'[15].'alpha3Code'", containsString("NRU"))
                .body("'data'.'countries'[15].'capital'", nullValue())
                .body("'data'.'countries'[15].'continent'.'population'", numberMatches(1.2355695E7))
                .body("'data'.'countries'[15].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[15].'currencies'[0].'name'", containsString("Australian dollar"))
                .body("'data'.'countries'[15].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[15].'currencies'[0].'unitSymbols'", hasItems("A$"))
                .body("'data'.'countries'[15].'geonamesID'", numberMatches(2110425.0))
                .body("'data'.'countries'[15].'population'", numberMatches(13650.0))
                .body("'data'.'countries'[16].'alpha2Code'", containsString("NP"))
                .body("'data'.'countries'[16].'alpha3Code'", containsString("NPL"))
                .body("'data'.'countries'[16].'capital'.'geonamesID'", numberMatches(1283240.0))
                .body("'data'.'countries'[16].'capital'.'population'", numberMatches(975453.0))
                .body("'data'.'countries'[16].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[16].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[16].'currencies'[0].'name'", containsString("Nepalese rupee"))
                .body("'data'.'countries'[16].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[16].'currencies'[0].'unitSymbols'", hasItems("N₨"))
                .body("'data'.'countries'[16].'geonamesID'", numberMatches(1282988.0))
                .body("'data'.'countries'[16].'population'", numberMatches(3.0327877E7))
                .body("'data'.'countries'[17].'alpha2Code'", containsString("NZ"))
                .body("'data'.'countries'[17].'alpha3Code'", containsString("NZL"))
                .body("'data'.'countries'[17].'capital'.'geonamesID'", numberMatches(2179537.0))
                .body("'data'.'countries'[17].'capital'.'population'", numberMatches(418500.0))
                .body("'data'.'countries'[17].'continent'.'population'", numberMatches(1.2355695E7))
                .body("'data'.'countries'[17].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[17].'currencies'[0].'name'", containsString("New Zealand dollar"))
                .body("'data'.'countries'[17].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[17].'currencies'[0].'unitSymbols'", hasItems("NZ$"))
                .body("'data'.'countries'[17].'geonamesID'", numberMatches(2186224.0))
                .body("'data'.'countries'[17].'population'", numberMatches(5112300.0))
                .body("'data'.'countries'[18].'alpha2Code'", containsString("NI"))
                .body("'data'.'countries'[18].'alpha3Code'", containsString("NIC"))
                .body("'data'.'countries'[18].'capital'.'geonamesID'", numberMatches(3617763.0))
                .body("'data'.'countries'[18].'capital'.'population'", numberMatches(1028808.0))
                .body("'data'.'countries'[18].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[18].'currencies'[0].'name'", containsString("Nicaraguan córdoba"))
                .body("'data'.'countries'[18].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[18].'currencies'[0].'unitSymbols'", hasItems("C$"))
                .body("'data'.'countries'[18].'geonamesID'", numberMatches(3617476.0))
                .body("'data'.'countries'[18].'population'", numberMatches(6217581.0))
                .body("'data'.'countries'[19].'alpha2Code'", containsString("NE"))
                .body("'data'.'countries'[19].'alpha3Code'", containsString("NER"))
                .body("'data'.'countries'[19].'capital'.'geonamesID'", numberMatches(2440485.0))
                .body("'data'.'countries'[19].'capital'.'population'", numberMatches(1026848.0))
                .body("'data'.'countries'[19].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[19].'currencies'.size()", equalTo(0))
                .body("'data'.'countries'[19].'geonamesID'", numberMatches(2440476.0))
                .body("'data'.'countries'[19].'population'", numberMatches(2.1477348E7))
                .body("'data'.'countries'[20].'alpha2Code'", containsString("NG"))
                .body("'data'.'countries'[20].'alpha3Code'", containsString("NGA"))
                .body("'data'.'countries'[20].'capital'.'geonamesID'", numberMatches(2352778.0))
                .body("'data'.'countries'[20].'capital'.'population'", numberMatches(1235880.0))
                .body("'data'.'countries'[20].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[20].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[20].'currencies'[0].'name'", containsString("Nigerian naira"))
                .body("'data'.'countries'[20].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[20].'currencies'[0].'unitSymbols'", hasItems("₦"))
                .body("'data'.'countries'[20].'geonamesID'", numberMatches(2328926.0))
                .body("'data'.'countries'[20].'population'", numberMatches(1.90886311E8))
                .body("'data'.'countries'[21].'alpha2Code'", containsString("KP"))
                .body("'data'.'countries'[21].'alpha3Code'", containsString("PRK"))
                .body("'data'.'countries'[21].'capital'.'geonamesID'", numberMatches(1871856.0))
                .body("'data'.'countries'[21].'capital'.'population'", numberMatches(2863000.0))
                .body("'data'.'countries'[21].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[21].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[21].'currencies'[0].'name'", containsString("North Korean won"))
                .body("'data'.'countries'[21].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[21].'currencies'[0].'unitSymbols'", hasItems("₩"))
                .body("'data'.'countries'[21].'geonamesID'", numberMatches(1873107.0))
                .body("'data'.'countries'[21].'population'", numberMatches(2.5490965E7))
                .body("'data'.'countries'[22].'alpha2Code'", containsString("MK"))
                .body("'data'.'countries'[22].'alpha3Code'", containsString("MKD"))
                .body("'data'.'countries'[22].'capital'.'geonamesID'", numberMatches(785842.0))
                .body("'data'.'countries'[22].'capital'.'population'", numberMatches(640000.0))
                .body("'data'.'countries'[22].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[22].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[22].'currencies'[0].'name'", containsString("denar"))
                .body("'data'.'countries'[22].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[22].'currencies'[0].'unitSymbols'", hasItems("DEN"))
                .body("'data'.'countries'[22].'geonamesID'", numberMatches(718075.0))
                .body("'data'.'countries'[22].'population'", numberMatches(2075301.0))
                .body("'data'.'countries'[23].'alpha2Code'", containsString("NO"))
                .body("'data'.'countries'[23].'alpha3Code'", containsString("NOR"))
                .body("'data'.'countries'[23].'capital'.'geonamesID'", numberMatches(3143244.0))
                .body("'data'.'countries'[23].'capital'.'population'", numberMatches(693494.0))
                .body("'data'.'countries'[23].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[23].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[23].'currencies'[0].'name'", containsString("Norwegian krone"))
                .body("'data'.'countries'[23].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[23].'currencies'[0].'unitSymbols'", hasItems("kr"))
                .body("'data'.'countries'[23].'geonamesID'", numberMatches(3144096.0))
                .body("'data'.'countries'[23].'population'", numberMatches(5391369.0))
                .body("'data'.'countries'[24].'alpha2Code'", containsString("OM"))
                .body("'data'.'countries'[24].'alpha3Code'", containsString("OMN"))
                .body("'data'.'countries'[24].'capital'.'geonamesID'", numberMatches(287286.0))
                .body("'data'.'countries'[24].'capital'.'population'", numberMatches(1421409.0))
                .body("'data'.'countries'[24].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[24].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[24].'currencies'[0].'name'", containsString("Omani rial"))
                .body("'data'.'countries'[24].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[24].'currencies'[0].'unitSymbols'", hasItems("ر.ع."))
                .body("'data'.'countries'[24].'geonamesID'", numberMatches(286963.0))
                .body("'data'.'countries'[24].'population'", numberMatches(4829480.0))
                .body("'data'.'countries'[25].'alpha2Code'", containsString("PK"))
                .body("'data'.'countries'[25].'alpha3Code'", containsString("PAK"))
                .body("'data'.'countries'[25].'capital'.'geonamesID'", numberMatches(1176615.0))
                .body("'data'.'countries'[25].'capital'.'population'", numberMatches(1014825.0))
                .body("'data'.'countries'[25].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[25].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[25].'currencies'[0].'name'", containsString("Pakistani rupee"))
                .body("'data'.'countries'[25].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[25].'currencies'[0].'unitSymbols'", hasItems("₨"))
                .body("'data'.'countries'[25].'geonamesID'", numberMatches(1168579.0))
                .body("'data'.'countries'[25].'population'", numberMatches(2.16565318E8))
                .body("'data'.'countries'[26].'alpha2Code'", containsString("PW"))
                .body("'data'.'countries'[26].'alpha3Code'", containsString("PLW"))
                .body("'data'.'countries'[26].'capital'", nullValue())
                .body("'data'.'countries'[26].'continent'.'population'", numberMatches(1.2355695E7))
                .body("'data'.'countries'[26].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[26].'currencies'[0].'name'", containsString("United States dollar"))
                .body("'data'.'countries'[26].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[26].'currencies'[0].'unitSymbols'", hasItems("$"))
                .body("'data'.'countries'[26].'geonamesID'", numberMatches(1559582.0))
                .body("'data'.'countries'[26].'population'", numberMatches(21729.0))
                .body("'data'.'countries'[27].'alpha2Code'", containsString("PA"))
                .body("'data'.'countries'[27].'alpha3Code'", containsString("PAN"))
                .body("'data'.'countries'[27].'capital'.'geonamesID'", numberMatches(3703443.0))
                .body("'data'.'countries'[27].'capital'.'population'", numberMatches(880691.0))
                .body("'data'.'countries'[27].'continent'.'population'", numberMatches(5.79E8))
                .body("'data'.'countries'[27].'currencies'.size()", equalTo(2))
                .body("'data'.'countries'[27].'currencies'[0].'name'", containsString("Panamanian balboa"))
                .body("'data'.'countries'[27].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[27].'currencies'[0].'unitSymbols'", hasItems("B/."))
                .body("'data'.'countries'[27].'currencies'[1].'name'", containsString("United States dollar"))
                .body("'data'.'countries'[27].'currencies'[1].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[27].'currencies'[1].'unitSymbols'", hasItems("$"))
                .body("'data'.'countries'[27].'geonamesID'", numberMatches(3703430.0))
                .body("'data'.'countries'[27].'population'", numberMatches(4098587.0))
                .body("'data'.'countries'[28].'alpha2Code'", containsString("PG"))
                .body("'data'.'countries'[28].'alpha3Code'", containsString("PNG"))
                .body("'data'.'countries'[28].'capital'.'geonamesID'", numberMatches(2088122.0))
                .body("'data'.'countries'[28].'capital'.'population'", numberMatches(317374.0))
                .body("'data'.'countries'[28].'continent'.'population'", numberMatches(1.2355695E7))
                .body("'data'.'countries'[28].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[28].'currencies'[0].'name'", containsString("kina"))
                .body("'data'.'countries'[28].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[28].'currencies'[0].'unitSymbols'", hasItems("K"))
                .body("'data'.'countries'[28].'geonamesID'", numberMatches(2088628.0))
                .body("'data'.'countries'[28].'population'", numberMatches(8935000.0))
                .body("'data'.'countries'[29].'alpha2Code'", containsString("PY"))
                .body("'data'.'countries'[29].'alpha3Code'", containsString("PRY"))
                .body("'data'.'countries'[29].'capital'.'geonamesID'", numberMatches(3439389.0))
                .body("'data'.'countries'[29].'capital'.'population'", numberMatches(521101.0))
                .body("'data'.'countries'[29].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[29].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[29].'currencies'[0].'name'", containsString("Paraguayan guaraní"))
                .body("'data'.'countries'[29].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[29].'currencies'[0].'unitSymbols'", hasItems("₲"))
                .body("'data'.'countries'[29].'geonamesID'", numberMatches(3437598.0))
                .body("'data'.'countries'[29].'population'", numberMatches(6811297.0))
                .body("'data'.'countries'[30].'alpha2Code'", containsString("CN"))
                .body("'data'.'countries'[30].'alpha3Code'", containsString("CHN"))
                .body("'data'.'countries'[30].'capital'.'geonamesID'", numberMatches(1816670.0))
                .body("'data'.'countries'[30].'capital'.'population'", numberMatches(2.171E7))
                .body("'data'.'countries'[30].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[30].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[30].'currencies'[0].'name'", containsString("renminbi"))
                .body("'data'.'countries'[30].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[30].'currencies'[0].'unitSymbols'", hasItems("¥"))
                .body("'data'.'countries'[30].'geonamesID'", numberMatches(1814991.0))
                .body("'data'.'countries'[30].'population'", numberMatches(1.443497378E9))
                .body("'data'.'countries'[31].'alpha2Code'", containsString("PE"))
                .body("'data'.'countries'[31].'alpha3Code'", containsString("PER"))
                .body("'data'.'countries'[31].'capital'.'geonamesID'", numberMatches(3936456.0))
                .body("'data'.'countries'[31].'capital'.'population'", numberMatches(9674755.0))
                .body("'data'.'countries'[31].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[31].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[31].'currencies'[0].'name'", containsString("Peruvian sol"))
                .body("'data'.'countries'[31].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[31].'currencies'[0].'unitSymbols'", hasItems("S/."))
                .body("'data'.'countries'[31].'geonamesID'", numberMatches(3932488.0))
                .body("'data'.'countries'[31].'population'", numberMatches(2.9381884E7))
                .body("'data'.'countries'[32].'alpha2Code'", containsString("PH"))
                .body("'data'.'countries'[32].'alpha3Code'", containsString("PHL"))
                .body("'data'.'countries'[32].'capital'.'geonamesID'", numberMatches(1701668.0))
                .body("'data'.'countries'[32].'capital'.'population'", numberMatches(1846513.0))
                .body("'data'.'countries'[32].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[32].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[32].'currencies'[0].'name'", containsString("Philippine peso"))
                .body("'data'.'countries'[32].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[32].'currencies'[0].'unitSymbols'", hasItems("₱"))
                .body("'data'.'countries'[32].'geonamesID'", numberMatches(1694008.0))
                .body("'data'.'countries'[32].'population'", numberMatches(1.09035343E8))
                .body("'data'.'countries'[33].'alpha2Code'", containsString("PL"))
                .body("'data'.'countries'[33].'alpha3Code'", containsString("POL"))
                .body("'data'.'countries'[33].'capital'.'geonamesID'", numberMatches(756135.0))
                .body("'data'.'countries'[33].'capital'.'population'", numberMatches(1790658.0))
                .body("'data'.'countries'[33].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[33].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[33].'currencies'[0].'name'", containsString("złoty"))
                .body("'data'.'countries'[33].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[33].'currencies'[0].'unitSymbols'", hasItems("zł"))
                .body("'data'.'countries'[33].'geonamesID'", numberMatches(798544.0))
                .body("'data'.'countries'[33].'population'", numberMatches(3.8382576E7))
                .body("'data'.'countries'[34].'alpha2Code'", containsString("PT"))
                .body("'data'.'countries'[34].'alpha3Code'", containsString("PRT"))
                .body("'data'.'countries'[34].'capital'.'geonamesID'", numberMatches(2267057.0))
                .body("'data'.'countries'[34].'capital'.'population'", numberMatches(506654.0))
                .body("'data'.'countries'[34].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[34].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[34].'currencies'[0].'name'", containsString("euro"))
                .body("'data'.'countries'[34].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[34].'currencies'[0].'unitSymbols'", hasItems("€"))
                .body("'data'.'countries'[34].'geonamesID'", numberMatches(2264397.0))
                .body("'data'.'countries'[34].'population'", numberMatches(1.0347892E7))
                .body("'data'.'countries'[35].'alpha2Code'", containsString("QA"))
                .body("'data'.'countries'[35].'alpha3Code'", containsString("QAT"))
                .body("'data'.'countries'[35].'capital'.'geonamesID'", numberMatches(290030.0))
                .body("'data'.'countries'[35].'capital'.'population'", numberMatches(1312947.0))
                .body("'data'.'countries'[35].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[35].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[35].'currencies'[0].'name'", containsString("Qatari riyal"))
                .body("'data'.'countries'[35].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[35].'currencies'[0].'unitSymbols'", hasItems("QR"))
                .body("'data'.'countries'[35].'geonamesID'", numberMatches(289688.0))
                .body("'data'.'countries'[35].'population'", numberMatches(2639211.0))
                .body("'data'.'countries'[36].'alpha2Code'", containsString("CG"))
                .body("'data'.'countries'[36].'alpha3Code'", containsString("COG"))
                .body("'data'.'countries'[36].'capital'.'geonamesID'", numberMatches(2260535.0))
                .body("'data'.'countries'[36].'capital'.'population'", numberMatches(1827000.0))
                .body("'data'.'countries'[36].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[36].'currencies'.size()", equalTo(0))
                .body("'data'.'countries'[36].'geonamesID'", numberMatches(2260494.0))
                .body("'data'.'countries'[36].'population'", numberMatches(5260750.0))
                .body("'data'.'countries'[37].'alpha2Code'", containsString("RO"))
                .body("'data'.'countries'[37].'alpha3Code'", containsString("ROU"))
                .body("'data'.'countries'[37].'capital'.'geonamesID'", numberMatches(683506.0))
                .body("'data'.'countries'[37].'capital'.'population'", numberMatches(1883425.0))
                .body("'data'.'countries'[37].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[37].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[37].'currencies'[0].'name'", containsString("Romanian leu"))
                .body("'data'.'countries'[37].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[37].'currencies'[0].'unitSymbols'", hasItems("lei"))
                .body("'data'.'countries'[37].'geonamesID'", numberMatches(798549.0))
                .body("'data'.'countries'[37].'population'", numberMatches(1.9586539E7))
                .body("'data'.'countries'[38].'alpha2Code'", containsString("RU"))
                .body("'data'.'countries'[38].'alpha3Code'", containsString("RUS"))
                .body("'data'.'countries'[38].'capital'.'geonamesID'", numberMatches(524901.0))
                .body("'data'.'countries'[38].'capital'.'population'", numberMatches(1.265505E7))
                .body("'data'.'countries'[38].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[38].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[38].'currencies'[0].'name'", containsString("Russian ruble"))
                .body("'data'.'countries'[38].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[38].'currencies'[0].'unitSymbols'", hasItems("₽"))
                .body("'data'.'countries'[38].'geonamesID'", numberMatches(2017370.0))
                .body("'data'.'countries'[38].'population'", numberMatches(1.46804372E8))
                .body("'data'.'countries'[39].'alpha2Code'", containsString("RW"))
                .body("'data'.'countries'[39].'alpha3Code'", containsString("RWA"))
                .body("'data'.'countries'[39].'capital'.'geonamesID'", numberMatches(202061.0))
                .body("'data'.'countries'[39].'capital'.'population'", numberMatches(1156663.0))
                .body("'data'.'countries'[39].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[39].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[39].'currencies'[0].'name'", containsString("Rwandan franc"))
                .body("'data'.'countries'[39].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[39].'currencies'[0].'unitSymbols'", hasItems("FRw"))
                .body("'data'.'countries'[39].'geonamesID'", numberMatches(49518.0))
                .body("'data'.'countries'[39].'population'", numberMatches(1.2208407E7))
                .body("'data'.'countries'[40].'alpha2Code'", containsString("KN"))
                .body("'data'.'countries'[40].'alpha3Code'", containsString("KNA"))
                .body("'data'.'countries'[40].'capital'", nullValue())
                .body("'data'.'countries'[40].'continent'.'population'", numberMatches(5.79E8))
                .body("'data'.'countries'[40].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[40].'currencies'[0].'name'", containsString("Eastern Caribbean dollar"))
                .body("'data'.'countries'[40].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[40].'currencies'[0].'unitSymbols'", hasItems("EC$"))
                .body("'data'.'countries'[40].'geonamesID'", numberMatches(3575174.0))
                .body("'data'.'countries'[40].'population'", numberMatches(55345.0))
                .body("'data'.'countries'[41].'alpha2Code'", containsString("LC"))
                .body("'data'.'countries'[41].'alpha3Code'", containsString("LCA"))
                .body("'data'.'countries'[41].'capital'.'geonamesID'", numberMatches(3576812.0))
                .body("'data'.'countries'[41].'capital'.'population'", numberMatches(70000.0))
                .body("'data'.'countries'[41].'continent'.'population'", numberMatches(5.79E8))
                .body("'data'.'countries'[41].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[41].'currencies'[0].'name'", containsString("Eastern Caribbean dollar"))
                .body("'data'.'countries'[41].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[41].'currencies'[0].'unitSymbols'", hasItems("EC$"))
                .body("'data'.'countries'[41].'geonamesID'", numberMatches(3576468.0))
                .body("'data'.'countries'[41].'population'", numberMatches(178844.0))
                .body("'data'.'countries'[42].'alpha2Code'", containsString("VC"))
                .body("'data'.'countries'[42].'alpha3Code'", containsString("VCT"))
                .body("'data'.'countries'[42].'capital'.'geonamesID'", numberMatches(3577887.0))
                .body("'data'.'countries'[42].'capital'.'population'", numberMatches(25000.0))
                .body("'data'.'countries'[42].'continent'.'population'", numberMatches(5.79E8))
                .body("'data'.'countries'[42].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[42].'currencies'[0].'name'", containsString("Eastern Caribbean dollar"))
                .body("'data'.'countries'[42].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[42].'currencies'[0].'unitSymbols'", hasItems("EC$"))
                .body("'data'.'countries'[42].'geonamesID'", numberMatches(3577815.0))
                .body("'data'.'countries'[42].'population'", numberMatches(109897.0))
                .body("'data'.'countries'[43].'alpha2Code'", containsString("WS"))
                .body("'data'.'countries'[43].'alpha3Code'", containsString("WSM"))
                .body("'data'.'countries'[43].'capital'.'geonamesID'", numberMatches(4035413.0))
                .body("'data'.'countries'[43].'capital'.'population'", numberMatches(37708.0))
                .body("'data'.'countries'[43].'continent'.'population'", numberMatches(1.2355695E7))
                .body("'data'.'countries'[43].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[43].'currencies'[0].'name'", containsString("Samoan tālā"))
                .body("'data'.'countries'[43].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[43].'currencies'[0].'unitSymbols'", hasItems("WS$"))
                .body("'data'.'countries'[43].'geonamesID'", numberMatches(4034894.0))
                .body("'data'.'countries'[43].'population'", numberMatches(196440.0))
                .body("'data'.'countries'[44].'alpha2Code'", containsString("SM"))
                .body("'data'.'countries'[44].'alpha3Code'", containsString("SMR"))
                .body("'data'.'countries'[44].'capital'", nullValue())
                .body("'data'.'countries'[44].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[44].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[44].'currencies'[0].'name'", containsString("euro"))
                .body("'data'.'countries'[44].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[44].'currencies'[0].'unitSymbols'", hasItems("€"))
                .body("'data'.'countries'[44].'geonamesID'", numberMatches(3168068.0))
                .body("'data'.'countries'[44].'population'", numberMatches(33400.0))
                .body("'data'.'countries'[45].'alpha2Code'", containsString("SA"))
                .body("'data'.'countries'[45].'alpha3Code'", containsString("SAU"))
                .body("'data'.'countries'[45].'capital'.'geonamesID'", numberMatches(108410.0))
                .body("'data'.'countries'[45].'capital'.'population'", numberMatches(8002100.0))
                .body("'data'.'countries'[45].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[45].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[45].'currencies'[0].'name'", containsString("Saudi riyal"))
                .body("'data'.'countries'[45].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[45].'currencies'[0].'unitSymbols'", hasItems("SR"))
                .body("'data'.'countries'[45].'geonamesID'", numberMatches(102358.0))
                .body("'data'.'countries'[45].'population'", numberMatches(3.3E7))
                .body("'data'.'countries'[46].'alpha2Code'", containsString("SN"))
                .body("'data'.'countries'[46].'alpha3Code'", containsString("SEN"))
                .body("'data'.'countries'[46].'capital'.'geonamesID'", numberMatches(2253354.0))
                .body("'data'.'countries'[46].'capital'.'population'", numberMatches(1146053.0))
                .body("'data'.'countries'[46].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[46].'currencies'.size()", equalTo(0))
                .body("'data'.'countries'[46].'geonamesID'", numberMatches(2245662.0))
                .body("'data'.'countries'[46].'population'", numberMatches(1.5850567E7))
                .body("'data'.'countries'[47].'alpha2Code'", containsString("RS"))
                .body("'data'.'countries'[47].'alpha3Code'", containsString("SRB"))
                .body("'data'.'countries'[47].'capital'.'geonamesID'", numberMatches(792680.0))
                .body("'data'.'countries'[47].'capital'.'population'", numberMatches(1378682.0))
                .body("'data'.'countries'[47].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[47].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[47].'currencies'[0].'name'", containsString("Serbian dinar"))
                .body("'data'.'countries'[47].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[47].'currencies'[0].'unitSymbols'", hasItems("din"))
                .body("'data'.'countries'[47].'geonamesID'", numberMatches(6290252.0))
                .body("'data'.'countries'[47].'population'", numberMatches(7022268.0))
                .body("'data'.'countries'[48].'alpha2Code'", containsString("SC"))
                .body("'data'.'countries'[48].'alpha3Code'", containsString("SYC"))
                .body("'data'.'countries'[48].'capital'.'geonamesID'", numberMatches(241131.0))
                .body("'data'.'countries'[48].'capital'.'population'", numberMatches(26450.0))
                .body("'data'.'countries'[48].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[48].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[48].'currencies'[0].'name'", containsString("Seychellois rupee"))
                .body("'data'.'countries'[48].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[48].'currencies'[0].'unitSymbols'", hasItems("SRe"))
                .body("'data'.'countries'[48].'geonamesID'", numberMatches(241170.0))
                .body("'data'.'countries'[48].'population'", numberMatches(95843.0))
                .body("'data'.'countries'[49].'alpha2Code'", containsString("SL"))
                .body("'data'.'countries'[49].'alpha3Code'", containsString("SLE"))
                .body("'data'.'countries'[49].'capital'.'geonamesID'", numberMatches(2409306.0))
                .body("'data'.'countries'[49].'capital'.'population'", numberMatches(951000.0))
                .body("'data'.'countries'[49].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[49].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[49].'currencies'[0].'name'", containsString("Sierra Leonean leone"))
                .body("'data'.'countries'[49].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[49].'currencies'[0].'unitSymbols'", hasItems("Le"))
                .body("'data'.'countries'[49].'geonamesID'", numberMatches(2403846.0))
                .body("'data'.'countries'[49].'population'", numberMatches(7557212.0))
                .body("'data'.'countries'[50].'alpha2Code'", containsString("SG"))
                .body("'data'.'countries'[50].'alpha3Code'", containsString("SGP"))
                .body("'data'.'countries'[50].'capital'.'geonamesID'", numberMatches(1880251.0))
                .body("'data'.'countries'[50].'capital'.'population'", numberMatches(5888926.0))
                .body("'data'.'countries'[50].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[50].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[50].'currencies'[0].'name'", containsString("Singapore dollar"))
                .body("'data'.'countries'[50].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[50].'currencies'[0].'unitSymbols'", hasItems("S$"))
                .body("'data'.'countries'[50].'geonamesID'", numberMatches(1880251.0))
                .body("'data'.'countries'[50].'population'", numberMatches(5888926.0))
                .body("'data'.'countries'[51].'alpha2Code'", containsString("SK"))
                .body("'data'.'countries'[51].'alpha3Code'", containsString("SVK"))
                .body("'data'.'countries'[51].'capital'.'geonamesID'", numberMatches(3060972.0))
                .body("'data'.'countries'[51].'capital'.'population'", numberMatches(429564.0))
                .body("'data'.'countries'[51].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[51].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[51].'currencies'[0].'name'", containsString("euro"))
                .body("'data'.'countries'[51].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[51].'currencies'[0].'unitSymbols'", hasItems("€"))
                .body("'data'.'countries'[51].'geonamesID'", numberMatches(3057568.0))
                .body("'data'.'countries'[51].'population'", numberMatches(5397036.0))
                .body("'data'.'countries'[52].'alpha2Code'", containsString("SI"))
                .body("'data'.'countries'[52].'alpha3Code'", containsString("SVN"))
                .body("'data'.'countries'[52].'capital'.'geonamesID'", numberMatches(3196359.0))
                .body("'data'.'countries'[52].'capital'.'population'", numberMatches(286745.0))
                .body("'data'.'countries'[52].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[52].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[52].'currencies'[0].'name'", containsString("euro"))
                .body("'data'.'countries'[52].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[52].'currencies'[0].'unitSymbols'", hasItems("€"))
                .body("'data'.'countries'[52].'geonamesID'", numberMatches(3190538.0))
                .body("'data'.'countries'[52].'population'", numberMatches(2066880.0))
                .body("'data'.'countries'[53].'alpha2Code'", containsString("SB"))
                .body("'data'.'countries'[53].'alpha3Code'", containsString("SLB"))
                .body("'data'.'countries'[53].'capital'.'geonamesID'", numberMatches(2108502.0))
                .body("'data'.'countries'[53].'capital'.'population'", numberMatches(84520.0))
                .body("'data'.'countries'[53].'continent'.'population'", numberMatches(1.2355695E7))
                .body("'data'.'countries'[53].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[53].'currencies'[0].'name'", containsString("Solomon Islands dollar"))
                .body("'data'.'countries'[53].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[53].'currencies'[0].'unitSymbols'", hasItems("SI$"))
                .body("'data'.'countries'[53].'geonamesID'", numberMatches(2103350.0))
                .body("'data'.'countries'[53].'population'", numberMatches(611343.0))
                .body("'data'.'countries'[54].'alpha2Code'", containsString("SO"))
                .body("'data'.'countries'[54].'alpha3Code'", containsString("SOM"))
                .body("'data'.'countries'[54].'capital'.'geonamesID'", numberMatches(53654.0))
                .body("'data'.'countries'[54].'capital'.'population'", numberMatches(2120000.0))
                .body("'data'.'countries'[54].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[54].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[54].'currencies'[0].'name'", containsString("Somali shilling"))
                .body("'data'.'countries'[54].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[54].'currencies'[0].'unitSymbols'", hasItems("Sh.So."))
                .body("'data'.'countries'[54].'geonamesID'", numberMatches(51537.0))
                .body("'data'.'countries'[54].'population'", numberMatches(1.1031386E7))
                .body("'data'.'countries'[55].'alpha2Code'", containsString("ZA"))
                .body("'data'.'countries'[55].'alpha3Code'", containsString("ZAF"))
                .body("'data'.'countries'[55].'capital'.'geonamesID'", numberMatches(1018725.0))
                .body("'data'.'countries'[55].'capital'.'population'", numberMatches(256185.0))
                .body("'data'.'countries'[55].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[55].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[55].'currencies'[0].'name'", containsString("South African rand"))
                .body("'data'.'countries'[55].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[55].'currencies'[0].'unitSymbols'", hasItems("R"))
                .body("'data'.'countries'[55].'geonamesID'", numberMatches(953987.0))
                .body("'data'.'countries'[55].'population'", numberMatches(5.962235E7))
                .body("'data'.'countries'[56].'alpha2Code'", containsString("KR"))
                .body("'data'.'countries'[56].'alpha3Code'", containsString("KOR"))
                .body("'data'.'countries'[56].'capital'.'geonamesID'", numberMatches(1835848.0))
                .body("'data'.'countries'[56].'capital'.'population'", numberMatches(9668465.0))
                .body("'data'.'countries'[56].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[56].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[56].'currencies'[0].'name'", containsString("South Korean won"))
                .body("'data'.'countries'[56].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[56].'currencies'[0].'unitSymbols'", hasItems("₩"))
                .body("'data'.'countries'[56].'geonamesID'", numberMatches(1835841.0))
                .body("'data'.'countries'[56].'population'", numberMatches(5.1466201E7))
                .body("'data'.'countries'[57].'alpha2Code'", containsString("SS"))
                .body("'data'.'countries'[57].'alpha3Code'", containsString("SSD"))
                .body("'data'.'countries'[57].'capital'.'geonamesID'", numberMatches(373303.0))
                .body("'data'.'countries'[57].'capital'.'population'", numberMatches(372410.0))
                .body("'data'.'countries'[57].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[57].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[57].'currencies'[0].'name'", containsString("South Sudanese pound"))
                .body("'data'.'countries'[57].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[57].'currencies'[0].'unitSymbols'", hasItems("Db"))
                .body("'data'.'countries'[57].'geonamesID'", numberMatches(7909807.0))
                .body("'data'.'countries'[57].'population'", numberMatches(1.2575714E7))
                .body("'data'.'countries'[58].'alpha2Code'", containsString("ES"))
                .body("'data'.'countries'[58].'alpha3Code'", containsString("ESP"))
                .body("'data'.'countries'[58].'capital'.'geonamesID'", numberMatches(6359304.0))
                .body("'data'.'countries'[58].'capital'.'population'", numberMatches(3334730.0))
                .body("'data'.'countries'[58].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[58].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[58].'currencies'[0].'name'", containsString("euro"))
                .body("'data'.'countries'[58].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[58].'currencies'[0].'unitSymbols'", hasItems("€"))
                .body("'data'.'countries'[58].'geonamesID'", numberMatches(2510769.0))
                .body("'data'.'countries'[58].'population'", numberMatches(4.6733038E7))
                .body("'data'.'countries'[59].'alpha2Code'", containsString("LK"))
                .body("'data'.'countries'[59].'alpha3Code'", containsString("LKA"))
                .body("'data'.'countries'[59].'capital'.'geonamesID'", numberMatches(1238992.0))
                .body("'data'.'countries'[59].'capital'.'population'", numberMatches(115826.0))
                .body("'data'.'countries'[59].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[59].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[59].'currencies'[0].'name'", containsString("Sri Lankan rupee"))
                .body("'data'.'countries'[59].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[59].'currencies'[0].'unitSymbols'", hasItems("Rs"))
                .body("'data'.'countries'[59].'geonamesID'", numberMatches(1227603.0))
                .body("'data'.'countries'[59].'population'", numberMatches(2.1444E7))
                .body("'data'.'countries'[60].'alpha2Code'", containsString("SD"))
                .body("'data'.'countries'[60].'alpha3Code'", containsString("SDN"))
                .body("'data'.'countries'[60].'capital'.'geonamesID'", numberMatches(379252.0))
                .body("'data'.'countries'[60].'capital'.'population'", numberMatches(5345000.0))
                .body("'data'.'countries'[60].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[60].'currencies'.size()", equalTo(0))
                .body("'data'.'countries'[60].'geonamesID'", numberMatches(366755.0))
                .body("'data'.'countries'[60].'population'", numberMatches(4.053333E7))
                .body("'data'.'countries'[61].'alpha2Code'", containsString("SR"))
                .body("'data'.'countries'[61].'alpha3Code'", containsString("SUR"))
                .body("'data'.'countries'[61].'capital'.'geonamesID'", numberMatches(3383330.0))
                .body("'data'.'countries'[61].'capital'.'population'", numberMatches(223757.0))
                .body("'data'.'countries'[61].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[61].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[61].'currencies'[0].'name'", containsString("Surinamese dollar"))
                .body("'data'.'countries'[61].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[61].'currencies'[0].'unitSymbols'", hasItems("$"))
                .body("'data'.'countries'[61].'geonamesID'", numberMatches(3382998.0))
                .body("'data'.'countries'[61].'population'", numberMatches(563402.0))
                .body("'data'.'countries'[62].'alpha2Code'", containsString("SE"))
                .body("'data'.'countries'[62].'alpha3Code'", containsString("SWE"))
                .body("'data'.'countries'[62].'capital'.'geonamesID'", numberMatches(2673730.0))
                .body("'data'.'countries'[62].'capital'.'population'", numberMatches(972647.0))
                .body("'data'.'countries'[62].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[62].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[62].'currencies'[0].'name'", containsString("Swedish krona"))
                .body("'data'.'countries'[62].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[62].'currencies'[0].'unitSymbols'", hasItems("kr"))
                .body("'data'.'countries'[62].'geonamesID'", numberMatches(2661886.0))
                .body("'data'.'countries'[62].'population'", numberMatches(1.0409248E7))
                .body("'data'.'countries'[63].'alpha2Code'", containsString("CH"))
                .body("'data'.'countries'[63].'alpha3Code'", containsString("CHE"))
                .body("'data'.'countries'[63].'capital'.'geonamesID'", numberMatches(7285212.0))
                .body("'data'.'countries'[63].'capital'.'population'", numberMatches(133798.0))
                .body("'data'.'countries'[63].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[63].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[63].'currencies'[0].'name'", containsString("Swiss franc"))
                .body("'data'.'countries'[63].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[63].'currencies'[0].'unitSymbols'", hasItems("Fr"))
                .body("'data'.'countries'[63].'geonamesID'", numberMatches(2658434.0))
                .body("'data'.'countries'[63].'population'", numberMatches(8466017.0))
                .body("'data'.'countries'[64].'alpha2Code'", containsString("SY"))
                .body("'data'.'countries'[64].'alpha3Code'", containsString("SYR"))
                .body("'data'.'countries'[64].'capital'.'geonamesID'", numberMatches(170654.0))
                .body("'data'.'countries'[64].'capital'.'population'", numberMatches(2079000.0))
                .body("'data'.'countries'[64].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[64].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[64].'currencies'[0].'name'", containsString("Syrian pound"))
                .body("'data'.'countries'[64].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[64].'currencies'[0].'unitSymbols'", hasItems("LS"))
                .body("'data'.'countries'[64].'geonamesID'", numberMatches(163843.0))
                .body("'data'.'countries'[64].'population'", numberMatches(1.8499181E7))
                .body("'data'.'countries'[65].'alpha2Code'", containsString("ST"))
                .body("'data'.'countries'[65].'alpha3Code'", containsString("STP"))
                .body("'data'.'countries'[65].'capital'.'geonamesID'", numberMatches(2410763.0))
                .body("'data'.'countries'[65].'capital'.'population'", numberMatches(56166.0))
                .body("'data'.'countries'[65].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[65].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[65].'currencies'[0].'name'", containsString("São Tomé and Príncipe dobra"))
                .body("'data'.'countries'[65].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[65].'currencies'[0].'unitSymbols'", hasItems("₡"))
                .body("'data'.'countries'[65].'geonamesID'", numberMatches(2410758.0))
                .body("'data'.'countries'[65].'population'", numberMatches(204327.0))
                .body("'data'.'countries'[66].'alpha2Code'", containsString("TW"))
                .body("'data'.'countries'[66].'alpha3Code'", containsString("TWN"))
                .body("'data'.'countries'[66].'capital'.'geonamesID'", numberMatches(1668341.0))
                .body("'data'.'countries'[66].'capital'.'population'", numberMatches(2684567.0))
                .body("'data'.'countries'[66].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[66].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[66].'currencies'[0].'name'", containsString("New Taiwan dollar"))
                .body("'data'.'countries'[66].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[66].'currencies'[0].'unitSymbols'", hasItems("NT$"))
                .body("'data'.'countries'[66].'geonamesID'", numberMatches(1668284.0))
                .body("'data'.'countries'[66].'population'", numberMatches(2.3593794E7))
                .body("'data'.'countries'[67].'alpha2Code'", containsString("TJ"))
                .body("'data'.'countries'[67].'alpha3Code'", containsString("TJK"))
                .body("'data'.'countries'[67].'capital'.'geonamesID'", numberMatches(1221873.0))
                .body("'data'.'countries'[67].'capital'.'population'", numberMatches(880300.0))
                .body("'data'.'countries'[67].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[67].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[67].'currencies'[0].'name'", containsString("Tajikistani somoni"))
                .body("'data'.'countries'[67].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[67].'currencies'[0].'unitSymbols'", hasItems("SM"))
                .body("'data'.'countries'[67].'geonamesID'", numberMatches(1220409.0))
                .body("'data'.'countries'[67].'population'", numberMatches(8921343.0))
                .body("'data'.'countries'[68].'alpha2Code'", containsString("TZ"))
                .body("'data'.'countries'[68].'alpha3Code'", containsString("TZA"))
                .body("'data'.'countries'[68].'capital'.'geonamesID'", numberMatches(160196.0))
                .body("'data'.'countries'[68].'capital'.'population'", numberMatches(410956.0))
                .body("'data'.'countries'[68].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[68].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[68].'currencies'[0].'name'", containsString("Tanzanian shilling"))
                .body("'data'.'countries'[68].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[68].'currencies'[0].'unitSymbols'", hasItems("TSh"))
                .body("'data'.'countries'[68].'geonamesID'", numberMatches(149590.0))
                .body("'data'.'countries'[68].'population'", numberMatches(5.7310019E7))
                .body("'data'.'countries'[69].'alpha2Code'", containsString("TH"))
                .body("'data'.'countries'[69].'alpha3Code'", containsString("THA"))
                .body("'data'.'countries'[69].'capital'.'geonamesID'", numberMatches(1609348.0))
                .body("'data'.'countries'[69].'capital'.'population'", numberMatches(5696409.0))
                .body("'data'.'countries'[69].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[69].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[69].'currencies'[0].'name'", containsString("baht"))
                .body("'data'.'countries'[69].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[69].'currencies'[0].'unitSymbols'", hasItems("฿"))
                .body("'data'.'countries'[69].'geonamesID'", numberMatches(1605651.0))
                .body("'data'.'countries'[69].'population'", numberMatches(6.593155E7))
                .body("'data'.'countries'[70].'alpha2Code'", containsString("BS"))
                .body("'data'.'countries'[70].'alpha3Code'", containsString("BHS"))
                .body("'data'.'countries'[70].'capital'.'geonamesID'", numberMatches(3571824.0))
                .body("'data'.'countries'[70].'capital'.'population'", numberMatches(274400.0))
                .body("'data'.'countries'[70].'continent'.'population'", numberMatches(5.79E8))
                .body("'data'.'countries'[70].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[70].'currencies'[0].'name'", containsString("Bahamian dollar"))
                .body("'data'.'countries'[70].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[70].'currencies'[0].'unitSymbols'", hasItems("B$"))
                .body("'data'.'countries'[70].'geonamesID'", numberMatches(3572887.0))
                .body("'data'.'countries'[70].'population'", numberMatches(395361.0))
                .body("'data'.'countries'[71].'alpha2Code'", containsString("GM"))
                .body("'data'.'countries'[71].'alpha3Code'", containsString("GMB"))
                .body("'data'.'countries'[71].'capital'.'geonamesID'", numberMatches(2413876.0))
                .body("'data'.'countries'[71].'capital'.'population'", numberMatches(31356.0))
                .body("'data'.'countries'[71].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[71].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[71].'currencies'[0].'name'", containsString("dalasi"))
                .body("'data'.'countries'[71].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[71].'currencies'[0].'unitSymbols'", hasItems("D"))
                .body("'data'.'countries'[71].'geonamesID'", numberMatches(2413451.0))
                .body("'data'.'countries'[71].'population'", numberMatches(2100568.0))
                .body("'data'.'countries'[72].'alpha2Code'", containsString("TG"))
                .body("'data'.'countries'[72].'alpha3Code'", containsString("TGO"))
                .body("'data'.'countries'[72].'capital'.'geonamesID'", numberMatches(2365267.0))
                .body("'data'.'countries'[72].'capital'.'population'", numberMatches(837437.0))
                .body("'data'.'countries'[72].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[72].'currencies'.size()", equalTo(0))
                .body("'data'.'countries'[72].'geonamesID'", numberMatches(2363686.0))
                .body("'data'.'countries'[72].'population'", numberMatches(7797694.0))
                .body("'data'.'countries'[73].'alpha2Code'", containsString("TO"))
                .body("'data'.'countries'[73].'alpha3Code'", containsString("TON"))
                .body("'data'.'countries'[73].'capital'.'geonamesID'", numberMatches(4032402.0))
                .body("'data'.'countries'[73].'capital'.'population'", numberMatches(23221.0))
                .body("'data'.'countries'[73].'continent'.'population'", numberMatches(1.2355695E7))
                .body("'data'.'countries'[73].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[73].'currencies'[0].'name'", containsString("Tongan paʻanga"))
                .body("'data'.'countries'[73].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[73].'currencies'[0].'unitSymbols'", hasItems("T$"))
                .body("'data'.'countries'[73].'geonamesID'", numberMatches(4032283.0))
                .body("'data'.'countries'[73].'population'", numberMatches(108020.0))
                .body("'data'.'countries'[74].'alpha2Code'", containsString("TT"))
                .body("'data'.'countries'[74].'alpha3Code'", containsString("TTO"))
                .body("'data'.'countries'[74].'capital'.'geonamesID'", numberMatches(3573890.0))
                .body("'data'.'countries'[74].'capital'.'population'", numberMatches(37074.0))
                .body("'data'.'countries'[74].'continent'.'population'", numberMatches(5.79E8))
                .body("'data'.'countries'[74].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[74].'currencies'[0].'name'", containsString("Trinidad and Tobago dollar"))
                .body("'data'.'countries'[74].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[74].'currencies'[0].'unitSymbols'", hasItems("TT$"))
                .body("'data'.'countries'[74].'geonamesID'", numberMatches(3573591.0))
                .body("'data'.'countries'[74].'population'", numberMatches(1369125.0))
                .body("'data'.'countries'[75].'alpha2Code'", containsString("TN"))
                .body("'data'.'countries'[75].'alpha3Code'", containsString("TUN"))
                .body("'data'.'countries'[75].'capital'.'geonamesID'", numberMatches(2464470.0))
                .body("'data'.'countries'[75].'capital'.'population'", numberMatches(1056247.0))
                .body("'data'.'countries'[75].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[75].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[75].'currencies'[0].'name'", containsString("Tunisian dinar"))
                .body("'data'.'countries'[75].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[75].'currencies'[0].'unitSymbols'", hasItems("DT"))
                .body("'data'.'countries'[75].'geonamesID'", numberMatches(2464461.0))
                .body("'data'.'countries'[75].'population'", numberMatches(1.1565204E7))
                .body("'data'.'countries'[76].'alpha2Code'", containsString("TR"))
                .body("'data'.'countries'[76].'alpha3Code'", containsString("TUR"))
                .body("'data'.'countries'[76].'capital'.'geonamesID'", numberMatches(323786.0))
                .body("'data'.'countries'[76].'capital'.'population'", numberMatches(5503985.0))
                .body("'data'.'countries'[76].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[76].'currencies'[0].'name'", containsString("Turkish lira"))
                .body("'data'.'countries'[76].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[76].'currencies'[0].'unitSymbols'", hasItems("₺"))
                .body("'data'.'countries'[76].'geonamesID'", numberMatches(298795.0))
                .body("'data'.'countries'[76].'population'", numberMatches(8.3614362E7))
                .body("'data'.'countries'[77].'alpha2Code'", containsString("TM"))
                .body("'data'.'countries'[77].'alpha3Code'", containsString("TKM"))
                .body("'data'.'countries'[77].'capital'.'geonamesID'", numberMatches(162183.0))
                .body("'data'.'countries'[77].'capital'.'population'", numberMatches(1031992.0))
                .body("'data'.'countries'[77].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[77].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[77].'currencies'[0].'name'", containsString("Turkmenistan manat"))
                .body("'data'.'countries'[77].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[77].'currencies'[0].'unitSymbols'", hasItems("T"))
                .body("'data'.'countries'[77].'geonamesID'", numberMatches(1218197.0))
                .body("'data'.'countries'[77].'population'", numberMatches(5850901.0))
                .body("'data'.'countries'[78].'alpha2Code'", containsString("TV"))
                .body("'data'.'countries'[78].'alpha3Code'", containsString("TUV"))
                .body("'data'.'countries'[78].'capital'", nullValue())
                .body("'data'.'countries'[78].'continent'.'population'", numberMatches(1.2355695E7))
                .body("'data'.'countries'[78].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[78].'currencies'[0].'name'", containsString("Australian dollar"))
                .body("'data'.'countries'[78].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[78].'currencies'[0].'unitSymbols'", hasItems("A$"))
                .body("'data'.'countries'[78].'geonamesID'", numberMatches(2110297.0))
                .body("'data'.'countries'[78].'population'", numberMatches(11192.0))
                .body("'data'.'countries'[79].'alpha2Code'", containsString("UG"))
                .body("'data'.'countries'[79].'alpha3Code'", containsString("UGA"))
                .body("'data'.'countries'[79].'capital'.'geonamesID'", numberMatches(232422.0))
                .body("'data'.'countries'[79].'capital'.'population'", numberMatches(1659600.0))
                .body("'data'.'countries'[79].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[79].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[79].'currencies'[0].'name'", containsString("Ugandan shilling"))
                .body("'data'.'countries'[79].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[79].'currencies'[0].'unitSymbols'", hasItems("Ush"))
                .body("'data'.'countries'[79].'geonamesID'", numberMatches(226074.0))
                .body("'data'.'countries'[79].'population'", numberMatches(4.2862958E7))
                .body("'data'.'countries'[80].'alpha2Code'", containsString("UA"))
                .body("'data'.'countries'[80].'alpha3Code'", containsString("UKR"))
                .body("'data'.'countries'[80].'capital'.'geonamesID'", numberMatches(703447.0))
                .body("'data'.'countries'[80].'capital'.'population'", numberMatches(2963199.0))
                .body("'data'.'countries'[80].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[80].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[80].'currencies'[0].'name'", containsString("hryvnia"))
                .body("'data'.'countries'[80].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[80].'currencies'[0].'unitSymbols'", hasItems("₴"))
                .body("'data'.'countries'[80].'geonamesID'", numberMatches(690791.0))
                .body("'data'.'countries'[80].'population'", numberMatches(4.2558328E7))
                .body("'data'.'countries'[81].'alpha2Code'", containsString("AE"))
                .body("'data'.'countries'[81].'alpha3Code'", containsString("ARE"))
                .body("'data'.'countries'[81].'capital'.'geonamesID'", numberMatches(292968.0))
                .body("'data'.'countries'[81].'capital'.'population'", numberMatches(1483000.0))
                .body("'data'.'countries'[81].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[81].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[81].'currencies'[0].'name'", containsString("United Arab Emirates dirham"))
                .body("'data'.'countries'[81].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[81].'currencies'[0].'unitSymbols'", hasItems("DH"))
                .body("'data'.'countries'[81].'geonamesID'", numberMatches(290557.0))
                .body("'data'.'countries'[81].'population'", numberMatches(9890400.0))
                .body("'data'.'countries'[82].'alpha2Code'", containsString("GB"))
                .body("'data'.'countries'[82].'alpha3Code'", containsString("GBR"))
                .body("'data'.'countries'[82].'capital'.'geonamesID'", numberMatches(2643743.0))
                .body("'data'.'countries'[82].'capital'.'population'", numberMatches(8908081.0))
                .body("'data'.'countries'[82].'continent'.'population'", numberMatches(7.47636045E8))
                .body("'data'.'countries'[82].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[82].'currencies'[0].'name'", containsString("pound sterling"))
                .body("'data'.'countries'[82].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[82].'currencies'[0].'unitSymbols'", hasItems("£"))
                .body("'data'.'countries'[82].'geonamesID'", numberMatches(2635167.0))
                .body("'data'.'countries'[82].'population'", numberMatches(6.6022273E7))
                .body("'data'.'countries'[83].'alpha2Code'", containsString("US"))
                .body("'data'.'countries'[83].'alpha3Code'", containsString("USA"))
                .body("'data'.'countries'[83].'capital'.'geonamesID'", numberMatches(4140963.0))
                .body("'data'.'countries'[83].'capital'.'population'", numberMatches(705749.0))
                .body("'data'.'countries'[83].'continent'.'population'", numberMatches(1.2355695E7))
                .body("'data'.'countries'[83].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[83].'currencies'[0].'name'", containsString("United States dollar"))
                .body("'data'.'countries'[83].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[83].'currencies'[0].'unitSymbols'", hasItems("$"))
                .body("'data'.'countries'[83].'geonamesID'", numberMatches(6252001.0))
                .body("'data'.'countries'[83].'population'", numberMatches(3.31449281E8))
                .body("'data'.'countries'[84].'alpha2Code'", containsString("UY"))
                .body("'data'.'countries'[84].'alpha3Code'", containsString("URY"))
                .body("'data'.'countries'[84].'capital'.'geonamesID'", numberMatches(3441575.0))
                .body("'data'.'countries'[84].'capital'.'population'", numberMatches(1319108.0))
                .body("'data'.'countries'[84].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[84].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[84].'currencies'[0].'name'", containsString("Uruguayan peso"))
                .body("'data'.'countries'[84].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[84].'currencies'[0].'unitSymbols'", hasItems("$U"))
                .body("'data'.'countries'[84].'geonamesID'", numberMatches(3439705.0))
                .body("'data'.'countries'[84].'population'", numberMatches(3456750.0))
                .body("'data'.'countries'[85].'alpha2Code'", containsString("UZ"))
                .body("'data'.'countries'[85].'alpha3Code'", containsString("UZB"))
                .body("'data'.'countries'[85].'capital'.'geonamesID'", numberMatches(1484839.0))
                .body("'data'.'countries'[85].'capital'.'population'", numberMatches(2424100.0))
                .body("'data'.'countries'[85].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[85].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[85].'currencies'[0].'name'", containsString("Uzbekistani som"))
                .body("'data'.'countries'[85].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[85].'currencies'[0].'unitSymbols'", hasItems("So'm"))
                .body("'data'.'countries'[85].'geonamesID'", numberMatches(1512440.0))
                .body("'data'.'countries'[85].'population'", numberMatches(3.3570609E7))
                .body("'data'.'countries'[86].'alpha2Code'", containsString("VU"))
                .body("'data'.'countries'[86].'alpha3Code'", containsString("VUT"))
                .body("'data'.'countries'[86].'capital'.'geonamesID'", numberMatches(2135171.0))
                .body("'data'.'countries'[86].'capital'.'population'", numberMatches(51437.0))
                .body("'data'.'countries'[86].'continent'.'population'", numberMatches(1.2355695E7))
                .body("'data'.'countries'[86].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[86].'currencies'[0].'name'", containsString("Vanuatu vatus"))
                .body("'data'.'countries'[86].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[86].'currencies'[0].'unitSymbols'", hasItems("VT"))
                .body("'data'.'countries'[86].'geonamesID'", numberMatches(2134431.0))
                .body("'data'.'countries'[86].'population'", numberMatches(276244.0))
                .body("'data'.'countries'[87].'alpha2Code'", containsString("VE"))
                .body("'data'.'countries'[87].'alpha3Code'", containsString("VEN"))
                .body("'data'.'countries'[87].'capital'.'geonamesID'", numberMatches(3646738.0))
                .body("'data'.'countries'[87].'capital'.'population'", numberMatches(1943901.0))
                .body("'data'.'countries'[87].'continent'.'population'", numberMatches(3.85742554E8))
                .body("'data'.'countries'[87].'currencies'.size()", equalTo(0))
                .body("'data'.'countries'[87].'geonamesID'", numberMatches(3625428.0))
                .body("'data'.'countries'[87].'population'", numberMatches(2.8515829E7))
                .body("'data'.'countries'[88].'alpha2Code'", containsString("VN"))
                .body("'data'.'countries'[88].'alpha3Code'", containsString("VNM"))
                .body("'data'.'countries'[88].'capital'.'geonamesID'", numberMatches(1581130.0))
                .body("'data'.'countries'[88].'capital'.'population'", numberMatches(7785000.0))
                .body("'data'.'countries'[88].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[88].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[88].'currencies'[0].'name'", containsString("Vietnamese dong"))
                .body("'data'.'countries'[88].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[88].'currencies'[0].'unitSymbols'", hasItems("₫"))
                .body("'data'.'countries'[88].'geonamesID'", numberMatches(1562822.0))
                .body("'data'.'countries'[88].'population'", numberMatches(9.466E7))
                .body("'data'.'countries'[89].'alpha2Code'", containsString("YE"))
                .body("'data'.'countries'[89].'alpha3Code'", containsString("YEM"))
                .body("'data'.'countries'[89].'capital'.'geonamesID'", numberMatches(415189.0))
                .body("'data'.'countries'[89].'capital'.'population'", numberMatches(507355.0))
                .body("'data'.'countries'[89].'continent'.'population'", numberMatches(4.164252E9))
                .body("'data'.'countries'[89].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[89].'currencies'[0].'name'", containsString("Yemeni rial"))
                .body("'data'.'countries'[89].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[89].'currencies'[0].'unitSymbols'", hasItems("﷼'"))
                .body("'data'.'countries'[89].'geonamesID'", numberMatches(69543.0))
                .body("'data'.'countries'[89].'population'", numberMatches(2.825042E7))
                .body("'data'.'countries'[90].'alpha2Code'", containsString("ZM"))
                .body("'data'.'countries'[90].'alpha3Code'", containsString("ZMB"))
                .body("'data'.'countries'[90].'capital'.'geonamesID'", numberMatches(909137.0))
                .body("'data'.'countries'[90].'capital'.'population'", numberMatches(1742979.0))
                .body("'data'.'countries'[90].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[90].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[90].'currencies'[0].'name'", containsString("Zambian kwacha"))
                .body("'data'.'countries'[90].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[90].'currencies'[0].'unitSymbols'", hasItems("ZK"))
                .body("'data'.'countries'[90].'geonamesID'", numberMatches(895949.0))
                .body("'data'.'countries'[90].'population'", numberMatches(1.709413E7))
                .body("'data'.'countries'[91].'alpha2Code'", containsString("ZW"))
                .body("'data'.'countries'[91].'alpha3Code'", containsString("ZWE"))
                .body("'data'.'countries'[91].'capital'.'geonamesID'", numberMatches(890298.0))
                .body("'data'.'countries'[91].'capital'.'population'", numberMatches(2150000.0))
                .body("'data'.'countries'[91].'continent'.'population'", numberMatches(1.2E9))
                .body("'data'.'countries'[91].'currencies'.size()", equalTo(1))
                .body("'data'.'countries'[91].'currencies'[0].'name'", containsString("United States dollar"))
                .body("'data'.'countries'[91].'currencies'[0].'unitSymbols'.size()", equalTo(1))
                .body("'data'.'countries'[91].'currencies'[0].'unitSymbols'", hasItems("$"))
                .body("'data'.'countries'[91].'geonamesID'", numberMatches(878675.0))
                .body("'data'.'countries'[91].'population'", numberMatches(1.6529904E7))
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'message'", containsString("Index out of bounds"))
                .body("'errors'[0].'path'.size()", equalTo(3))
                .body("'errors'[0].'path'[0]", containsString("countries"))
                .body("'errors'[0].'path'[1]", numberMatches(18.0))
                .body("'errors'[0].'path'[2]", containsString("continent"))
                .body("'errors'[1].'message'", containsString("Index out of bounds"))
                .body("'errors'[1].'path'.size()", equalTo(3))
                .body("'errors'[1].'path'[0]", containsString("countries"))
                .body("'errors'[1].'path'[1]", numberMatches(76.0))
                .body("'errors'[1].'path'[2]", containsString("continent"));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { random  (cacheBuster : \\\"dl55H_YGU7oAWmX\\\")  {string}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'random'.'string'", containsString("6dAPCzzyDWWmbMt6hHeQrw"));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { continents  (limit : 896,skip : -28620944, where:{})  {countries{capital{id,name},cities{population,timeZone{id,name,offset},timeZoneDST{id,offset}},id,languages{alpha2Code,name},location{lat,long},population},geonamesID,id}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.isEmpty()", is(true))
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("SKIP specified value of invalid type, must be a positive integer"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("continents"));
    }


}
