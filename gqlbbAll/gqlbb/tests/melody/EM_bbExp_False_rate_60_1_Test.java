import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2021-09-24T23:43:31.997+02:00[Europe/Berlin]
 * <br>
 * The generated test suite contains 2 tests
 * <br>
 * Covered targets: 6
 * <br>
 * Used time: 0h 16m 45s
 * <br>
 * Needed budget for current results: 32%
 * <br>
 * 
 */
public class EM_bbExp_False_rate_60_1_Test {

    
    private static String baseUrlOfSut = "https://api.melody.sh/graphql";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { package  (name : \\\"XryqtYpPIXzqD0\\\")  {isMain,versionList{name}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Failed to index package: Set state pending error: OOM command not allowed when used memory > 'maxmemory'."))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("package"))
                .body("'data'.'package'", nullValue());
    }
    
    
    @Test
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { repository  (name : \\\"VfVi\\\")  {releaseList{name,revision},packageList{name,version{dependencyList{name,versionRange}}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Failed to index package: Set state pending error: OOM command not allowed when used memory > 'maxmemory'."))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("repository"))
                .body("'data'.'repository'", nullValue());
    }


}
