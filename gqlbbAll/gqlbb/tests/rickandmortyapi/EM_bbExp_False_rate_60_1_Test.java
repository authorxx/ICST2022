import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2021-09-24T23:43:28.315+02:00[Europe/Berlin]
 * <br>
 * The generated test suite contains 15 tests
 * <br>
 * Covered targets: 33
 * <br>
 * Used time: 0h 16m 41s
 * <br>
 * Needed budget for current results: 82%
 * <br>
 * 
 */
public class EM_bbExp_False_rate_60_1_Test {

    
    private static String baseUrlOfSut = "https://rickandmortyapi.com/graphql";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { characters  (page : 830, filter:{type:\\\"WftFbBgc\\\"})  {results{status,gender,image,episode{id,name,air_date,episode,created}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("404: Not Found"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("characters"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'errors'[0].'extensions'.'response'.'status'", numberMatches(404.0))
                .body("'errors'[0].'extensions'.'response'.'statusText'", containsString("Not Found"))
                .body("'errors'[0].'extensions'.'response'.'body'.'error'", containsString("There is nothing here"))
                .body("'data'.'characters'", nullValue());
    }
    
    
    @Test
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { character  (id : \\\"SaJO\\\")  {status,origin{id,name,type,dimension},image,episode{id,episode}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("500: Internal Server Error"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("character"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'errors'[0].'extensions'.'response'.'status'", numberMatches(500.0))
                .body("'errors'[0].'extensions'.'response'.'statusText'", containsString("Internal Server Error"))
                .body("'errors'[0].'extensions'.'response'.'body'.'error'", containsString("Hey! you must provide an id"))
                .body("'data'.'character'", nullValue());
    }
    
    
    @Test
    public void test_2() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { episode  (id : \\\"yhLJABbmtP03ko\\\")  {id,name,air_date,created}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("500: Internal Server Error"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("episode"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'errors'[0].'extensions'.'response'.'status'", numberMatches(500.0))
                .body("'errors'[0].'extensions'.'response'.'statusText'", containsString("Internal Server Error"))
                .body("'errors'[0].'extensions'.'response'.'body'.'error'", containsString("Hey! you must provide an id"))
                .body("'data'.'episode'", nullValue());
    }
    
    
    @Test
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { location  (id : \\\"z\\\")  {id,type,dimension,created}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("500: Internal Server Error"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("location"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'errors'[0].'extensions'.'response'.'status'", numberMatches(500.0))
                .body("'errors'[0].'extensions'.'response'.'statusText'", containsString("Internal Server Error"))
                .body("'errors'[0].'extensions'.'response'.'body'.'error'", containsString("Hey! you must provide an id"))
                .body("'data'.'location'", nullValue());
    }
    
    
    @Test
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { location  (id : \\\"4\\\")  {id,name,type}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'location'.'name'", containsString("Worldender's lair"))
                .body("'data'.'location'.'type'", containsString("Planet"));
    }
    
    
    @Test
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { episodes  (page : 708, filter:{name:\\\"TWWIJ1jsQxBsQ\\\"})  {info{count,next,prev}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("404: Not Found"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("episodes"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'errors'[0].'extensions'.'response'.'status'", numberMatches(404.0))
                .body("'errors'[0].'extensions'.'response'.'statusText'", containsString("Not Found"))
                .body("'errors'[0].'extensions'.'response'.'body'.'error'", containsString("There is nothing here"))
                .body("'data'.'episodes'", nullValue());
    }
    
    
    @Test
    public void test_6() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { episodesByIds  (ids : [\\\"AY6nj79\\\"])  {id,name,air_date,characters{id,species,type,origin{name},location{id,name,dimension},image}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("500: Internal Server Error"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("episodesByIds"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'errors'[0].'extensions'.'response'.'status'", numberMatches(500.0))
                .body("'errors'[0].'extensions'.'response'.'statusText'", containsString("Internal Server Error"))
                .body("'errors'[0].'extensions'.'response'.'body'.'error'", containsString("Hey! you must provide an id"))
                .body("'data'.'episodesByIds'", nullValue());
    }
    
    
    @Test
    public void test_7() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { episodesByIds  (ids : [])  {id,name,episode,created}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'episodesByIds'.size()", equalTo(1))
                .body("'data'.'episodesByIds'[0].'name'", nullValue())
                .body("'data'.'episodesByIds'[0].'episode'", nullValue())
                .body("'data'.'episodesByIds'[0].'created'", nullValue());
    }
    
    
    @Test
    public void test_8() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { locationsByIds  (ids : [\\\"u\\\", \\\"QQ\\\", \\\"of\\\"])  {dimension,residents{status,species,gender,image,episode{id,episode,created}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("500: Internal Server Error"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("locationsByIds"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'errors'[0].'extensions'.'response'.'status'", numberMatches(500.0))
                .body("'errors'[0].'extensions'.'response'.'statusText'", containsString("Internal Server Error"))
                .body("'errors'[0].'extensions'.'response'.'body'.'error'", containsString("Cast to Number failed for value \"NaN\" at path \"id\" for model \"Location\""))
                .body("'data'.'locationsByIds'", nullValue());
    }
    
    
    @Test
    public void test_9() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { locationsByIds  (ids : [])  {type,dimension,created}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'locationsByIds'.size()", equalTo(1))
                .body("'data'.'locationsByIds'[0].'type'", nullValue())
                .body("'data'.'locationsByIds'[0].'dimension'", nullValue())
                .body("'data'.'locationsByIds'[0].'created'", nullValue());
    }
    
    
    @Test
    public void test_10() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { locations  (page : 552, filter:{type:\\\"QaPjcNBnzn\\\", dimension:\\\"MCV0gmQE\\\"})  {info{count,prev}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("404: Not Found"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("locations"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'errors'[0].'extensions'.'response'.'status'", numberMatches(404.0))
                .body("'errors'[0].'extensions'.'response'.'statusText'", containsString("Not Found"))
                .body("'errors'[0].'extensions'.'response'.'body'.'error'", containsString("There is nothing here"))
                .body("'data'.'locations'", nullValue());
    }
    
    
    @Test
    public void test_11() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { charactersByIds  (ids : [\\\"C\\\", \\\"\\\", \\\"yaFb\\\"])  {id,gender,origin{id,name,created},image,episode{id},created}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("500: Internal Server Error"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("charactersByIds"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'errors'[0].'extensions'.'response'.'status'", numberMatches(500.0))
                .body("'errors'[0].'extensions'.'response'.'statusText'", containsString("Internal Server Error"))
                .body("'errors'[0].'extensions'.'response'.'body'.'error'", containsString("Cast to Number failed for value \"NaN\" at path \"id\" for model \"Character\""))
                .body("'data'.'charactersByIds'", nullValue());
    }
    
    
    @Test
    public void test_12() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { episode  (id : \\\"\\\")  {air_date,created}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'episode'.'air_date'", nullValue())
                .body("'data'.'episode'.'created'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { episode  (id : \\\"nyvVAJ3fyK\\\")  {name,air_date}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("500: Internal Server Error"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("episode"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'errors'[0].'extensions'.'response'.'status'", numberMatches(500.0))
                .body("'errors'[0].'extensions'.'response'.'statusText'", containsString("Internal Server Error"))
                .body("'errors'[0].'extensions'.'response'.'body'.'error'", containsString("Hey! you must provide an id"))
                .body("'data'.'episode'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { locationsByIds  (ids : [\\\"7u\\\", \\\"\\\", \\\"h\\\"])  {id,dimension}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("500: Internal Server Error"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("locationsByIds"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'errors'[0].'extensions'.'response'.'status'", numberMatches(500.0))
                .body("'errors'[0].'extensions'.'response'.'statusText'", containsString("Internal Server Error"))
                .body("'errors'[0].'extensions'.'response'.'body'.'error'", containsString("Cast to Number failed for value \"NaN\" at path \"id\" for model \"Location\""))
                .body("'data'.'locationsByIds'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { characters  (page : 413, filter:{name:\\\"0bXjtw3m_QS1\\\", species:\\\"nYEofGtqbMuTobZ\\\"})  {info{prev}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("404: Not Found"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("characters"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'errors'[0].'extensions'.'response'.'status'", numberMatches(404.0))
                .body("'errors'[0].'extensions'.'response'.'statusText'", containsString("Not Found"))
                .body("'errors'[0].'extensions'.'response'.'body'.'error'", containsString("There is nothing here"))
                .body("'data'.'characters'", nullValue());
    }
    
    
    @Test
    public void test_13() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { episodesByIds  (ids : [\\\"\\\", \\\"6L\\\", \\\"\\\"])  {id,episode}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("500: Internal Server Error"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("episodesByIds"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'errors'[0].'extensions'.'response'.'status'", numberMatches(500.0))
                .body("'errors'[0].'extensions'.'response'.'statusText'", containsString("Internal Server Error"))
                .body("'errors'[0].'extensions'.'response'.'body'.'error'", containsString("Cast to Number failed for value \"NaN\" at path \"id\" for model \"Episode\""))
                .body("'data'.'episodesByIds'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { charactersByIds  (ids : [])  {type,image}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'charactersByIds'.size()", equalTo(1))
                .body("'data'.'charactersByIds'[0].'type'", nullValue())
                .body("'data'.'charactersByIds'[0].'image'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { locationsByIds  (ids : [\\\"koji3Yx6p8oqO\\\"])  {id,type,created}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("500: Internal Server Error"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("locationsByIds"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'errors'[0].'extensions'.'response'.'status'", numberMatches(500.0))
                .body("'errors'[0].'extensions'.'response'.'statusText'", containsString("Internal Server Error"))
                .body("'errors'[0].'extensions'.'response'.'body'.'error'", containsString("Hey! you must provide an id"))
                .body("'data'.'locationsByIds'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { charactersByIds  (ids : [\\\"eKNlpSs0ljB\\\"])  {id,name,status,gender,origin{id,name,type,dimension},episode{id,name}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("500: Internal Server Error"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("charactersByIds"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'errors'[0].'extensions'.'response'.'status'", numberMatches(500.0))
                .body("'errors'[0].'extensions'.'response'.'statusText'", containsString("Internal Server Error"))
                .body("'errors'[0].'extensions'.'response'.'body'.'error'", containsString("Hey! you must provide an id"))
                .body("'data'.'charactersByIds'", nullValue());
    }
    
    
    @Test
    public void test_14() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { charactersByIds  (ids : [\\\"\\\"])  {id,gender,image,episode{id,name,created}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Cannot read property 'match' of undefined"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(53.0))
                .body("'errors'[0].'path'.size()", equalTo(3))
                .body("'errors'[0].'path'[0]", containsString("charactersByIds"))
                .body("'errors'[0].'path'[1]", numberMatches(0.0))
                .body("'errors'[0].'path'[2]", containsString("episode"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'data'.'charactersByIds'.size()", equalTo(1))
                .body("'data'.'charactersByIds'[0]", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { locations  (page : 97, filter:{name:\\\"_8dcLm\\\", type:\\\"MczJCa2v\\\", dimension:\\\"ewsxtGxoYg9kB6W0\\\"})  {info{count,next}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("404: Not Found"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("locations"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'errors'[0].'extensions'.'response'.'status'", numberMatches(404.0))
                .body("'errors'[0].'extensions'.'response'.'statusText'", containsString("Not Found"))
                .body("'errors'[0].'extensions'.'response'.'body'.'error'", containsString("There is nothing here"))
                .body("'data'.'locations'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { locations  (page : 445, filter:{})  {info{pages,next,prev},results{id,name,type,dimension,residents{name,type,image,episode{name,episode,created}},created}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("404: Not Found"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("locations"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'errors'[0].'extensions'.'response'.'status'", numberMatches(404.0))
                .body("'errors'[0].'extensions'.'response'.'statusText'", containsString("Not Found"))
                .body("'errors'[0].'extensions'.'response'.'body'.'error'", containsString("There is nothing here"))
                .body("'data'.'locations'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { episodesByIds  (ids : [])  {episode,characters{id,name,status,species,type,origin{dimension},location{id,type,dimension}},created}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Cannot read property 'match' of undefined"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(41.0))
                .body("'errors'[0].'path'.size()", equalTo(3))
                .body("'errors'[0].'path'[0]", containsString("episodesByIds"))
                .body("'errors'[0].'path'[1]", numberMatches(0.0))
                .body("'errors'[0].'path'[2]", containsString("characters"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'data'.'episodesByIds'.size()", equalTo(1))
                .body("'data'.'episodesByIds'[0]", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { location  (id : \\\"uH\\\")  {id,type,dimension,created}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("500: Internal Server Error"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("location"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'errors'[0].'extensions'.'response'.'status'", numberMatches(500.0))
                .body("'errors'[0].'extensions'.'response'.'statusText'", containsString("Internal Server Error"))
                .body("'errors'[0].'extensions'.'response'.'body'.'error'", containsString("Hey! you must provide an id"))
                .body("'data'.'location'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { character  (id : \\\"3\\\")  {id,type,gender}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'character'.'type'", containsString(""))
                .body("'data'.'character'.'gender'", containsString("Female"));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { episodes  (page : 729, filter:{name:\\\"ADRfJtSa8srxG1q\\\", episode:\\\"Uy3\\\"})  {info{next,prev}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("404: Not Found"))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("episodes"))
                .body("'errors'[0].'extensions'.'code'", containsString("INTERNAL_SERVER_ERROR"))
                .body("'errors'[0].'extensions'.'response'.'status'", numberMatches(404.0))
                .body("'errors'[0].'extensions'.'response'.'statusText'", containsString("Not Found"))
                .body("'errors'[0].'extensions'.'response'.'body'.'error'", containsString("There is nothing here"))
                .body("'data'.'episodes'", nullValue());
    }


}
