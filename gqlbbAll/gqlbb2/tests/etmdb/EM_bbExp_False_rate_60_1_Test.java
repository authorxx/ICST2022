import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2021-09-29T18:30:25.340+02:00[Europe/Berlin]
 * <br>
 * The generated test suite contains 28 tests
 * <br>
 * Covered targets: 76
 * <br>
 * Used time: 0h 17m 30s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * 
 */
public class EM_bbExp_False_rate_60_1_Test {

    
    private static String baseUrlOfSut = "https://etmdb.com/graphql";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allCompanies  (before : \\\"kGZT4g1JxvBINik\\\",after : \\\"E9J6\\\",first : 109,last : 484,companyName : \\\"ksroJnpVpgEqCAeW\\\",establishedIn : \\\"uHcV5h\\\")  {pageInfo{hasNextPage}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Requesting 109 records on the `allCompanies` connection exceeds the `first` limit of 100 records."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'data'.'allCompanies'", nullValue());
    }
    
    
    @Test
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { role  (id : \\\"QG011Av9a1XkK\\\")  {createdDate,updatedDate,roleDescription}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'role'", nullValue());
    }
    
    
    @Test
    public void test_2() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allNewsTags  (before : \\\"0Fw\\\",after : \\\"1dTj0EgzoSVJjsp\\\",first : 424,last : 784)  {pageInfo{hasNextPage,startCursor,endCursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'allNewsTags'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Requesting 424 records on the `allNewsTags` connection exceeds the `first` limit of 100 records."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0));
    }
    
    
    @Test
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { cinemaDetail  (id : \\\"iiBbA_a\\\")  {id,updatedDate,slug,hallName}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'cinemaDetail'", nullValue());
    }
    
    
    @Test
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { genreType  (id : \\\"5\\\")  {id,createdDate,updatedDate,slug,summary}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'genreType'", nullValue());
    }
    
    
    @Test
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allCinemaSchedules  (before : \\\"qU1R\\\",after : \\\"yLFJClhNX2\\\",first : 428,last : 341)  {pageInfo{hasNextPage,hasPreviousPage,endCursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Requesting 428 records on the `allCinemaSchedules` connection exceeds the `first` limit of 100 records."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'data'.'allCinemaSchedules'", nullValue());
    }
    
    
    @Test
    public void test_6() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { newsTag  (id : \\\"fHyQuYzfnwjkvIU\\\")  {createdDate,slug,contentTag{id,createdDate,updatedDate,slug,newstagSet{pageInfo{hasNextPage,hasPreviousPage,startCursor},edges{cursor}},jobtagSet{pageInfo{hasNextPage,startCursor,endCursor},edges{cursor}}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'newsTag'", nullValue());
    }
    
    
    @Test
    public void test_7() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allContentTags  (before : \\\"D\\\",after : \\\"FqSBKLljcDN\\\",first : 363,last : 972)  {pageInfo{hasNextPage,endCursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Requesting 363 records on the `allContentTags` connection exceeds the `first` limit of 100 records."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'data'.'allContentTags'", nullValue());
    }
    
    
    @Test
    public void test_8() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allNews  (before : \\\"hfNaRrj\\\",after : \\\"qqh9lEdOj\\\",first : 917,last : 759)  {pageInfo{hasNextPage}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Requesting 917 records on the `allNews` connection exceeds the `first` limit of 100 records."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'data'.'allNews'", nullValue());
    }
    
    
    @Test
    public void test_9() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allCinemaDetails  (before : \\\"c_\\\",after : \\\"mCzsI1NuDuSImob\\\",first : 366,last : 8)  {pageInfo{hasNextPage,hasPreviousPage}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'message'", containsString("Requesting 366 records on the `allCinemaDetails` connection exceeds the `first` limit of 100 records."))
                .body("'data'.'allCinemaDetails'", nullValue());
    }
    
    
    @Test
    public void test_10() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { company  (id : \\\"ccHLG6huBR3PuOs\\\")  {createdDate,description,closesAt,companyPosterImage}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'company'", nullValue());
    }
    
    
    @Test
    public void test_11() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { jobsTag  (id : \\\"Si\\\")  {updatedDate,jobBoard{id,slug,location,productionType,duration,closingDate}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'jobsTag'", nullValue());
    }
    
    
    @Test
    public void test_12() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { cinemaSchedule  (id : \\\"NDbCsPv\\\")  {id,showEndDate}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'cinemaSchedule'", nullValue());
    }
    
    
    @Test
    public void test_13() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allGenreTypes  (before : \\\"\\\",after : \\\"oDnsuT8T_GiIZ\\\",first : 323,last : 761)  {pageInfo{hasPreviousPage,startCursor,endCursor},edges{node{createdDate,summary}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'message'", containsString("Requesting 323 records on the `allGenreTypes` connection exceeds the `first` limit of 100 records."))
                .body("'data'.'allGenreTypes'", nullValue());
    }
    
    
    @Test
    public void test_14() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allShowtimes  (before : \\\"3gIcZLzDWcUGmWBc\\\",after : \\\"LMx3VQf\\\",first : 407,last : 452)  {pageInfo{hasNextPage,hasPreviousPage,endCursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'message'", containsString("Requesting 407 records on the `allShowtimes` connection exceeds the `first` limit of 100 records."))
                .body("'data'.'allShowtimes'", nullValue());
    }
    
    
    @Test
    public void test_15() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allContentTags  (before : \\\"iot\\\",after : \\\"HomOv\\\",first : 861,last : 444)  {pageInfo{hasPreviousPage,startCursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'message'", containsString("Requesting 861 records on the `allContentTags` connection exceeds the `first` limit of 100 records."))
                .body("'data'.'allContentTags'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allJobs  (before : \\\"LS_aYOWieD4xdXd\\\",after : \\\"O7\\\",first : 427,last : 73,genderMf : \\\"Qwa2YK5ZM\\\",jobTitle : \\\"y6LsjdQS\\\",jobTitle_Icontains : \\\"uYw76whDW\\\",jobTitle_Istartswith : \\\"dG6UOqUmGet\\\",company : \\\"LpoA74VwPM\\\",company_Icontains : \\\"nWFgVmppiOo\\\",company_Istartswith : \\\"6WFd5fw2lgDxbkh\\\")  {pageInfo{startCursor,endCursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'message'", containsString("Requesting 427 records on the `allJobs` connection exceeds the `first` limit of 100 records."))
                .body("'data'.'allJobs'", nullValue());
    }
    
    
    @Test
    public void test_16() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allCinemaDetails  (before : \\\"ZZKFzi_i8OJkJf\\\",after : \\\"8\\\",first : 382,last : 347)  {edges{node{id,createdDate,updatedDate,numberOfSeats,technology},cursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'allCinemaDetails'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'message'", containsString("Requesting 382 records on the `allCinemaDetails` connection exceeds the `first` limit of 100 records."));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { contentTag  (id : \\\"OUxGndJiBfsJ150B\\\")  {id,createdDate,updatedDate,slug,keyword,summary,newstagSet{pageInfo{hasNextPage,startCursor,endCursor}},jobtagSet{pageInfo{hasNextPage,startCursor,endCursor}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'contentTag'", nullValue());
    }
    
    
    @Test
    public void test_17() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allNews  (before : \\\"248e26k6Jtb0W\\\",after : \\\"Of_XL2S85tO\\\",first : 638,last : 228)  {pageInfo{hasNextPage,startCursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Requesting 638 records on the `allNews` connection exceeds the `first` limit of 100 records."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'data'.'allNews'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { job  (id : \\\"QdDxne9K\\\")  {id,updatedDate,slug,location,productionDate,closingDate,description,genderMf,ageLevel,company{id,createdDate,updatedDate,slug,companyName,establishedIn,description,closesAt,companyPosterImage,jobboardSet{pageInfo{endCursor}}},jobtagSet{pageInfo{hasPreviousPage}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'job'", nullValue());
    }
    
    
    @Test
    public void test_18() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allNewsTags  (before : \\\"gSmv_SGit7P\\\",after : \\\"k8\\\",first : 484,last : 452)  {pageInfo{hasPreviousPage},edges{node{createdDate,slug,contentTag{id,slug,keyword,jobtagSet{pageInfo{hasPreviousPage,startCursor},edges{cursor}}}}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'message'", containsString("Requesting 484 records on the `allNewsTags` connection exceeds the `first` limit of 100 records."))
                .body("'data'.'allNewsTags'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allJobTags  (before : \\\"E4JrNUhD0Vj\\\",after : \\\"3qAtbQ4gPxx422D\\\",first : 91,last : 554)  {pageInfo{hasNextPage,hasPreviousPage,endCursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'message'", containsString("Requesting 91 records on the `allJobTags` connection exceeds the `last` limit of 100 records."))
                .body("'data'.'allJobTags'", nullValue());
    }
    
    
    @Test
    public void test_19() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allCinemaDetails  (before : \\\"LJzn2F\\\",after : \\\"zxZsm2wqxWEI72D\\\",first : 879,last : 43)  {pageInfo{hasNextPage,hasPreviousPage,endCursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'message'", containsString("Requesting 879 records on the `allCinemaDetails` connection exceeds the `first` limit of 100 records."))
                .body("'data'.'allCinemaDetails'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allRoles  (before : \\\"qJ_sCrQXpxJFOs\\\",after : \\\"VuuMfXfF\\\",first : 12,last : 2005896809)  {pageInfo{hasNextPage,startCursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'message'", containsString("Requesting 12 records on the `allRoles` connection exceeds the `last` limit of 100 records."))
                .body("'data'.'allRoles'", nullValue());
    }
    
    
    @Test
    public void test_20() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { newsTag  (id : \\\"J9W7\\\")  {createdDate,updatedDate,contentTag{id,createdDate,updatedDate,slug,keyword,newstagSet{pageInfo{hasNextPage}},jobtagSet{pageInfo{hasNextPage,hasPreviousPage,startCursor}}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'newsTag'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { showtime  (id : \\\"Nq\\\")  {createdDate,updatedDate,showtime,dayOfWeek}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'showtime'", nullValue());
    }
    
    
    @Test
    public void test_21() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allFilmographyTypes  (before : \\\"T\\\",after : \\\"hPR\\\",first : 24,last : 694)  {edges{cursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'allFilmographyTypes'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'message'", containsString("Requesting 24 records on the `allFilmographyTypes` connection exceeds the `last` limit of 100 records."));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allCinemaDetails  (before : \\\"b4bUmQSWua\\\",after : \\\"YprasML6SOxRJ\\\",first : 163,last : 297)  {pageInfo{hasNextPage,hasPreviousPage}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'allCinemaDetails'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'message'", containsString("Requesting 163 records on the `allCinemaDetails` connection exceeds the `first` limit of 100 records."));
    }
    
    
    @Test
    public void test_22() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { filmographyType  (id : \\\"x8YpOAFnRXrc\\\")  {createdDate,updatedDate,filmographyDescription}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'filmographyType'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allNewsTags  (before : \\\"Jc\\\",after : \\\"1AobTP5iNkN9nJYo\\\",first : 948,last : 942)  {edges{node{id,slug}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'allNewsTags'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'message'", containsString("Requesting 948 records on the `allNewsTags` connection exceeds the `first` limit of 100 records."));
    }
    
    
    @Test
    public void test_23() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { company  (id : \\\"SU\\\")  {updatedDate,slug,companyPosterImage}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'company'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allFilmographyTypes  (before : \\\"ZbzThnT\\\",after : \\\"Dy0eqEJuEsZeDb\\\",first : 161,last : 353)  {pageInfo{hasNextPage,hasPreviousPage,startCursor},edges{cursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'allFilmographyTypes'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Requesting 161 records on the `allFilmographyTypes` connection exceeds the `first` limit of 100 records."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allNewsTags  (before : \\\"TUCBbhTLnd_OE0\\\",after : \\\"xML1U3xDUo\\\",first : 53,last : -2112770442)  {edges{node{updatedDate,news{id,createdDate,updatedDate,title,content,newsImage}}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'allNewsTags'.'edges'.size()", equalTo(0));
    }
    
    
    @Test
    public void test_24() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { jobsTag  (id : \\\"qkst2q08fnOCw_7R\\\")  {createdDate,updatedDate,slug,jobBoard{updatedDate,location,duration,productionDate,closingDate,salary,jobtagSet{edges{cursor}}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'jobsTag'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allJobTags  (before : \\\"0Dkf3kcF23by0l\\\",after : \\\"VbyNBXr7VMERZ\\\",first : 425,last : 422)  {edges{cursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'allJobTags'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Requesting 425 records on the `allJobTags` connection exceeds the `first` limit of 100 records."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { news  (id : \\\"V\\\")  {createdDate,slug,title,content,newstagSet{pageInfo{hasNextPage,startCursor}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'news'", nullValue());
    }
    
    
    @Test
    public void test_25() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { genreType  (id : \\\"HuNtmnoFk\\\")  {id,createdDate,updatedDate,slug}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'genreType'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { genreType  (id : \\\"4pWLz\\\")  {updatedDate,genreDescription,summary}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'genreType'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allNews  (before : \\\"LK6YO\\\",after : \\\"_jxQRJS\\\",first : -873447283,last : 322)  {pageInfo{endCursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Requesting -873447283 records on the `allNews` connection exceeds the `last` limit of 100 records."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'data'.'allNews'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { job  (id : \\\"BQYMhp\\\")  {id,createdDate,updatedDate,location,description,salary,genderMf,company{id,createdDate,updatedDate,establishedIn,jobboardSet{pageInfo{hasNextPage,startCursor,endCursor},edges{cursor}}},jobtagSet{pageInfo{hasPreviousPage},edges{node{id,createdDate,contentTag{id,createdDate,updatedDate,keyword,newstagSet{edges{cursor}}}}}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'job'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allShowtimes  (before : \\\"0ewb\\\",after : \\\"uczOFtmzmMR\\\",first : 788,last : 112)  {pageInfo{hasNextPage,hasPreviousPage}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Requesting 788 records on the `allShowtimes` connection exceeds the `first` limit of 100 records."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'data'.'allShowtimes'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allJobTags  (before : \\\"YEJNfugtWX5tVJ\\\",after : \\\"YXG2Gq2rzBe\\\",first : 442,last : 380)  {pageInfo{hasNextPage,endCursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Requesting 442 records on the `allJobTags` connection exceeds the `first` limit of 100 records."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'data'.'allJobTags'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allCinemaDetails  (before : \\\"eB2IhCyTAIFYLq\\\",after : \\\"25FWz\\\",first : 69,last : 72)  {edges{cursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'allCinemaDetails'.'edges'.size()", equalTo(17))
                .body("'data'.'allCinemaDetails'.'edges'[0].'cursor'", containsString("YXJyYXljb25uZWN0aW9uOjA="))
                .body("'data'.'allCinemaDetails'.'edges'[1].'cursor'", containsString("YXJyYXljb25uZWN0aW9uOjE="))
                .body("'data'.'allCinemaDetails'.'edges'[2].'cursor'", containsString("YXJyYXljb25uZWN0aW9uOjI="))
                .body("'data'.'allCinemaDetails'.'edges'[3].'cursor'", containsString("YXJyYXljb25uZWN0aW9uOjM="))
                .body("'data'.'allCinemaDetails'.'edges'[4].'cursor'", containsString("YXJyYXljb25uZWN0aW9uOjQ="))
                .body("'data'.'allCinemaDetails'.'edges'[5].'cursor'", containsString("YXJyYXljb25uZWN0aW9uOjU="))
                .body("'data'.'allCinemaDetails'.'edges'[6].'cursor'", containsString("YXJyYXljb25uZWN0aW9uOjY="))
                .body("'data'.'allCinemaDetails'.'edges'[7].'cursor'", containsString("YXJyYXljb25uZWN0aW9uOjc="))
                .body("'data'.'allCinemaDetails'.'edges'[8].'cursor'", containsString("YXJyYXljb25uZWN0aW9uOjg="))
                .body("'data'.'allCinemaDetails'.'edges'[9].'cursor'", containsString("YXJyYXljb25uZWN0aW9uOjk="))
                .body("'data'.'allCinemaDetails'.'edges'[10].'cursor'", containsString("YXJyYXljb25uZWN0aW9uOjEw"))
                .body("'data'.'allCinemaDetails'.'edges'[11].'cursor'", containsString("YXJyYXljb25uZWN0aW9uOjEx"))
                .body("'data'.'allCinemaDetails'.'edges'[12].'cursor'", containsString("YXJyYXljb25uZWN0aW9uOjEy"))
                .body("'data'.'allCinemaDetails'.'edges'[13].'cursor'", containsString("YXJyYXljb25uZWN0aW9uOjEz"))
                .body("'data'.'allCinemaDetails'.'edges'[14].'cursor'", containsString("YXJyYXljb25uZWN0aW9uOjE0"))
                .body("'data'.'allCinemaDetails'.'edges'[15].'cursor'", containsString("YXJyYXljb25uZWN0aW9uOjE1"))
                .body("'data'.'allCinemaDetails'.'edges'[16].'cursor'", containsString("YXJyYXljb25uZWN0aW9uOjE2"));
    }
    
    
    @Test
    public void test_26() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { filmographyType  (id : \\\"S002nVbE7K34\\\")  {id,createdDate,summary}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'filmographyType'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allFilmographyTypes  (before : \\\"hldHzn3yqOKT\\\",after : \\\"AXJJ95\\\",first : 100,last : 16)  {pageInfo{hasPreviousPage,startCursor,endCursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'allFilmographyTypes'.'pageInfo'.'hasPreviousPage'", equalTo(true))
                .body("'data'.'allFilmographyTypes'.'pageInfo'.'startCursor'", containsString("YXJyYXljb25uZWN0aW9uOjE3"))
                .body("'data'.'allFilmographyTypes'.'pageInfo'.'endCursor'", containsString("YXJyYXljb25uZWN0aW9uOjMy"));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allNews  (before : \\\"kGJ4wUPpybWv\\\",after : \\\"Cb8PogH\\\",first : 460,last : 495)  {pageInfo{hasNextPage,endCursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'allNews'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Requesting 460 records on the `allNews` connection exceeds the `first` limit of 100 records."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { cinemaSchedule  (id : \\\"mhtoBjGLBuszS\\\")  {slug,showStartDate,showEndDate,movie{createdDate,slug,releaseDate,flagSeries,flagIncinema,plot,posterImage,cinemascheduleSet{edges{cursor}}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'cinemaSchedule'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allContentTags  (before : \\\"yPZ1xUR_dqwpJ\\\",after : \\\"nzL\\\",first : 285,last : 193)  {edges{node{id,createdDate,slug,keyword,newstagSet{pageInfo{hasNextPage,startCursor,endCursor},edges{cursor}},jobtagSet{edges{node{id,createdDate,jobBoard{id,jobTitle,location,productionType,duration,productionDate,closingDate,salary,genderMf}},cursor}}}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'allContentTags'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Requesting 285 records on the `allContentTags` connection exceeds the `first` limit of 100 records."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { jobsTag  (id : \\\"MCQW\\\")  {createdDate,slug,jobBoard{id,duration,productionDate,description},contentTag{createdDate,updatedDate,keyword,summary}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'jobsTag'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allCompanies  (before : \\\"X\\\",after : \\\"S3BrL6\\\",first : 90,last : 693512892,companyName : \\\"\\\",establishedIn : \\\"iPRiA9r07gBVT\\\")  {pageInfo{hasNextPage,hasPreviousPage,endCursor},edges{node{createdDate,closesAt},cursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'allCompanies'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Requesting 90 records on the `allCompanies` connection exceeds the `last` limit of 100 records."))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0));
    }
    
    
    @Test
    public void test_27() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { newsTag  (id : \\\"qK\\\")  {id,updatedDate,slug,news{createdDate,updatedDate,title,content,newsImage,newstagSet{edges{cursor}}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'newsTag'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { jobsTag  (id : \\\"hTB3y6mDMEh3\\\")  {id,createdDate,slug,jobBoard{createdDate,slug,jobTitle,location,description,salary,genderMf,ageLevel,company{id,updatedDate,description,companyPosterImage,jobboardSet{pageInfo{hasNextPage,hasPreviousPage,startCursor}}},jobtagSet{pageInfo{hasPreviousPage,endCursor}}},contentTag{id,updatedDate,summary,jobtagSet{pageInfo{hasNextPage,startCursor}}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'jobsTag'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allShowtimes  (before : \\\"__KKb1o6jEIDMUys\\\",after : \\\"NkmxDv5r\\\",first : 977,last : 642)  {edges{node{id,createdDate,updatedDate}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'allShowtimes'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'message'", containsString("Requesting 977 records on the `allShowtimes` connection exceeds the `first` limit of 100 records."));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { showtime  (id : \\\"I2qwIVVAj\\\")  {id,createdDate,showtime}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'showtime'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allNewsTags  (before : \\\"g6vwCaSt8jCU\\\",after : \\\"DnbF1ptUKreP75e\\\",first : 335,last : 600)  {pageInfo{hasPreviousPage}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'allNewsTags'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'message'", containsString("Requesting 335 records on the `allNewsTags` connection exceeds the `first` limit of 100 records."));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { contentTag  (id : \\\"CS\\\")  {id,updatedDate,jobtagSet{pageInfo{startCursor,endCursor}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'contentTag'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allCinemaSchedules  (before : \\\"yehx0wM\\\",after : \\\"jwVm6KQj\\\",first : 621,last : 588)  {edges{cursor}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'allCinemaSchedules'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'locations'.size()", equalTo(1))
                .body("'errors'[0].'locations'[0].'line'", numberMatches(1.0))
                .body("'errors'[0].'locations'[0].'column'", numberMatches(5.0))
                .body("'errors'[0].'message'", containsString("Requesting 621 records on the `allCinemaSchedules` connection exceeds the `first` limit of 100 records."));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { allShowtimes  (before : \\\"JKXpBw4orBcO\\\",after : \\\"wfBipbU\\\",first : 4,last : 51)  {edges{node{createdDate,updatedDate,showtime,dayOfWeek}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'allShowtimes'.'edges'.size()", equalTo(4))
                .body("'data'.'allShowtimes'.'edges'[0].'node'.'createdDate'", containsString("2017-05-21T04:14:07.335390+00:00"))
                .body("'data'.'allShowtimes'.'edges'[0].'node'.'updatedDate'", containsString("2017-05-21T04:14:07.335417+00:00"))
                .body("'data'.'allShowtimes'.'edges'[0].'node'.'showtime'", containsString("16:30:00"))
                .body("'data'.'allShowtimes'.'edges'[0].'node'.'dayOfWeek'", containsString("A_5"))
                .body("'data'.'allShowtimes'.'edges'[1].'node'.'createdDate'", containsString("2017-05-21T04:13:11.257043+00:00"))
                .body("'data'.'allShowtimes'.'edges'[1].'node'.'updatedDate'", containsString("2017-05-21T04:13:11.257058+00:00"))
                .body("'data'.'allShowtimes'.'edges'[1].'node'.'showtime'", containsString("18:45:00"))
                .body("'data'.'allShowtimes'.'edges'[1].'node'.'dayOfWeek'", containsString("A_5"))
                .body("'data'.'allShowtimes'.'edges'[2].'node'.'createdDate'", containsString("2017-05-21T04:14:36.440541+00:00"))
                .body("'data'.'allShowtimes'.'edges'[2].'node'.'updatedDate'", containsString("2017-05-21T04:14:36.440556+00:00"))
                .body("'data'.'allShowtimes'.'edges'[2].'node'.'showtime'", containsString("21:15:00"))
                .body("'data'.'allShowtimes'.'edges'[2].'node'.'dayOfWeek'", containsString("A_5"))
                .body("'data'.'allShowtimes'.'edges'[3].'node'.'createdDate'", containsString("2017-05-21T09:53:40.175931+00:00"))
                .body("'data'.'allShowtimes'.'edges'[3].'node'.'updatedDate'", containsString("2017-05-21T09:53:40.175947+00:00"))
                .body("'data'.'allShowtimes'.'edges'[3].'node'.'showtime'", containsString("14:30:00"))
                .body("'data'.'allShowtimes'.'edges'[3].'node'.'dayOfWeek'", containsString("A_4"));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { newsTag  (id : \\\"Bk3\\\")  {id,createdDate,news{createdDate,updatedDate,title,newsImage,newstagSet{pageInfo{hasNextPage,endCursor}}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'newsTag'", nullValue());
    }


}
